<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux 環境下使用 regex 刪除檔案</title>
      <link href="/2020/12/18/linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8-regex-%E5%88%AA%E9%99%A4%E6%AA%94%E6%A1%88/"/>
      <url>/2020/12/18/linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8-regex-%E5%88%AA%E9%99%A4%E6%AA%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>查詢檔名符合條件的檔案</p><p>條件為：localhost_access_log..2018*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls | grep -P &quot;localhost_access_log..2018*&quot;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/regex 刪除檔案01.png" alt="regex 刪除檔案"></p><p>查詢檔名符合條件的檔案並 “刪除”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls | grep -P &quot;localhost_access_log..2018*&quot; | xargs -d&quot;\n&quot; rm</span><br></pre></td></tr></table></figure><p><img src="/blog/images/regex 刪除檔案02.png" alt="regex 刪除檔案"></p><a id="more"></a><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><p><a href="https://superuser.com/questions/392872/delete-files-with-regular-expression" target="_blank" rel="noopener">https://superuser.com/questions/392872/delete-files-with-regular-expression</a></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular Http Post Request Payload v.s. Form Data</title>
      <link href="/2020/12/18/Angular-Http-Post-Request-Payload-v-s-Form-Data/"/>
      <url>/2020/12/18/Angular-Http-Post-Request-Payload-v-s-Form-Data/</url>
      
        <content type="html"><![CDATA[<p>Angular Post Request 的 Header 下的 Content-Type 是 application/json，而且會把參數包在 payload 內。如果你的後端都是使用 request.body 去接參數的話，都會接到空。</p><a id="more"></a><hr><p>以下是將 json 物件資料轉為 x-www-form-urlencoded 傳遞參數的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const options = &#123;</span><br><span class="line">  headers: new HttpHeaders(&#123;</span><br><span class="line">    &apos;Accept&apos;: &apos;application/json&apos;,</span><br><span class="line">    &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded;charset=utf8&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const params = new URLSearchParams();</span><br><span class="line">params.append(&apos;openId&apos;, &apos;user_open_id&apos;);</span><br><span class="line">params.append(&apos;msg&apos;, &apos;hello world&apos;);</span><br><span class="line"></span><br><span class="line">return this.httpClient.post&lt;boolean&gt;(&apos;https://www.example.com/path&apos;, params.toString(), options);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql 檔案還原</title>
      <link href="/2020/12/18/MySql-%E6%AA%94%E6%A1%88%E9%82%84%E5%8E%9F/"/>
      <url>/2020/12/18/MySql-%E6%AA%94%E6%A1%88%E9%82%84%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<p>我原本在本地 Docker 運行一個 redmine 的實體，可是後來某次重開機，mariadb 就一直重啟，無法正常運行，試了很多種方法，就放棄把它運行起來了。</p><p>後來看到好險當初有把硬碟掛載到外面，所以 mariadb 的檔案我還取得的到。</p><a id="more"></a><hr><p>mariadb 的 db 剛好會包成一個資料夾，下面會有一堆 .frm, .ibd 的檔案，跟 mysql 一模一樣。我就想說把這個資料夾搬到我另外一個本地運行的 mysql 就好了。</p><p>以下是我遇到的問題</p><h1 id="權限不對"><a href="#權限不對" class="headerlink" title="權限不對"></a>權限不對</h1><p>因為複製過去後，我的資料夾及檔案權限會變成我電腦的使用者，而不是 _mysql。</p><p>只要使用 chown 及 chmod 就可以解決</p><p>chown：變更資料夾或檔案的擁有者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R mysql:mysql /data/[db_folder]</span><br></pre></td></tr></table></figure><p>-R 是遍歷資料夾下所有檔案的意思</p><p>chomd：變更資料夾或檔案的使用者權限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod -R 755 /data/[db_folder]</span><br></pre></td></tr></table></figure><h1 id="表格不存在"><a href="#表格不存在" class="headerlink" title="表格不存在"></a>表格不存在</h1><p>處理好權限不對問題後，就可以在 DB Tool 看到該資料庫（我最近在用 QueryPie 覺得很好用），可是準備要點開各個 Table 檢查資料後，就被提示 Table dosen’t exist 的錯誤，請教了一下 google 大神找到這篇文章：<a href="https://www.itread01.com/content/1547499247.html" target="_blank" rel="noopener">https://www.itread01.com/content/1547499247.html</a></p><p>所以我就把原本舊 DB 下的 ibdata1 這個檔案複製到我新 DB 下，就可以開起來啦～</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql 無法啟動問題 - /usr/local/mysql/data directory is not owned by the mysql user</title>
      <link href="/2020/09/08/MySql-%E7%84%A1%E6%B3%95%E5%95%9F%E5%8B%95%E5%95%8F%E9%A1%8C-usr-local-mysql-data-directory-is-not-owned-by-the-mysql-user/"/>
      <url>/2020/09/08/MySql-%E7%84%A1%E6%B3%95%E5%95%9F%E5%8B%95%E5%95%8F%E9%A1%8C-usr-local-mysql-data-directory-is-not-owned-by-the-mysql-user/</url>
      
        <content type="html"><![CDATA[<p>主因是因為之前試做一些 python 程式時，因為需要調整環境變數時，動到 /usr/local 的權限了。</p><p>/usr/local 資料夾以及下面的檔案及資料夾擁有者和權限都更動到，導致 /usr/local/mysql/data 的擁有者不再是 mysql</p><p>在 terminal 執行已指令就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R mysql /usr/local/mysql/data</span><br></pre></td></tr></table></figure><p>可以使用 ls -la 檢查擁有者及權限</p><p>參考資料：<a href="https://www.itread01.com/content/1544114825.html" target="_blank" rel="noopener">https://www.itread01.com/content/1544114825.html</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>羽雁杯第 20 屆檢討文</title>
      <link href="/2020/08/17/%E7%BE%BD%E9%9B%81%E6%9D%AF%E7%AC%AC-20-%E5%B1%86%E6%AA%A2%E8%A8%8E%E6%96%87/"/>
      <url>/2020/08/17/%E7%BE%BD%E9%9B%81%E6%9D%AF%E7%AC%AC-20-%E5%B1%86%E6%AA%A2%E8%A8%8E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>在外面零打打久了，都打中等程度的場，有點過度自我蓬漲了，原本以為可以打到，但是比賽當天，沒想到是打到倒數幾名…</p><a id="more"></a><hr><p>先說說自己認為有問題地方好了：</p><h2 id="緊張、慢熱"><a href="#緊張、慢熱" class="headerlink" title="緊張、慢熱"></a>緊張、慢熱</h2><p>前面幾場是循環賽，原本就是想要當作熱身，輸掉也屬正常，但是應該要盡可能熟悉場地和比賽用球。在比賽前的熱身非常短，全部採用拉長球的方式熱身有點失策，因為對於網前、平抽和跑動就沒有熟悉到，應該每種球路都應該嘗試幾球，有跑動也比較可以把身體熱開，不應該怕浪費體力，另外長球打法也應該使用比賽常打出來的平快球，而不是拉高。</p><p>星期天參與了動態羽球館的教練場加暢打，教練場練習了第一輪雙打攻擊輪轉，才第一輪就有點喘，原本以為是自己的體力太差，但輪過幾輪後才發現，這才是適合我的熱身方式，我應該先趕快讓自己的腳和手都快起來，熟悉快球路，這樣在正式比賽時，才可以適應對方殺球還有自己進攻的節奏。一開始就喘沒關係，因為我自認自己在回復體力上還蠻快的，且在場上遇到的對手，運動量通常沒有我多。</p><p>結論：熱身時應該每種球路多嘗試，最好可以熱身到跑動的階段。</p><h2 id="重輕拍的切換"><a href="#重輕拍的切換" class="headerlink" title="重輕拍的切換"></a>重輕拍的切換</h2><p>從舊拍 86g 換到 83g 的新拍已經過了快一個月，已經沒有了當初拿到新拍時那種輕盈感，賽前還覺得有點重了。在週日的練習中，試著先拿了舊拍去打，接著再換成輕拍，那種輕盈感又回來了，而且沒有重新抓取球點的問題。</p><h2 id="我方處於弱勢時的處理"><a href="#我方處於弱勢時的處理" class="headerlink" title="我方處於弱勢時的處理"></a>我方處於弱勢時的處理</h2><p>一整天比賽下來，聽到其他同伴對我混雙搭擋有個心得，就是我的混雙搭擋在認知到對面實力比她厲害時經常發生不可預期的錯誤，像是出界的誤判、發力的拿捏，我自己也都沒有意識到這一點，我知道自己在打比自己弱的隊伍時會比較放心，打的球就比較慢、而且穩定，也是因為配得切和殺球比較少的原因，可是今天打下來，發現除了緊張之外，我也不敢打容易失誤的球，導致我方一直處於被動的狀態，輸掉的那兩場，有蠻多分數是對方失誤的得分。</p><p>到了倒數第二場，其實沒有比較弱勢的情況，可是在 10 分食，比分一直咬得很近，但是這一場我一直有個壓力，就是不可以讓對手拿超過 13 分，原本在對手拿到 11 分時，我們連續拿了 8 分，可惜最後我的發球掛網，導致後面停止拿分，變成雙方互相得分，最後 21:17 的樣子，還是讓對手拿了超過 13 分，輸掉那一局的團體賽。</p><p>我在還沒有賽末點時，終場可能互拿 10 分時，其實容易被一波帶走，常常是在比賽一開始或者比賽最後才有連續得分，就變成分數的拉鋸戰，常常不敵壓力，一連掉好幾分。</p><p>自己在比分很近時，常常在接發球發生失誤，目前還在找改善的方法。</p><h2 id="無法保持大幅度領先"><a href="#無法保持大幅度領先" class="headerlink" title="無法保持大幅度領先"></a>無法保持大幅度領先</h2><p>不管自己以什麼心態去打球，輕鬆打還是積極進攻去打，後來發現分差還是一直拉不開，變成自己在打後場跑位不好的對手才有機會有很高的勝率，其他類型的對手，都用太固定的打法，沒有打亂對手的節奏或跑位，都很難把對方一波帶走。</p><h2 id="羽雁杯"><a href="#羽雁杯" class="headerlink" title="羽雁杯"></a>羽雁杯</h2><p>大學畢業後第一次參加團體賽，能夠第一次就參加羽雁杯真的覺得很幸運，因為賽制的關係，讓每一個隊伍都打一樣多的場次，不管是第一名還是最後一名，都打一樣多的場次，單淘汰賽也不會因為打輸就沒有下一場，仍然會讓輸掉的隊伍在打一場，打出後面的名次。</p><p>另外，雖然是團體賽，可是不是取三戰兩勝，而是計算三點的總積分，所以非常看重實力，而不會有策略排點，導致有棄點仍可以取勝的情況，但也凸顯出，如果不穩定，分數無法拉近而取得太少，就會變成兩勝一敗仍輸掉團體賽的局面。</p><p>除了賽制之外，參賽講也都很執得，除了參賽會取得的賽服之外，每個人也可以參加抽獎，價值都在 300 以上，而且因為辦的很多屆的關係，所以也很多贊助商會提供免費的餐點，整個氣氛都非常的好。</p><p>希望下一屆還可以繼續參加，看是否可以打到更好的名次。</p>]]></content>
      
      
      <categories>
          
          <category> 羽球日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020 年中檢討</title>
      <link href="/2020/07/25/2020-%E5%B9%B4%E4%B8%AD%E6%AA%A2%E8%A8%8E/"/>
      <url>/2020/07/25/2020-%E5%B9%B4%E4%B8%AD%E6%AA%A2%E8%A8%8E/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="請輸入四碼生日" />    <label for="pass">請輸入四碼生日</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>真相與正義 - 直言真相</title>
      <link href="/2020/02/09/%E7%9C%9F%E7%9B%B8%E8%88%87%E6%AD%A3%E7%BE%A9/"/>
      <url>/2020/02/09/%E7%9C%9F%E7%9B%B8%E8%88%87%E6%AD%A3%E7%BE%A9/</url>
      
        <content type="html"><![CDATA[<p>最近因為一些原因，可以免費看 Apple TV+，我就上平台隨意找了一些可能會有興趣的影集看看，我看的是「直言真相」。</p><p>如果真相是有違你心中正義的，你還願意相信這個真相？還是你會重新定義你認為的正義？</p><p>真相是客觀的，正義是主觀的，只要是主觀的，是不是就很難做到所有人都認同？</p><p>是不是真有人有辦法，做到完全的客觀？公視可以嗎？教科書可以嗎？</p><p>以下有雷，怕雷者不要點開</p><a id="more"></a><hr><p>這是在講述一個播客 (Podcast) 重新調查一件她 20 年前曾經報導過的刑事案件，多年後的現在，因為一個陳年的證據被翻出來，讓她重新思考她 20 年前的報導是否不顧真相，太過偏頗。</p><hr><p>我其實沒有多希望這部影集可以帶給我什麼新的觀點，</p><p>這就是一部翻案的故事，沒有什麼驚人的推理，調查的故事也沒有像是偵探或者刑警那樣鉅細彌遺，事件最後能夠水落石出，只是因為運氣好以及故事需要。</p><p>之所以會讓我一直想要看下去的動力，是我看到這部戲有深刻描寫，或者淡淡的暗示到我對於社會所不暸解的一面。</p><p>以下為了方便我分辨誰是誰，我列一下提到的角色：</p><ul><li>播客 - 帕琵·帕奈爾（Poppy Parnell），簡稱 帕琵</li><li>被定罪的兇手 - 沃倫·凱夫（Warren Cave），簡稱沃倫</li><li>被殺害的知名作家的大女兒 - 簡稱蘭妮</li><li>被殺害的知名作家的小女兒 - 簡稱嬌西</li></ul><h2 id="最初的偏頗報導"><a href="#最初的偏頗報導" class="headerlink" title="最初的偏頗報導"></a>最初的偏頗報導</h2><p>這一個部分沒有在劇情內很詳細地被說到，但有幾個點讓我很在意：</p><ol><li>一個 16 歲的少年，最後被以成人的身份進行審判。</li><li>最後的判決是無期徒刑，且不可假釋。</li><li>播客不斷強調他把一個素昧平生的人描寫成一個嗜血殘忍的惡魔。</li><li>凶器沒有找到，最有力的證據是被害人家屬的目擊證詞。</li></ol><p>就我在台灣新聞上所看到的，謀殺很少被判到無期徒刑，而且還判決在一個青少年的身上。</p><p>到底是有什麼樣的報導，並且激起什麼樣的輿論，才會讓一個青少年面臨無期徒刑的判決？這是我一直很像在劇情中看到的，不過最後應該只是劇情上的需要，沒有實際上存在的必要，發生的機率也微乎其微，但我不敢說這一定不會發生在真實世界。</p><p>綜合以上在意的點，以及在劇情中看到不斷提醒觀眾的說詞，我確信，這是關於種族對立的故事。</p><p>播客對這名青少年並沒有深仇大恨，只是因為膚色的不同，以及這個報導的成敗足以影響她未來的人生發展。所以，她只靠著警方對外的說法以及提供的證據，儘管對於是否能夠判決一個人是否有罪是明顯不足的，就把一個白人青少年描寫成一個殺人魔。</p><h2 id="納粹與雅利安兄弟會"><a href="#納粹與雅利安兄弟會" class="headerlink" title="納粹與雅利安兄弟會"></a>納粹與雅利安兄弟會</h2><ol><li>帕琵在一開始，歷盡千辛萬苦終於取得和沃倫的面見機會，可是當沃倫開始展示他的刺青，帕琵直接掉頭走人？</li><li>當帕琵試著要向監獄內傳遞訊息給沃倫時，為什麼不直接找他有在經營幫派的父親幫忙，和他們的幫派有什麼關係？</li></ol><p>在台灣，我只在歷史課本上稍微讀過德國納粹的事情，以及從看過的電影了解一二，至於在新聞上看到有人 Cosplay 或者談論到的經驗就不提了，總歸一句，其實在我生長的環境中，很難理解外國人對於納粹極度反感的反應。但是就讓我想起，就在幾年之前，台灣新聞才報導過有國外網友，對於學生用戲謔的心態去看待納粹這個象徵意義非常憤怒，也有台灣官員跳出來說這些學生實在是太沒有國際觀了。<a href="https://www.youtube.com/watch?v=GntZ6TbVzS0" target="_blank" rel="noopener">當年的新聞報導</a></p><p>其實我自己本身對國外的歧視、種族對立也無法說感同身受，可以說是完全無法理解，以及有動力去理解。直到長大了，看到我覺得無法理解的戲中橋段。</p><p>以下連結可能有些人不喜歡或無法適應，請斟酌點開：</p><p><a href="https://kknews.cc/zh-tw/world/brnrbj.html" target="_blank" rel="noopener">雅利安兄弟會</a><br><a href="https://zh.wikipedia.org/wiki/%E7%BA%B3%E7%B2%B9%E4%B8%BB%E4%B9%89" target="_blank" rel="noopener">納粹主義</a></p><p>對於在台灣完全不特別的成長環境，要了解這些，只能透過很片面、很教科書上的了解，儘管我是台中人、曾經去過監獄當過替代役，我還是無法想像在電影中上演的監獄幫派情節。希望我和大多數的人都可以不用經歷這些過完這一生。</p><h2 id="最後真相大白了嗎？"><a href="#最後真相大白了嗎？" class="headerlink" title="最後真相大白了嗎？"></a>最後真相大白了嗎？</h2><p>前一半的集數，都在花很多間鋪陳以及營造沃倫的父親才是兇手，他有十足的動機，以及他各種處心積慮的威脅和阻擋帕琵以及沃倫繼續調查。結果沃倫的父親只是當天撞到了一個同一條街上的小孩，因為怕自己的肇事逃逸事件曝光，才指認他兒子（沃倫）讓他入獄，藉以用更吸引人的焦點，模糊一個肇事逃逸的事件。</p><p>後來又有大約 2 集的時間，在鋪陳蘭妮的媽媽是因為保護女兒免於再次遭受爸爸的傷害，所以選擇殺害了父親。</p><p>最後的結局證明前面的猜測都是錯的，最後殺人的兇手，不是沃倫、不是沃倫父親、也不是蘭妮或蘭妮他媽媽，是看似無害、千法百計要逃離蘭妮的嬌西。</p><p>而嬌西殺害自己的父親，又完全是一個誤會，因為蘭妮是一個極度希望她人關注的性格，造成他經常性的說謊，所以他被家裡的人排擠，而且又騙了嬌西說父親長年性侵蘭妮，儘管嬌西一開始是否定這個說法的，但是看到父親和蘭妮在拉扯，嬌西也一下失去的理智，殺害了父親。</p><p>最後的真相是蘭妮才是一切的罪魁禍首，儘管她做了偽證，用計讓她媽媽不小心服了過量的止痛藥，可是如果舉發了蘭妮，可憐的嬌西仍要面臨殺人的刑責。這讓帕琵有點難已決定該怎麼做。</p><p>幸好最後有了一個還算令人滿意的結局。</p><p>上面這個說法，不知道是不是大家都滿意？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020 新年新希望</title>
      <link href="/2020/02/02/2020-%E6%96%B0%E5%B9%B4%E6%96%B0%E5%B8%8C%E6%9C%9B/"/>
      <url>/2020/02/02/2020-%E6%96%B0%E5%B9%B4%E6%96%B0%E5%B8%8C%E6%9C%9B/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="請輸入四碼生日" />    <label for="pass">請輸入四碼生日</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+zogLdQq3dhELQQfRgOqxnU2jaFXRx1P9wlf3DWMlIVe+sdcjI4MBLGdSJU/zFjFN49lGtTLZ1SLpg+0DRvnzwPqKJ1BjUTcP5hHLznx5avMFHGhjmd7vRIjL1MY70dZ3LjpBvRNYSRpsqqeioLdxyCGsl4W/slEB/Seg+IeURID+7WVuPTbksRbd5cs8tFcFyTj50Khe+D3eZB70QJUFIBd3WbmWs7lnlZkNTiRhndpadXgb/QtOkHbGjuKpcTRhCoMevWYqzQMSHsZwAWgUFF3huVgFbZyuSDBbidulDvT+0YBw8I1AUYkKYWu4pgmMVDXTOaHSxwc29kaYTzJY6zp9cZHJ1p879TKFOSzjfrxkaEgqsqgZUu8sajfBEjy7gmEMMjKP6loOdLd9QgBMD8ahuvlDi2RhfEuN7QZKyhVCKSPHvLP8/L6DuuXuh3yFNeYxVzCs9q1CUpF3P3VkI5dL4CmCTuF5URDitB4K4IapgADBdUB5Cxy+kQuq+ovBDCoBeBfnz7GtZhbdzx5OHwxgRR4sIxPBV92SuupVPAocKo8ZfTGwZQ5/LX14EhzcpuQBMbQ40HC8BxPwvhko9aBVhGx8yHhAYmGUlt2JsOgylQiu57QLkxGyErVjGm1HNOfUpZab0PjycVp4DBoz2pLCitqrCObxtAHmVNNygNydme3tmuaYwbkd6rfChxSewP2hzjhG8OEKbEbAleSWSynrCaoj2SM4yhcM9HXju/84L1zuVvRhOJZhfYiZ1Y58UIFzAOOyDqv3OM/wlYLwDMwhF3LZhS/ebdTSEDCsUpiO4p/eT5fUgQ2b/XZC42W9H3Eee8EDPhAjgg7jUyXWCStXlQ2ioCz6kslYkgCVW8LKdNHsOmgZCslWangUAS7upzL9DSQwGYU+uFqbUZKoo9bitBlmCHiOlQhZLmxSC0XeNZ/lXjSLzgjGKVdfKQ/z73Szzzt9PV7W/smsLJ7BILrSlJxmXwriLR9a87ixPUOzpTEM2pBMgrfa7N367Yy0pxe/sxMlqKVaBgFfKXNv+8jDGyXcZPB0CrmGbpaf0j9IcnNkXkMKeT1J+xAREiuUek3obVK9FkR/0pFE8PXzb6rB0UvNGE65G5+RqsPSF0YSP+aHVmQOkCyc0eCPvk67lvQX5Y9IM1ZB/9nEmwTCemOqBtv4TIt5/11j6yx9SHCsyXFarPYya+dO54HMrRBGGjwUsen2KuxWNiA3esj4YCo4ia2FNlpKLpK3l3yy6Ozu+CJs9oPy+3gbW0MRalEC2xFaw+sQx76fe9qTDnvBQRFJ2T8AoSy+QU/Ub2W2c2VouS84Mpt0WaERO4Hbga+iY91xNYU3jV/FGQUkS0Qux6D31DO8CTQe43vnJvVRcqTmcTd+yfRoTv9r0bJ9/1qLYpD/7CtoUBWZTAbpXin22Sy9nvvkHryVPYG2lB31gmnFCmHaZOrjA+e6+lpsxjiujRVxk9NwhfU7YIeKiV5bzKQbX2XWVN89FLUUzG3ocBncot6su8VZgqZ3VN2vXkWfu4w+fUJG+YTUlE/Lyf3vOk3fw/YN5Xta7EcKw8XKc3yBvXHeujyawZ7A94Ludw14pGaPFKg3OGV+6gRYAcgxRIfBWSXEfNmYuLlgjbHj3p8A44HQ2OPxF19NYic3SG2HSaJgQGbNxtk6ejzdn3yoDvL3MGMtp8afu/V5Hl+KmnKOwXybIESNSYIGQEgYotciguo0vrld/+k07AjaPz2uzqEtVX5p4DJFIVsUZPiPjKYsqYQHsMvE2EY5+2Mk0oILA9i/RGy/yX3wgBawDFnaxzGADPcwCNqGmKwWfaZSPinFlwd93h9MjY/YiJK+ROF4aVmbdPFMRfijor9ck3dDYvKqCFfmuaRVbalHnqXo8BvUsXhnm40wTl3B6W7hPGyxcKTE+NoY/Fp1xbFlKPWjCtmfl8hN6MaP3fhpCB27dysDxAKRHEntPwAuTL2Uv5r4PWwrvyY+FPOs8Yc+TKWalip2vf67Ta1mZ+bXw2uOsChgikxmlHsMEIBCzxBBu7QSXoIEB+9kFScssMYSP9H5lggdYnIgD625T6cU5DnQbif+qdVm1i3WQ322HiK8QIvf47BL8TexuB3YpxBcAh78Z01oqzcKIggD08iEQGSlV2wBFD097Ge+ZynX7WNM/+kpCBqCl7D/k+73R9UDwrDb11iSPFXkosAFdY4JENXVxE+jHvF2BxtY4nbFCnWdFtwF7kmB664/TssyjgdIksmgPijkAeB0oP5DuPkxomsiZk4Jq3yGRRpbnnFUkEBmwW28wGmo+Ry8tesfLlVeejGZv/753NHgwxx++GOw+JQJozBXnEABqrm8t9tGF6zhYnIyAGfYN6yrV3F8jL+dcka7MQX/ZLpYlVMIMAHU8aw6WtzTi4eGyjyZDDXU0Fflxu4oDp11sspyRg4lNwsqS2lJ3IJMNDjQr0UmQryTxe4Vl4mql0m6MQU+rxqp3cpNA14BOe3CHvT3mo81yeDpOEXWf9zfyF9f9R1fTFCgRxFpvr2yy052GAvP9cVN+JfiQ7+sUN2ZFPANEyF5RajYqewLskqcSHZxOpr1yRffhoZ+iGahQrr01Y5PQnveR6fkyR3tD6ovb1cW4I2LrrSki8DL3+bS4LI+IAX36i5pTUlWskH2sN/2/ZbNSjHnZmFWt2hlRJTqLn2GBD87FYc9qXJKYv6xLRKtWRkk5ox4KkHB77+H4l0THz3yVrBpH61v0QXjfSz4QofaAx4zdFX2J9VyqyduTwAUvdgDLerVENO81AZqC7pWVrxrt+EoJxkHrQMJn1yuUbpnBbVQgTioCcDurTJ91022cjrIfaesuP8tJousIXHnlxJNUQu9oVwSSU1mFYiaLB0A99EswKS7yhdo8PHhk1kiQbFp1NP0cgHMoui6BTLYGQbLOuliNTZBUrSe+3TLKvSNqiX7zAeT2enF7leAiUh6+NOKfiC/rqDtHtGgx01yAyyEGmZL1NSxRgpQLWP52v4+GR5wMaM5i5/F8C+u4hUm3vW104rfdMbHWmV24cP92FCT9qge1S7CIAQwZ4fZNV9kVwGN46p7Z9klSLl5bRj+DbrhLWV8q5xHktaDxLGdJApPobBYw7MzWNjmYKlCM6vJyJ7MHIQHBu5TebNPg5ucWpl+/1kuQJJH1GJnYc7Ge+xe1CxDGo6gXIcYItSzVE01M4zWdn9TwhYzwL1CIIqCiu2XmDwrAVqqbj3AtX+OyCEIDGQx3DvFYPfnDOgUqnL/Pwf1SKVPfX2JuoePogIKt3Tz5akl1dTjiDbHAO9y/zF0bfwoHTlVL8ay3xm2GzlY1K9HhVPgkdL36iagFj+D+QqyLIjxO8MqIbHEIlr734KdHcdmZBJb2bOJSIYo9MNd14ImQu5OCNoJD3RvYmEt78RjV8MiC5+Xi4nNm8lEUnxbHjjaFaPbXfqyxHD7353pBs30TXyrrfws++rdW09KwdfloYzBAyF2MG/uwOzQ9TlDoxU2FYhBOsd4mf7KNbVyP7Zu0bqC7yaifrD4uL23s+7uyAq4erWVlOfFpFluiKoWFGxnmEJYnoxO741Gcd3aOWUz5HDs2N83aEpJxdxI61Hi61oSXsTE45AEcoSXHQ8y4CSfH83UAmcvX3FLIKyzPDSLld71C957UqYQy/mvuYz9CZ4KhSTpVP4+Sk12Ph50VucBJKAzrYvxA250nshEbCnBLSB5EzxEMZI1WrALuVG5fs3hrnEZ0qEsDjWb9XWlRLOUt7BG3uhCIJiRcL9ZrcUSX0FwAey+TyWN67fy803lZqCIQ32SZm3E15GF7T5DopAC+cpU9Jf/MK8SKxBUhuX6szUL5h7vdaIJxy7Q7o8KdgRpFaZLCYOnpLoY+1nbG8vF69sUHRsKF71mP68zRB8zYIu1nbW+6VElF6m2B7TDqTe5uUzv4omGCI2FXcOrTK4+bHsCkBGtwISeRNE8BM/1I19KOmwSum6vTd20TOuABTKEx5KrnUSXXn8siTtcpSumPO33AN0hEKSyH/yfP5F+tTBDowBkYwgci0qRyc0x6YP20aujHVy5DmJVhtYnsYsDMnECYMT3dX0NQCc9DzC4LCYzJ/eiuakqc/9j9jcziBfYF5DfzJeQdAl8+6wCsdXSCiEu50urxMfTlhwhZSUO6CQZIZwnm6BPkTPmV1mca9U03IKIwnD3o7ZpqaqjNa+H71UP/qz04/O9Cu7rOpm1N6uZUeLQlK4e/vCNFdMFEuhAscwRbMXgIetUWqxoAlCpoYNMkJt0HLRhtxqy7w4Tq16XDiazmX5/10tQ8HhfBix/FxVdDUZwt6egcWUH6UzJN6OskgrsglGadRQ0obvoOYzVzRQ62UKHrqLHqYJrQBKZg9VqaDEg/3GcFvFaWr4ZG65zhu/Thi9Qw5Ve3i7k5elAgdFVFv4RPDT9jA1ldoThWsMasYDDATPr/HRYEXlpkDMl0xtNPrXh/yenLoJ7SRbxEoIzVPqSdMNHpvmDAfyE2ASKizJVpNkkyG5Gs+aWIuw4QvUZqvDSHtNbLuA==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019/10 大阪自由行整理</title>
      <link href="/2020/02/02/2019-10-%E5%A4%A7%E9%98%AA%E8%87%AA%E7%94%B1%E8%A1%8C%E6%95%B4%E7%90%86/"/>
      <url>/2020/02/02/2019-10-%E5%A4%A7%E9%98%AA%E8%87%AA%E7%94%B1%E8%A1%8C%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>遲來的自由行整理，總共換了 70000 的日幣出國，差不多花光光，而且中間有一度擔心錢不夠用，不過後來幾天還是在吃很多好料還有買了好幾個伴手禮中結束了。</p><a id="more"></a><hr><p>開銷整理請看 <a href="https://docs.google.com/spreadsheets/d/1tgeDjeX2Xubmn8tTpsaEdibjdspyEPh71l2L6EIS_9s/edit?usp=sharing" target="_blank" rel="noopener">開銷總整理</a></p><h3 id="日幣花費"><a href="#日幣花費" class="headerlink" title="日幣花費"></a>日幣花費</h3><p><img src="/blog/images/201910DaBanJapanese.png" alt="日幣花費"></p><h3 id="所有項目換算為台幣後的花費"><a href="#所有項目換算為台幣後的花費" class="headerlink" title="所有項目換算為台幣後的花費"></a>所有項目換算為台幣後的花費</h3><p><img src="/blog/images/201910DaBanTaiwanese.png" alt="台幣花費"></p><hr><p>這次的住宿沒有在台灣就先刷卡，是到日本後才付現金的，所以現金有一大部分花在住宿，不過這次有夥伴一起去，有稍微划算一點。</p><p>交通大部分還是在機票，這次比較少長距離的移動，大多是靠電車、地點就可以到了，沒有之前搭新幹線跑半個日本那個誇張。</p><p>如預期的，大部分的現金都拿來付吃好料的上面了，中間怕現金不夠，還有幾次是用刷卡的…</p><p>在整理開銷時覺得奇怪，明明只換了 70000 日幣過去，可是最後卻花超過我換的金額，可能是我跟我的夥伴在拆帳上面有點問題。</p><p>在一個禮拜的行程中，只換了 70000 日幣過去好像真的有點抖，下次要學乖一點，多換一點，不然在國外沒錢之得很囧，雖然很多地方可以用信用卡付掉，但是如果沒有折扣，感覺會被多砍一次手續費的問題。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑門市場有點黑</title>
      <link href="/2019/11/23/%E9%BB%91%E9%96%80%E5%B8%82%E5%A0%B4%E6%9C%89%E9%BB%9E%E9%BB%91/"/>
      <url>/2019/11/23/%E9%BB%91%E9%96%80%E5%B8%82%E5%A0%B4%E6%9C%89%E9%BB%9E%E9%BB%91/</url>
      
        <content type="html"><![CDATA[<p>某個早餐決定去走一圈黑門市場當吃早餐，ㄧ走進去，就看到一堆人直接在路上吃起來，難不成我應該要直接自備一碗白飯從街頭吃到巷尾？</p><a id="more"></a><p>我們在黑門市場吃了神戶牛肉片、烤扇貝、關東煮、哈密瓜、豆漿、茶碗蒸、烤豬肉和假的蟹肉棒。說真的，很多覺得不划算，沒到那個價位，絕對不是日本物價比較高，而是在日本這個隨便吃都好吃的地方，這些好像太普通了，而且又有點小貴。</p><p>神戶牛真的後悔，六小片要2000，不如晚上吃的燒肉吃到飽</p><p>藥妝的購物籃要裝什麼？</p><p>我記得我上次自己去北海道，原本也是想上網看看大家都說什麼必買，可是研究了很久，還是不知道買什麼回去對自己還是朋友有幫助，最後只買了一些東西，結果還被店員請到另外一個當地人結帳的通道，因為我買的東西太少，根本不能免稅。</p><p>這次我只是跟著我同伴來的，而且她還讓我幫她湊金額，我除了幫我哥買腸胃藥，還有我自己要買的拭鏡紙，其他都是買好玩的，像是清除黑頭還是粉刺的東西，還買了一罐可以擦肌肉酸痛的，其他看了真的不知道是什麼作用的，我同伴最後她的東西加上我的，也才日幣22000左右，根本不可能到3萬或5萬啊？大家到底都來掃什麼貨啊？感覺買10萬差不多就把一間店買下來了吧！</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兩次燒肉，吃到飽不一定要吃到飽，沒有吃到飽，不一定吃不飽</title>
      <link href="/2019/11/22/%E5%85%A9%E6%AC%A1%E7%87%92%E8%82%89%EF%BC%8C%E5%90%83%E5%88%B0%E9%A3%BD%E4%B8%8D%E4%B8%80%E5%AE%9A%E8%A6%81%E5%90%83%E5%88%B0%E9%A3%BD%EF%BC%8C%E6%B2%92%E6%9C%89%E5%90%83%E5%88%B0%E9%A3%BD%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E5%90%83%E4%B8%8D%E9%A3%BD/"/>
      <url>/2019/11/22/%E5%85%A9%E6%AC%A1%E7%87%92%E8%82%89%EF%BC%8C%E5%90%83%E5%88%B0%E9%A3%BD%E4%B8%8D%E4%B8%80%E5%AE%9A%E8%A6%81%E5%90%83%E5%88%B0%E9%A3%BD%EF%BC%8C%E6%B2%92%E6%9C%89%E5%90%83%E5%88%B0%E9%A3%BD%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E5%90%83%E4%B8%8D%E9%A3%BD/</url>
      
        <content type="html"><![CDATA[<p>這次來日本吃了兩次燒肉，第二次其實有點意外，當時其實想吃壽喜燒，第一家壽喜燒太貴，第二家要等太久，所以該吃別家燒肉。</p><a id="more"></a><p>第一家吃的是心齋橋的力丸，態度真的沒有多好，但有個女店員很客氣，但其實男店員也經常會巡視有沒有要點餐或整理桌面，其實沒有很差啦！不然就是今天客人不多，他們還沒有累到需要臭臉趕客人。</p><p>看到菜單有高級肉，還有根據之前吃到飽的經驗，直接腦抽來了一份牛肋條、牛橫隔膜、牛舌、豬里肌、高級豬，以為是來台灣吃到飽那種薄薄的肉，結果來的都是厚實的肉，加起來應該跟我整隻手一樣大，心想：該不會第一輪點餐就吃飽了吧？</p><p>牛舌好吃到直接讓同伴從不敢吃牛舌變成愛吃牛舌，牛肋條吃起來還很爽，油滋滋的，後來越吃越膩，吃到後面的豬有點懷疑人生，幹嘛點豬？還有，我們應該點拼盤的，他一份牛肋條2000，橫隔膜也快2000呀，其他的肉還沒試到呀！</p><p>幸好這一天腸胃和喉嚨表現出乎預期的好，可以吃到第二輪的肉，只是不知道有沒有吃到那個8000多日幣的價值，果然自己很不適合吃吃到飽，最後都在吃菜、豆腐、冰淇淋。對了，除了肉，其他都普普，最後的加點只能一人一道菜。</p><p>還是好像多吃一點牛舌，之前在仙台吃過牛舌之後，真的覺得牛舌才是真愛，其他太容易膩了。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIFREL 活生生的博物館</title>
      <link href="/2019/11/22/NIFREL-%E6%B4%BB%E7%94%9F%E7%94%9F%E7%9A%84%E5%8D%9A%E7%89%A9%E9%A4%A8/"/>
      <url>/2019/11/22/NIFREL-%E6%B4%BB%E7%94%9F%E7%94%9F%E7%9A%84%E5%8D%9A%E7%89%A9%E9%A4%A8/</url>
      
        <content type="html"><![CDATA[<p>說好的水裡生物，可以記起來只有喜歡吃皮屑的魚、好像在交配的海馬、看著看著有點想睡覺、但是又有點癡迷的水母螺旋流。其他大概還有2.30種的魚都記不起來。</p><a id="more"></a><p>後來有個夢幻時刻，可以在那邊坐著10分鐘看精美的動畫，使用上3下3個投影機投影出一顆球的動畫，另外使用上2個投影機投影出底版的一個圓形動畫，看得我目光迷離，很美，可是看不個所以然，可能我沒有當國文老師或作家的天份。</p><p>後面四個主題都是活生生（？）的動物，陸上（？）動物，第一隻就是鎮館之寶，白虎（吼嘎～）（X）（喵～）（O），真的爆大隻的，白色的毛看起來也超乾淨的，感覺就超好摸，可惜這隻貓真的太大，很有壓迫感，給我養也不敢養，我狗派的！看到牠抱著食物吃，覺得超可愛（現代人到底怎麼了，如果現代人看到恐龍在吃肉會覺得可愛嗎？）我們也很有幸的看到大貓咪在翻滾的樣子，是在討摸摸嗎？還有那個出浴露背貌，哇噻！好苗條哦！可惜是隻雄的。白虎的對面不是青龍，但也蠻像的，一隻不會動的鱷魚⋯，要不是看到牠的皮膚表面在有規律的鼓動，以為館方幹嘛把標本放在水裡，不會容易壞掉嗎？</p><p>後來進到下一個區域，被兩個自動門給關住，不是可以直接走過去的，自動門之間還有垂珠擋住，很像就是要走進另外一個閒雜人等與狗不得入內的地方，原來是個可愛動物園區，可以微接近動物，看你理解成稍微靠近一點的距離，還是離零距離還有段距離的靠近動物，都行。因為感覺可以伸手就可以摸到他們，但是又不可以伸手，那種曖昧的距離感，一堆狐朦、企鵝、海獺，一隻水豚、兩隻不知道什麼鳥、兩隻水獺，嗯，不能摸，擺那麼近幹嘛啊（垂地）！不過幸好沒猴子，不然牠靠過來我肯定反射動作揮拳。</p><p>NIFREL 出來就是兩個1/2還是1/10點鋼彈，不知道鋼彈到底多大，比例只好亂抓，反正好像有兩層樓那麼高吧，打爆巨石強森分分秒秒的事情，原本是想直接買個回去組的，可是查了一下台灣可以買到的價格，直接斷捨離，價格差不多呀，網路上買還比較便宜。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奈良鹿，你可以不要假敬禮真頂撞嗎？</title>
      <link href="/2019/11/22/%E5%A5%88%E8%89%AF%E9%B9%BF%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81%E5%81%87%E6%95%AC%E7%A6%AE%E7%9C%9F%E9%A0%82%E6%92%9E%E5%97%8E%EF%BC%9F/"/>
      <url>/2019/11/22/%E5%A5%88%E8%89%AF%E9%B9%BF%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81%E5%81%87%E6%95%AC%E7%A6%AE%E7%9C%9F%E9%A0%82%E6%92%9E%E5%97%8E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>有一天我們決定去奈良找鹿玩，還有看看春日大社和東大寺。</p><a id="more"></a><p>從難波搭近鐵到奈良出站往東走，很多就可以看到鹿在路上被餵食中，但是鹿兒餅已經漲價了，不是網路上找到的200日幣，但是其實還在可以接受的範圍，很多人直接刷一排鹿兒餅給鹿吃，很多人直接被鹿包圍，鹿直接就在賣鹿兒餅的攤販前顧著，看到有人買鹿兒餅，就沒在跟你客氣的，一種要吃掉你的手指和包包的氣勢跟你蹭吃的，我們抱著這群鹿已經被其他人餵飽的信念直接去春日大社看看，一路上還是常常看到很多鹿，這邊的就還蠻自然的，大多都在樹旁邊休息，不過在進去春日大社前有看到一群鹿在一個賣鹿兒餅的攤販前，結果都沒有人要買，鹿就一直靠在攤販前，結果攤販的爺爺就不爽了，直接掄起掃帚直接驅之別院，重重舉起、輕輕落下，往鹿的屁股拍下去。</p><p>春日大社就是一堆神社，各種神社，還有很多類似光明燈的存在，不過算是值得花門票進去看的，想要拍美美的照還是可以的，有個暗室氣氛很棒。</p><p>今天星期三原本是要去一個有名的茶屋喝茶吃糰子，可是剛好沒開，殘念跌屎。</p><p>下午也要去千壽庵吃好吃的蕨餅，但是星期三也不開放內用，某斗殘念跌屎，不過店員可能看我看了蕨餅很久，都不知道要買啥，決定拿給我試吃，不吃還好，一吃不得了，一試成主顧，直接刷一排蕨餅，這是什麼茶點，不是餅乾也不是蛋糕，也不是什麼粉一堆的糕點（但它也是粉一堆），外表很像台灣的麻糬沾花生粉，可是口感不一樣，吃下去也不會膩，應該可以直接吃掉3000日圓，放在嘴裡真的就是舌頭上下壓一下就化開了，很像入口即化的感覺，但又不是入口即化，不是什麼油膩膩還是快溶掉的巧克力，就是個老少鹹宜、鈔票換毒品的超高校級茶點。買了四盒之後，後來的幾天，常常越想越不對勁，是不是買太少了？大福什麼的，有點容易膩啊！</p><p>東大寺越逛人生越迷茫，門票還是不知道600和1000的差別？為什麼一堆人無法從洞裡爬出來，一定要有人拉才拉得出來？為什麼我要在裡面買了一件2500一即是全，全即是一的衣服？為什麼東大寺外面的鹿好像真的成精了，鹿兒餅在面前藏起來也沒用？為什麼我包包裡的鹿兒餅牠卻無法察覺，我以為動物的鼻子很厲害？</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奈良 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5日大阪環球影城+萬聖節快速通關</title>
      <link href="/2019/11/22/1-5%E6%97%A5%E5%A4%A7%E9%98%AA%E7%92%B0%E7%90%83%E5%BD%B1%E5%9F%8E-%E8%90%AC%E8%81%96%E7%AF%80%E5%BF%AB%E9%80%9F%E9%80%9A%E9%97%9C/"/>
      <url>/2019/11/22/1-5%E6%97%A5%E5%A4%A7%E9%98%AA%E7%92%B0%E7%90%83%E5%BD%B1%E5%9F%8E-%E8%90%AC%E8%81%96%E7%AF%80%E5%BF%AB%E9%80%9F%E9%80%9A%E9%97%9C/</url>
      
        <content type="html"><![CDATA[<p>我們抵達日本後的隔一天行程就是直接安排1.5日的大阪環球影城，難波到環球影城稍遠，還要轉至少一次車，不過除了住在環球影城旁邊之外，好像都是如此。</p><a id="more"></a><p>第一天我們是15:00之後才可以入場，所以快速通關有一個已經玩不到了，可是其實下午之後，影城的人會超爆多，因為學生、上班族也會這時候進去玩，所以幾乎每個遊戲都要排一個小時以上的隊伍，幸好是有快速通關才有玩到4個關卡。真的不建議在裡面吃東西，又貴又吃不飽，只有可樂跟外面價格差不多，還有一堆折扣搞不懂。</p><p>我好像國小之後就沒有去過遊樂場，國、高中畢旅應該有去過，可是卻一點印象都沒有，這次來影城，完全就是一個不同的概念，在裡面完成是另外一個世界，而且不同區塊，又是不同的世界，還記得在買環球影城的票時，根本搞不懂快速通關、各個主題的區分，真的要進來走個一圈才終於知道地圖和票在說什麼。</p><p>第一天半天的萬聖節關卡還蠻有趣的，而且都很不刺激，只是有點恐怖，不過都還可以接受，滿滿的鬼屋感，有些身歷其境、有些就是4D體驗，覺得小孩子也很適合（像是我）。不過可能長大後（經過社會的歷練），好像真的不太怕鬼，所以鬼屋都可以小小的被嚇到幾次繼續走完，好險沒有什麼像是密室逃脫要解題，不然可能會卡在裡面很久。晚上之後，很多關卡都會換成其他的，可能是配合萬聖節吧？所以有些就是等隔天整天的行程才能玩到。</p><p>隔天一大早就坐車到大阪環球影城，大概是8點左右到，同伴很想要早上6點就到，不過可能想到我其實沒那麼瘋遊樂場，所以勉為其難的八點才到，幸好那天剛好下雨，人真的不多，住的青旅其實也有提供愛心傘（不過這件事情我們是在回來之後才發現），我還在外面買了一個恐龍頭套戴著進去，因為其實昨天下午進場時，超多人都是萬聖節裝扮或者穿著環球影城的周邊進去，超有過節的感覺。所以我今天也直接大撒必花了3500日幣戴著頭套進去，用了一個可以保暖頭部的理由。但是，真的只有一點保暖效果，而且戴完很像戴完安全帽的感覺，頭髮都被壓扁了。早上的人潮和昨天差很多，原本想說要去搶哈利波特的整理券，但是其實根本不用搶就可以直接進去，遊戲也都不用排隊，看到10分鐘的等待時間，都只是關主在等人潮多一點才開始的等待時間，好險第二天沒買什麼快速通關和一大早天未亮就出門，根本超幸運。去玩完哈利波特後有個小插曲，就是我把所有貴重物品都忘在櫃子了，差點以為第三天就要跑領事館了，幸好大家都只是從自己櫃子拿走自己的東西而已，我的東西只是都被推的更裡面而已，真的是幸運值都點滿了。</p><p>第二天因為早上人很少，所以我們都直奔熱門遊戲，可是廢物如我，我竟然玩完第一個哈利波特就開始想吐，第二個黑洞就快死掉，第三個蜘蛛人直接陣亡吃午餐，原本以為是自己的小腦廢了，吃完午餐後繼續挑戰，開始覺得應該是早餐吃太少，血糖太低了，所以奉勸大家在搭車或者可能被動暈車時，一定要多吃點東西。</p><p>一路把網路上的人推薦的玩完之後發現，好像遊戲的核心技術差不多，只是劇情有點不同，除了什麼飛天翼龍和好萊塢就是雲霄飛車外（太恐怖 沒有去挑戰），飛天的鷹馬我也沒去 哈哈。</p><p>下午3點前的遊行還不錯，好像是第一次參加遊行，之前只是參加什麼運動會、太陽花，感覺去都沒有很嗨或者什麼，本身跟這種很需要跳起來嗨的活動絕緣，這次應該同伴拉著下去才跟著體驗在隊伍裡面，不然可能也是在旁邊看大家嗨到ㄎㄧㄤ掉。遊行內容本身可能沒有遊行關卡豐富，可是只要一直重複的歌曲和舞蹈，就讓旁邊的人也可以輕易融入，如果不融入也沒關係，拿著單眼在旁邊拍照，遊行的工作人員也會湊過去給你拍，揮揮手也不錯，幾乎都會被回應，在旁邊看到很多種人：情侶、獨行者、小孩、老人、高中生、行動不便者、很融入的人、在旁邊光看也很開心的人，不知道為什麼覺得有種世界大同的感覺。</p><p>晚上還有個萬聖節的遊行，和下午的遊行不太一樣，可以在園區內自己去找殭屍玩，第一天的晚上就去找了很多殭屍，還手殘不小心開到閃光燈被制止，不過被制止的很客氣，就也不影響心情。殭屍會去嚇你，或者突然趁你不注意時出現在你的後面，還有其他一些方式去和你互動，就自己去體驗吧，不過殭屍就是很不受控的角色，你要對他幹什麼，通常也不是太理你啦，和白天可能看到的角色不一樣，是要得到你的關注，只是想要聽到你的尖叫聲，去挑釁的人也大有人在，但我在旁邊可以感覺到一種故意冷落挑釁人的感覺。一堆ㄆㄨㄧˋㄍㄧㄚˋ</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10月大阪旅-下飛機的隨手記</title>
      <link href="/2019/11/22/10%E6%9C%88%E5%A4%A7%E9%98%AA%E6%97%85-%E4%B8%8B%E9%A3%9B%E6%A9%9F%E7%9A%84%E9%9A%A8%E6%89%8B%E8%A8%98/"/>
      <url>/2019/11/22/10%E6%9C%88%E5%A4%A7%E9%98%AA%E6%97%85-%E4%B8%8B%E9%A3%9B%E6%A9%9F%E7%9A%84%E9%9A%A8%E6%89%8B%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<p>在日本下飛機後是在第二航廈，一樣是小小一個航廈，沒什麼東西，下來之後因為找不到網路上說的南海電車，可是一下來看到非官方的中文服務，剛好有在賣到難波的巴士，不過要1100日幣，跟在飛機上看到賣得票一樣價格，還順便買了一張周遊卡，一樣是定價2700日幣，幸好剛好沒賣萬博週遊卡，不然哭死。反正樂桃就是個爹不疼娘不愛的路線。</p><a id="more"></a><p>關西機場第二航廈也沒啥吃的，是走到出發報到的地方才有一間7-11可以先吃點點心，不然可能到難波時已經16:00快餓死了。</p><p>搭巴士到難波時已經快16:30了，剛好到一個mall，可是卻好像什麼都沒開一樣，只有兩層樓可以吃東西，不過五樓很多連鎖店，像是杵屋烏龍麵店和鶴月風橋大阪燒，還可以接受。</p><p>我們是住在難波的一間青年旅館，一開始有點找不到入口，因為是在docomo的樓上，而且不知道為什麼一樓的入口被鎖起來，明明說晚上10點才需要密碼鎖，最後是走docomo的自動門進去。</p><p>青旅的老闆是個和藹的大叔，很吃力的用中文跟我們說明注意事項，雖然片片斷斷的，不過大多可以理解他要表達什麼。</p><p>這一間青旅我還蠻推薦的，我是住雙人房，床是分上下舖，上鋪不是走刀梯，是有台階的木板可以走，所以腳不會痛。床是以木頭為主體，所以動的稍微大力一點，上下舖都是會有感覺的，不過也因為是和認識、而且習慣蠻好的人一起，所以不是太大的問題，比睡大通舖的情旅風險低一點，價格是1300日幣左右，自己一床也大約是600日幣，覺得還可以接受。除了床之外，裡面還有一張桌子和椅子，有對外窗和鏡子，即使有對外窗，好像也不會被外面吵到，除非外面的人在吵架或者有沒有消音管的車子開過去才會感覺被吵到，外面逛街的人不太會影響作息。另外，這間青旅的盥洗用具超齊全，洗髮乳、護髮油、沐浴乳、浴巾這些基本的都有，牙刷組和洗面乳也都免費提供，只有如果住宿間要打掃房間需要另外收費，覺得還蠻划算的。早餐雖然說不提供，可是只是限量提供，早上8點之後都有吐司在3樓的大廳，每個人可以自己去拿兩片烤來吃，有提供草莓和奶油，我只是無法掌握他們的烤麵包機，怎麼烤都會有點焦⋯。</p><p>住的地點是選在難波，因為原本是想說去道頓堀、心齋橋、黑門市場都很近，走路的距離就可以到，旁邊也是各種地鐵的交匯處，這幾天住下來都很方便。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大阪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019/03/15 新興國中</title>
      <link href="/2019/03/16/2019-03-15-%E6%96%B0%E8%88%88%E5%9C%8B%E4%B8%AD/"/>
      <url>/2019/03/16/2019-03-15-%E6%96%B0%E8%88%88%E5%9C%8B%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>用球：品牌好像叫 CRM，藍色的標籤，藍黑色的球捅，我覺得蠻飛的，但是有點不耐打<br>程度：中下<br>人均：5 人 / 1 面 / 兩小時，但是另外有兩個場地，我沒有過去打，固定在程度較高的場地輪流而已</p><a id="more"></a><hr><p>今天打起來在守備上還蠻順的，很少跑不到位或者被壓迫的情況，只是前場還是挑球比較多，但是今天就算遇到很貼網或者翻網球，都可以挑到後場不會被壓迫的位置。</p><p>前場還是很多失誤，尤其在水準和我差不多的對手時，撲球和放貼網球失誤很多，我歸類在心理素質還是不太好，容易緊張，雖然本身打球的風格就是打慢，但是當有機會球時，還是會太要求貼網。</p><p>今天除了在守備之外，對於根據球的飛行距離也調整的很順暢，遇到羽球已經分岔或掉毛，很快就可以根據情況調整對應對手的回擊方式，像是刻意打到後場，我方取得控制中前場的主控權。</p><hr><p>題外話，今天晚上看了參考資料的影片，還有最近教人一些打球時遇到的問題，覺得羽球打到後面，真的沒有什麼球是一定要怎麼打，原則就是打得順、跑得順就好。</p><p>步伐對於初學者之外，除了本身都是衝來衝去，或者就是身體太高，機動性不夠之外，有稍微練過步伐的人，都太拘泥於幾步到位，變成有時候可以跑到位，但是擊球點都太靠近身體的問題，或者衝過頭的問題。如果可以像是影片中說的，加入一些小墊步，可以避免擊球點太過彆扭的問題。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=Ys1Y_J8wsQs" target="_blank" rel="noopener">步伐的移動</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 分支的相關應用</title>
      <link href="/2019/03/12/Git-%E5%88%86%E6%94%AF%E7%9A%84%E7%9B%B8%E9%97%9C%E6%87%89%E7%94%A8/"/>
      <url>/2019/03/12/Git-%E5%88%86%E6%94%AF%E7%9A%84%E7%9B%B8%E9%97%9C%E6%87%89%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="推到-server"><a href="#推到-server" class="headerlink" title="推到 server"></a>推到 server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><h2 id="從-server-拉下來"><a href="#從-server-拉下來" class="headerlink" title="從 server 拉下來"></a>從 server 拉下來</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br><span class="line">// &lt;branch-name&gt; 是一樣的</span><br></pre></td></tr></table></figure><p>如果遇到錯誤，請執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="刪除-server-上的分支"><a href="#刪除-server-上的分支" class="headerlink" title="刪除 server 上的分支"></a>刪除 server 上的分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete &lt;remote_name&gt; &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="新增本地分支"><a href="#新增本地分支" class="headerlink" title="新增本地分支"></a>新增本地分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="切換到分支"><a href="#切換到分支" class="headerlink" title="切換到分支"></a>切換到分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>或者想要新增同時又切換到新分支，可以輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="刪除分支"><a href="#刪除分支" class="headerlink" title="刪除分支"></a>刪除分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="合併分支"><a href="#合併分支" class="headerlink" title="合併分支"></a>合併分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>通常是先切換到當初分支出來的主分支，在主分支執行 git merge</p><h2 id="cherry-pick-取用某個-commit"><a href="#cherry-pick-取用某個-commit" class="headerlink" title="cherry-pick 取用某個 commit"></a>cherry-pick 取用某個 commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit-sha1&gt;</span><br></pre></td></tr></table></figure><p>操作流程如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git commit -m &apos;某些修正&apos;</span><br><span class="line">git log</span><br><span class="line">// 找到剛剛的 commit sha1，假設為 a123456</span><br><span class="line">git checkout dev</span><br><span class="line">git cherry-pick a123456</span><br></pre></td></tr></table></figure><p>如果在 master 修改，再回到 dev 使用 cherry-pick，兩邊都會有不同的 sha1 的 commit，當 master 又要 merge dev 時，需要解決其他衝突</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;other-branch&gt;</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure><p>我的理解是，假設平常都是在 dev 修改程式，master 是只有將程式上線到正式環境才會 commit 的主分支，如果臨時要對 master 修改，先將 master 修改後，再回到 dev rebase master，讓 dev 重新以修正問題的 master 為基底繼續修改。</p><p>如果是在 master 直接修改，在 dev 使用 cherry-pick，後續要在 master merge dev 會需要處理很多衝突。</p><p>如果記不起來應該何時使用，可以都使用 merge 就好，使用 merge 只是會多出一個 commit 的節點，是否有衝突，如何處理，都是一樣的。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.freecodecamp.org/forum/t/push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too/13222" target="_blank" rel="noopener">freecodecamp</a><br><a href="https://stackoverflow.com/questions/9537392/git-fetch-remote-branch" target="_blank" rel="noopener">stackoverflow</a><br><a href="https://backlog.com/git-tutorial/tw/" target="_blank" rel="noopener">連猴子都能懂的Git入門指南〜掌握版本控制</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果資料不存在才插入</title>
      <link href="/2019/03/05/%E5%A6%82%E6%9E%9C%E8%B3%87%E6%96%99%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%89%8D%E6%8F%92%E5%85%A5/"/>
      <url>/2019/03/05/%E5%A6%82%E6%9E%9C%E8%B3%87%E6%96%99%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%89%8D%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into proposal_label (name)</span><br><span class="line">select * from (select label_name) AS tmp</span><br><span class="line">where not exists (</span><br><span class="line">  select id from proposal_label where name = label_name</span><br><span class="line">) limit 1;</span><br></pre></td></tr></table></figure><a id="more"></a><p>以上為實際範例</p><hr><h3 id="不使用以下插入方式"><a href="#不使用以下插入方式" class="headerlink" title="不使用以下插入方式"></a>不使用以下插入方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into &lt;table-name&gt; (...columns)</span><br><span class="line">value (...values)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="使用以下方式插入"><a href="#使用以下方式插入" class="headerlink" title="使用以下方式插入"></a>使用以下方式插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into &lt;table-name&gt; (...columns)</span><br><span class="line">select columns from &lt;table-name&gt; where &lt;addition&gt;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="因為要考慮只有在沒有資料的情況下才插入資料，所以要加入-where-not-exists-的變形用法"><a href="#因為要考慮只有在沒有資料的情況下才插入資料，所以要加入-where-not-exists-的變形用法" class="headerlink" title="因為要考慮只有在沒有資料的情況下才插入資料，所以要加入 where not exists 的變形用法"></a>因為要考慮只有在沒有資料的情況下才插入資料，所以要加入 where not exists 的變形用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select label_name) AS tmp</span><br></pre></td></tr></table></figure><p>會將要插入的資料變成一張暫時的 table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where not exists (</span><br><span class="line">  select id from proposal_label where name = label_name</span><br><span class="line">) limit 1;</span><br></pre></td></tr></table></figure><p>要確認要插入的該張 table 沒有這個 value 的資料存在</p><p>limit 1 是因為不必撈出過多的資料，這樣有助於執行速率。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> insert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Store Procedure with Transaction 交易功能</title>
      <link href="/2019/03/05/Store-Procedure-with-Transaction-%E4%BA%A4%E6%98%93%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/03/05/Store-Procedure-with-Transaction-%E4%BA%A4%E6%98%93%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">declare exit handler for sqlexception</span><br><span class="line">begin</span><br><span class="line">  GET DIAGNOSTICS CONDITION 1</span><br><span class="line">  @error_code = RETURNED_SQLSTATE,</span><br><span class="line">  @error_msg = MESSAGE_TEXT;</span><br><span class="line">  rollback;</span><br><span class="line">  insert into log_sql (log) values(@error_msg);</span><br><span class="line">  RESIGNAL;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">set trello_id = JSON_UNQUOTE(JSON_EXTRACT(params, &apos;$.trello_id&apos;));</span><br><span class="line">set trello_name = JSON_UNQUOTE(JSON_EXTRACT(params, &apos;$.trello_name&apos;));</span><br><span class="line">set customer = JSON_UNQUOTE(JSON_EXTRACT(params, &apos;$.customer&apos;));</span><br><span class="line"></span><br><span class="line">start transaction;</span><br><span class="line">  insert into proposal_trello (id, name, customer)</span><br><span class="line">  values (trello_id, trello_name, customer);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="start-transaction"><a href="#start-transaction" class="headerlink" title="start transaction;"></a>start transaction;</h2><p>告知準備開始交易功能的敘述</p><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>如果都成功的話，就把剛剛做的交易都執行</p><h2 id="handler-for-sqlexception"><a href="#handler-for-sqlexception" class="headerlink" title="handler for sqlexception"></a>handler for sqlexception</h2><p>如果在這隻 store procedure 遇到例外不能執行完成，就會進入這個 handler</p><h2 id="rollback"><a href="#rollback" class="headerlink" title="rollback;"></a>rollback;</h2><p>將剛剛暫存的交易都回滾，當作沒有發生</p><p><code>注意，如果宣告 errorcode 和 errormsg 暫存的處理放在 rollback 之後，會取得不了，因為連錯誤都被回滾洗掉了</code></p><h2 id="RESIGNAL"><a href="#RESIGNAL" class="headerlink" title="RESIGNAL"></a>RESIGNAL</h2><p>重新發出一次 sql 執行錯誤的訊息給外部執行者</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> store procedure </tag>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Store Procedure Error Handler 例外處理</title>
      <link href="/2019/03/04/Store-Procedure-Error-Handler-%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86/"/>
      <url>/2019/03/04/Store-Procedure-Error-Handler-%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">declare exit handler for sqlexception</span><br><span class="line">begin</span><br><span class="line">  GET DIAGNOSTICS CONDITION 1</span><br><span class="line">  @error_code = RETURNED_SQLSTATE,</span><br><span class="line">  @error_msg = MESSAGE_TEXT;</span><br><span class="line">  rollback;</span><br><span class="line">  insert into log_sql (log) values(@error_msg);</span><br><span class="line">  RESIGNAL;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="宣告-handler"><a href="#宣告-handler" class="headerlink" title="宣告 handler"></a>宣告 handler</h2><p>使用 declare 宣告 handler </p><p>for 後面接的是情況，可以接 sqlexception、sqlwarning、not found</p><h2 id="RESIGNAL"><a href="#RESIGNAL" class="headerlink" title="RESIGNAL"></a>RESIGNAL</h2><p>因為我們已經 catch 到 exception，等於外部執行這個 store procedure 明明遇到錯誤，可是錯誤訊息已經被 catch 住，如果需要回傳 mysql server 原始的錯誤訊息，可以使用 RESIGNAL </p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol><li>要符合 declare 原則，在 set 還有操作 db 的 sql 語法之前</li><li>要在 declare 一般變數之後</li></ol><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists removeProposalLabels;</span><br><span class="line">delimiter #</span><br><span class="line">create procedure removeProposalLabels (</span><br><span class="line">params JSON </span><br><span class="line">)</span><br><span class="line">begin</span><br><span class="line">  declare trello_id varchar(10) character set utf8;</span><br><span class="line">  declare labels varchar(500) character set utf8;</span><br><span class="line">  declare loop_index int default 0;</span><br><span class="line">  declare label_id int;</span><br><span class="line">  -- log 錯誤訊息</span><br><span class="line">  declare exit handler for sqlexception</span><br><span class="line">  begin</span><br><span class="line">    GET DIAGNOSTICS CONDITION 1</span><br><span class="line">    @error_code = RETURNED_SQLSTATE,</span><br><span class="line">    @error_msg = MESSAGE_TEXT;</span><br><span class="line">    rollback;</span><br><span class="line">    insert into log_sql (log) values(@error_msg);</span><br><span class="line">    RESIGNAL;</span><br><span class="line">  end;</span><br><span class="line"></span><br><span class="line">  set trello_id = JSON_UNQUOTE(JSON_EXTRACT(params, &apos;$.trello_id&apos;));</span><br><span class="line">  set labels = JSON_EXTRACT(params, &apos;$.labels&apos;);</span><br><span class="line"></span><br><span class="line">  start transaction;</span><br><span class="line">    while loop_index &lt; JSON_LENGTH(labels) DO</span><br><span class="line">      set label_id = JSON_EXTRACT(labels,CONCAT(&apos;$[&apos;,loop_index,&apos;]&apos;));</span><br><span class="line">      delete from proposal_label_mapping where proposal_label_mapping.trello_id = trello_id and proposal_label_mapping.label_id = label_id;</span><br><span class="line"></span><br><span class="line">      select loop_index + 1 into loop_index;</span><br><span class="line">    end while;</span><br><span class="line">  commit;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> store procedure </tag>
            
            <tag> exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019/02/14 新興國中</title>
      <link href="/2019/02/25/2019-02-14-%E6%96%B0%E8%88%88%E5%9C%8B%E4%B8%AD/"/>
      <url>/2019/02/25/2019-02-14-%E6%96%B0%E8%88%88%E5%9C%8B%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>用球：不明，反正不高級<br>程度：中下，但有一位強者<br>人均：10 人 / 3 面 / 兩小時</p><a id="more"></a><hr><p>其實在寫這篇之前，已經打了好幾場的羽球，可是都忘記要記錄下心得，最近感覺自己打球好像又慢慢浮現出壞習慣，所以趕快來打一篇心得，看能不能在這星期三表現好一點。</p><h2 id="推挑"><a href="#推挑" class="headerlink" title="推挑"></a>推挑</h2><p>今天因為人少，所以有一面場地都空著，有一位大哥說要幫我和我學長練球，好像是因為看到我們殺球動作不確實，然後想要電電我們？</p><p>會意識到推挑這個打法，是因為原本我和我學長在練球時都是希望對方的殺球擊球點好，可是變成挑出去的球就比較高，而且會有一些過渡球，讓殺球的人可以一球一球殺好，但是這一位大哥在幫我們練球時就不是如此，他不只是每一球都挑到後半場沒有過渡，而且挑回來的球都像是拋物線，是非常平的球，雖然很多求感覺會出界，但我還是硬殺回去，結果變成殺回去的球軟弱無力，而且常常殺得太邊邊，因為找不到好的擊球點，只能用手腕硬殺。</p><p>一輪殺球練習之後，大哥又說要跑左前右後的腳步，右後的腳步又是挑那種很平的球，變成我的腳步常常跟不上，常常反射動作就回個長球，就不是那麼主動。</p><p>剛剛看了這支 <a href="https://www.youtube.com/watch?v=6KwljrwRJNs" target="_blank" rel="noopener">影片</a>，才知道原來這種技術叫做推挑，有把對方快速推向後場的挑球，這是我之前都沒有特別去練的，我在和別人切挑時，我常常是把球挑得又高又深，主要是怕把球打出界，所以我前場的挑球很多都是往上發力。</p><p>也許下次切挑時，我可以試著推挑。還有就是試著推挑，不要讓對手在半場攔截。</p><p>在單打時也試著打看看，但是要避免被對手半路攔截，反而導致自己來不及回防。</p><h2 id="二打一"><a href="#二打一" class="headerlink" title="二打一"></a>二打一</h2><p>今天的最後，有一個很厲害的大哥向我們提出二打一的想法，因為我和學長搭擋都打輸他和路人的隨意搭擋，所以他就提出這個想法，我們因為打得真的也沒有他好，當然就抱著挑戰的心情去打，一開始比分還蠻接近的，就是 1 分拉鋸，可是後來只要我在後場，就會比較難得分，我發現是因為我的切球還是不由自主地想要太貼網，變成二打一時這種只需要拉吊的比賽失誤還是一樣多。</p><p>我自己的問題是，我的長球應該是有一點水準，可是變成我後場的行為都是長球佔了 5 成，殺球 4 成，切球只有 1 成，切球的配球平常就少，真的到要打的時候都沒有那個水準。還是要有意識地減少自己的長球。</p>]]></content>
      
      
      <categories>
          
          <category> 羽球日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>台州 HIS 醫保佈建問題整理</title>
      <link href="/2019/01/26/%E5%8F%B0%E5%B7%9E-HIS-%E9%86%AB%E4%BF%9D%E4%BD%88%E5%BB%BA%E5%95%8F%E9%A1%8C%E6%95%B4%E7%90%86/"/>
      <url>/2019/01/26/%E5%8F%B0%E5%B7%9E-HIS-%E9%86%AB%E4%BF%9D%E4%BD%88%E5%BB%BA%E5%95%8F%E9%A1%8C%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="請輸入醫保密碼" />    <label for="pass">請輸入醫保密碼</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工作筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 醫保 </tag>
            
            <tag> 電信 </tag>
            
            <tag> 江林 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>醫保開發注意事項</title>
      <link href="/2019/01/26/%E9%86%AB%E4%BF%9D%E9%96%8B%E7%99%BC%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/"/>
      <url>/2019/01/26/%E9%86%AB%E4%BF%9D%E9%96%8B%E7%99%BC%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="請輸入醫保密碼" />    <label for="pass">請輸入醫保密碼</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/MLUJJqIk4CchAcD+M3E6ExO4Q49SujB2rkTatCKDr6LCteOI5VvouzBz0qCBkoknGQUDskX7t7h6++9F63ZIHgmUNE4EEd8k6nwnJxlwekedx/wDF5f8URvG3VHJZ25NO9n18YcVs9WxCpOTvdv5HJyYo5yXKIMZMMXFBLbmge7qQMH9fjUyCkF10/If3wNeBIHUEd76q26nYNAUyySqh2oGEa140AYZ1Y+E+KdHwiBUJdU6yPA/ji1lc75RXbNdP/asXM4ZkxDAjEuqnW+4eZ/D77hE75g+gOFIKkZ8qEdZ2fIHxNZ7fBWwYjcky6MyXmMScHCnnh1RPd6I6rL8Ti0pTk5cwbN6NvLn4APL0+PjiNVyepbM3IeTVVSgGXC2un4E0jg/HLH1BaHKFHhv9REl+v8xjJHuYzaFGazyYfDnCEO2ET6Yj6+Seb6RY/YRu3n08XKm2clbhfThykJ1d6zLsVw7YozzEVmcSEAxsXbRmsHlgntrmKq/ypGI3xRtis5pR+NrmJjKQxYpsk5vi9QV5VyewbUC99tx1oLAJP5KOLNx+Gf0lDI2/ai7DW48SltoAlJuHm/3IlNGUYnYLr3ThLqRXGClwIMuecfpdcsv/bjEyMa5rQ0HOp98CluQMqQTNbfDQv3qm0nI5C6P90UEpECEwTWnw1QYPSEXR4IFaIbVsnnj3nfFucdRttucAQo6HnbgEDW3vrhuerfnZ3PSqRT/D5Ohf3jxanEnt0o8lFfRJKLy3+Pc9Ucmz/jgWedBX+fmgvYYN/NjZzFhL9ItR5NioMjTXh+bJTGwfaQv6Bc67RdPkU7qi/Nzwf4N/XKvY5YcySe9mi+yfxq3qenM256Cuu+zCgVlAEuEQZIYfDWfHM5mUN0xeTybI1CS7VnLlQyoxfcFjUCVeGH0qFt3zX8vIj1Y2jgOqBSFYyyilZKSlU1EwZB98fsEk7hzH6yJNObJFsvV2tKdrIRffaB1lKwiCGrUXPR3Vepdf2qXfW+zqnwZ+fcilW+GWxS6Csi5xVvV/UXRSwYyxxzI1zSC1gWVo1UqAqjIhZMukrzmGkRNE524HH9f3OeodftLFr7a0y88FFMGcZwVPhHTrOOGkPO27rxmNuQd4AMm9ABALKXkzuwXMpWp5EMWOALyvlrvHpOi9JIL8eT2vW47fyjTlLnHtwDWlv64Lt1zRrM33O5ts2ZCE5NmeMF0dgg6wqr0XVvjWvK2Q+oz3Hk5mZFB1HNetpw8G6odOrriRhhn5QTNtlsj5kqfgsNqeJ+GkNHLYufy/grQrhDZdzf4rU6zkLhvF7MWjlyY4PvXlvVqvs8untQO2qBIIGEo/LNyBJpHBKVYK+7HoKFyTbZOchLmkOnFG28Hf+PKWVeeY8KgNVXYXB89qA+2Y83cuOYHuC+mSngP17HAqDXJvOwXQtdlHa/qrsLWQNZJtTuUf6ujdOerQZMG757CoWSotFA7j2U3esy/ThUYTHChSadgjTSKePCS1tqkQMsSFzZqabMBQNBj51MwZ5PvbGDyL35l29UwH9ukYQ0kt2f/xJeu309TWBGO5tTUhrFSa7Wgv4BFPt6fZUWuMqjLfwLNovrVnoYwUiYYkGghV9IrUyOk2ZGgER6LGGhR2/TPjFtx0Fqj7E3NApo1TvP06YWyHhD5k/PUXC79v1+ely/gcO51ni5NbsidZDtsX1VfUXAW79CoMSJRRVXJ3rBxQiVU1dSy5tVRMTJBj/+h+HPPVjwmzRTnouQH+fESIbm4wUZkWJRO/p36FQta43KLCPJ2mN4Ogkv5Jc+i7dgOvjLY2xQ89GdvoglJiws0MnzJeiDPKUnE+9C+QE80UG/rSye1Ty0rGbQT794Mdd2dUDDtIU/hRqr5KNY7gUxFvTRyqaWMj4LblYck1cJKZO4pWexXb/Uy7sc4Sgw5gXFHZBH6i/vPn/CRhftjiiqNGu5IfW466nAHq0HXNl02hDYn8NePYsZZSUoz+YYW+zk5zeQPJ4yHwoaisMF85yScVHocNgICRH0tcb4EDurBp5fHbCRdGSHxb9TIRkZvx8JRCVb3aSVeIVxexzqmsClu4RVag0WHlMf6hfBH9tbWehTcSTR+e6rfP65JONSr3oKQPz19kxVAYvuQpuZjWANQK2jQun/3xU/teD5F+E5GjZHRvy3wo1fWNNl1apXQFa86U4cqy2xjxfpMRODDVStJpqf+Qr3XsFj7ia2bEijaLVfaaqfYk52EHATMGUo8e6kS8IIpEzlkNMahZO1ik1/f2yaSD60Ui7AIHKtkCtfQs7EHliYbXLdQ7nxuMA1Xd56NOfyoMeCLqTIeL1wjE4bo8KItCaYDjbxWpx7uePEhshTJNMnEViebRo58JuOVnu5HHyQgLGcuKtN7o+wF4ee1J4fG+pdN9ERoNBaFSNEsRcTnhe6tV+axA1f9s0qGnIEdleX/3L4pCLRZkil7rhP/lpatzBxzfSh/3bHDr5MS5IzITM+Q60buKXKDz7HM4wzwKr+nQI8ee7h3Mo55wdKFse/fdZdYUDTHk1HmpWw/lvVb2Zo1j1Jl4QTF+zkn866/9kik+qcnAGlgXetS3E5Xt40mTBHLkE3jIIgZE/cBxlqps47c9KtuLVHfiCSg0vCA01NZmDwQU0DI/PFA5REPYvKzzix1h2hcw7SgFnspA6RySGVyPeV8SSgX37X2lT0t0V/vSIIu9eHB9CGBWfRtLjASznDcoyu2UW0bezEJ4YCPXvv+tfFR1ZJ2KKLyOEc1cLh09rfeuzf7pNlIjFWt2Q97Pi+8ipwm8ugJdFYauM3AEmAqUcSWi9AdCS/TgHuOhdkfwcmtJcA68k3ex0T2ilL9KS5c9/KFPoEnuigB+wMEyB2c2VhBmJmFdRMNbWwY132FCPcf1NF0HlDK8+qdnWc05fgn4ghw1d1LWGIeicj1at+1QLZexTdlYHioNnkUnyVcXh7aLOZL+QrR7T1+gkhzv/oRTNuIgAZuMtg9rEdxsAdFp490A8+59moID+9GW4tpy9svKTBjU3hKLxekZ+vBHgFWxlJSNqTHnvn4uR8L6DYDGlI6lFWzhjiflcA2sbCPZpsi8h2oo7A+zRHsaZy2RT9uBYQ20QfQFxeaXmHJEIbikU3ZztOflrS/IhEOAXw6egEqHSRnYofXBz8gHHGnfUDGBHkV+BVxcWdeUSFWMLRMNg5JbV4rwNfm7NCwlBxGAYdflu3dADTJMu2+M3E4/wv6KSp26X+aOOt1AR+eF/l1/WXFa1qfoM0QknKMvUScMYD03opTtiz+030+xrcBCRehPdNs7pa7zkmKKHR01t97Xjg/fS4sne1YqrnKCtjNHw/+ZEpwIEhe/JUKZQXRTl20qqagoIn++L6aSpFZu8kmifO7iIoU6B0SCkqrBm6JBCnlJWDZEyfA0K5hqdNqcAMykX045kDLZ4gB+JasVFo3W2UP2qzHGRDvPwHHkOmxWzmT+ITYE8bp41g0AdHTvLg+Faf9vwZ7YiK0n1VlD5QhsYwtVzgMznfG0UDGKFSnfmLz2pHipkJAFSgA9nfRdqu0Dvk+ljK1KWL1/2ed2mY27wtmHYozB5sHe48Fqqw8BjG0Z0NsWRrrv9hhp7QDUr01dppYGNeoOdKh9u+CKMlvRMt5Sra7oHQ46PwfHjXhygFPWXjgwzp8qOctSjpYQ4lnnfxSuNTrq0C2HMXzl68s7uABrgiW1RY+p9TyY5IzZXQkNcTt0UdVMVUX+YIB2YJ7z0kqgWhQVVVkt67ZsgFjcfL4ccxL9PwFlfO7n8AOn2NrZhjp9wbwdALWaR39DLZgsJ4Ept/6qc/RSmXNaquiOMewNna/bYNzmLd4/7bY0lvrdX4Ym3PpGIsiSIEv6ulHfUmGIrB8gE62tDX7o7LMJO7omxt0UZ+eqhQDsbo01716QMEakunDP8f3wkaJvD1h2PTOx5LIxgKoII4tAVXunufgSvUn1E2SkQHrBn2nfvnn4KHbISnwrshDAjrnLjLci0/rWGtY1nXKELMSrxgJOim42LswpzxYv0KE31O6TtdXk83DMssI6iPZpF60RxTTHIAodMv0PZnFYFG6CNHxcp5JETOxt44xvbEsEgKXDRMxnCCQT0JA9f6H3XHgDV2x018Nl5dcnulzHtETN8IuZ2HlAH5X4BlmZQ4pDsShz3RtDelgGvkieSxRgZNjdjjupQUrhs6X0tqvhP//YponV82HtSSoXtTZMCsr5eZI0P4DMhYFO585gYpkJoc5bnO/jqQ32uHhh3sVHbcU/VWNczwnD/T01dw6t49ojTP47EEHbBMj6Nlqpto8iFx7FL7QL7v/TfV54SjfDKwanQytEQl3PgY221BXf8ANqeVEekgcfBCZTdSM4fO9oypjySAHqXD6ddW9L1xLErhATQWPUmsP+ub1+5+b8097ehxDfh4olTiX1cdWt+tXeUNKrSNpec2IgvgZSUxYD1tS47eLqSzWBrXLhxfMIiL0IcXUAFz0QA0uWeFlhEQ5AH9kQxBWYd3ive4cSUxoFUgnksKnkYWK/J56M/xdLudzopyY2qt0VucLHXsqMAm/YkGh/n+f+sZQGbp2zQUZdk45T8u/QVZfXpUFxnAq45odtxQxqoTSRdDDEJCRA/vuigArUDZ40WbiWWJXjB2qEeM3xuuGLCqTsJpKLIPaYm8YXQPgeXg5RblGg/3vZbWNybSgr8CsEM6KzkIdjz5zQcGA3qhQdpE3DM7euK5ZUWg==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工作筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 醫保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018/12/29 台北體育局</title>
      <link href="/2018/12/29/2018-12-29-%E5%8F%B0%E5%8C%97%E9%AB%94%E8%82%B2%E5%B1%80/"/>
      <url>/2018/12/29/2018-12-29-%E5%8F%B0%E5%8C%97%E9%AB%94%E8%82%B2%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>用球：勝利牌比賽球<br>程度：中<br>人均：10 人 / 2 面 / 兩小時<br>場地：木地板、挑高</p><a id="more"></a><hr><p>今天整體打的不是很好，起初感覺是手感不好、腳步會有點怕滑，但是打到後面，發現是手腕甩不出去，肩膀也有點抬不起來。</p><h2 id="接發球"><a href="#接發球" class="headerlink" title="接發球"></a>接發球</h2><p>目前球路太單調，主要是平推到對方後場的反手拍上，但其實沒有什麼威脅性。但基本上不會在第一球就讓我方直接掛掉。</p><p>如果我選擇放小球，對方雖然會直接挑高，但是因為我在前場，大概有 90% 截不到，但是感覺對方都覺得我放的球很好挑…，不知道是不是球路太單調。</p><h2 id="發球"><a href="#發球" class="headerlink" title="發球"></a>發球</h2><p>最近沒有什麼機會練發球，由於自己的發球還是習慣在腰部附近或以下，所以還是有 3 到 4 球直接掛網，至於發後場，還是有點威脅性，沒有被對方直接殺，但是對方回的平高球，可能反而會讓隊友難處理。</p><h2 id="後場攻擊"><a href="#後場攻擊" class="headerlink" title="後場攻擊"></a>後場攻擊</h2><p>今天大多還是切球和殺球的切換，沒有機會就切球，切到對方挑球失誤再殺。</p><p>殺球還是要把往下的角度打出來，有幾球繞頭或者左手位的球，殺球會殺太高，切球在切對角時會切不過，以後在暖身時要多配一些切對角的練習。</p><h2 id="暖身"><a href="#暖身" class="headerlink" title="暖身"></a>暖身</h2><p>今天整體打不好，感覺是自己的狀態不知道怎麼調整，像是禮拜三我認為自己的手感就不錯，一開始是跟小馬推平球，而且推得很快，小馬的反拍平球很有威脅性；今天一開始是和一個大哥推求，互相失誤有點多，而且平球過網時質量不好，有感覺今天球有點打打不出去。</p><p>不知道是不是因為場地挑高比較高的關係，今天長球都有點出不去，有刻意用力，沒有在中山國小內拉長球輕鬆，所以到後面不是腳沒力，是肩膀先沒力。</p><h2 id="和隊友的配合"><a href="#和隊友的配合" class="headerlink" title="和隊友的配合"></a>和隊友的配合</h2><p>今天還是跟一位年輕、微胖的男生一組時比較有印象，感覺不知道要怎麼和他配合，到剛剛開始打日記時才想到，應該是要對方起高球讓他去殺球，因為他的特色就是殺球很有威力，但是我自己太長垃長球，不會去硬切，現在才想到有點可惜。</p><p>有一點，不知道如果我在後場時，我應該怎麼樣才能和隊友轉為，是長球還是切球？</p><hr><p>整體上，我還是打法太單調，球速太慢，在低程度的場次都可以打得很從容，可以打點，可是球速一快，變得沒有時間給我反應，我就可能會增加失誤，BTW，今天很多球都是 lucky ball，都是觸網過去的，我打球還是要再小心一點，要把過往的高度再拉高一點。</p>]]></content>
      
      
      <categories>
          
          <category> 羽球日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>想法對了，錢就進來了</title>
      <link href="/2018/12/28/%E6%83%B3%E6%B3%95%E5%B0%8D%E4%BA%86%EF%BC%8C%E9%8C%A2%E5%B0%B1%E9%80%B2%E4%BE%86%E4%BA%86/"/>
      <url>/2018/12/28/%E6%83%B3%E6%B3%95%E5%B0%8D%E4%BA%86%EF%BC%8C%E9%8C%A2%E5%B0%B1%E9%80%B2%E4%BE%86%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="讀書筆記的密碼" />    <label for="pass">讀書筆記的密碼</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>存股</title>
      <link href="/2018/12/23/%E6%8A%95%E8%B3%87-%E5%AD%98%E8%82%A1/"/>
      <url>/2018/12/23/%E6%8A%95%E8%B3%87-%E5%AD%98%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="讀書筆記而已，想要看的人再跟我要密碼" />    <label for="pass">讀書筆記而已，想要看的人再跟我要密碼</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 讀書筆記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018/12/22 南港運動中心</title>
      <link href="/2018/12/22/2018-12-22-%E5%8D%97%E6%B8%AF%E9%81%8B%E5%8B%95%E4%B8%AD%E5%BF%83/"/>
      <url>/2018/12/22/2018-12-22-%E5%8D%97%E6%B8%AF%E9%81%8B%E5%8B%95%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>用球：YONEX(YY)羽球AS-30*國際比賽級羽球<br>程度：中<br>人均：12 人 / 2 面 / 兩小時</p><a id="more"></a><hr><p>今天打球的手感不錯，不過也是輸多勝少，而且前面四、五場其實打得沒有很好，感覺隊友都覺得我很雷。說明今天幾點打球不同的地方：</p><h2 id="接發球：站位靠前、拍頭立直"><a href="#接發球：站位靠前、拍頭立直" class="headerlink" title="接發球：站位靠前、拍頭立直"></a>接發球：站位靠前、拍頭立直</h2><p>今天打球站位有稍微靠前，但距離發球線還有約 15~20 公分，有幾球接發球是有打到對方後排無法接的狀況，主要也是因為今天都有意識把<code>拍頭立直</code>。</p><p>但是目前對於發球是否有進發球線還是很少判斷沒進，幾乎都會去打，下次可以讓球再飛一下，反正我也很多球都會起高，晚點打、早點打都會起高，不如鍛鍊一下判斷是否進球。</p><p>發現自己站在右方接對方發小球時，我還是習慣性地往對方的左後場推，因為對我來說就是直直的往前推，也是對方的反手拍，但是好像現在的對手都不是很怕這種球，又或者說對方回擊的球，我都無法再給壓迫性，像是平推到反方向的後場 -&gt; 讓對手後場左右跑動；或者就直接在網前下壓，讓對方起高或直接死球，主要還是我<code>前場放球或對於讓對方起高球都沒有意識</code>。</p><h2 id="後場攻擊：切、殺球配球"><a href="#後場攻擊：切、殺球配球" class="headerlink" title="後場攻擊：切、殺球配球"></a>後場攻擊：切、殺球配球</h2><p>今天感覺是比較少殺球後讓自己直接被反殺的球（之前會殺太高），或者在左後場的殺球，讓自己跑不到右後場接對方回擊的平球（還是有幾球啦！），主是要因為知道自己某些球肯定殺不死，主要就是殺中線的位置，或者殺近身球，主要是讓對方比較有失誤的位置。此外，就是在配合一點切球，今天後來幾場就有奏效，但是有可能是因為對方也是跑累了，所以切球質量不高也不會被搶網。<code>切球如果質量還是不高，至少要切斜對角，讓球過網後比較貼網</code>。</p><p>今天有幾球原本是對於右後場的球比較有把握，就是球飛到在右後場時，我應該還是可以把球回到對方後場，但是有三、四球好像就是被對方殺回來，有看到一位厲害的人是可以打出我想要的球，可以<code>從右後場回一個又快又高的球到對方中線後場的位置，讓對方正手拍位置的人來不及退</code>，結果兩個人都沒有去接球的意識。</p><p>對於自己殺球不是很有信心，一定要把切球練好，要懂得<code>搭配切、殺球</code>，透過切球找機會殺球。</p><h2 id="高遠球：看隊友特性"><a href="#高遠球：看隊友特性" class="headerlink" title="高遠球：看隊友特性"></a>高遠球：看隊友特性</h2><p>今天有不少球是回高遠球致勝，不確定是不是對方失誤才得分，可是我在打球時，好像會不由自主打一些比較保險的球，當然會看對方的站位決定把高遠球回到什麼地方，今天使用的球飛的比較穩定，所以我在和對方拉球時很少是很被動的，可能我回的球不一定比較平，但是都夠遠、偏高，雖然對方不會覺得是個難以處理的球，但是今天對方有不少是自己發生非壓迫失誤，如切球沒有過。</p><p>感覺還是要看隊友的特性，決定要不要多配一點保險的球，還是要不斷攻擊，即使失誤很多，因為有的隊友是對於接殺球不是很有把握，又或者有些球友是會躲殺球的，就要刻意減少起高球。</p><h2 id="接殺球變線"><a href="#接殺球變線" class="headerlink" title="接殺球變線"></a>接殺球變線</h2><p>今天到後面幾場，不知道是對手疲憊還是對手不一樣的關係，比較多是可以打出變線的球，<code>變線的小球好像比較容易破壞對方的戰術</code>，像是某方殺球，被擋回去時，如果擋回去都是直直地擋回去，即使把力量都卸掉可以很貼網的過去，可是都不會給對方造成失誤的感覺，但是如果是變線平推到對方的反方向，或者放小球到殺球的另外一個方向，對方的前場也會比較不知道怎麼反應。</p><h2 id="反手拍殺球：減少反手拍高遠球"><a href="#反手拍殺球：減少反手拍高遠球" class="headerlink" title="反手拍殺球：減少反手拍高遠球"></a>反手拍殺球：減少反手拍高遠球</h2><p>今天反手拍有比較少是打出高遠球，發現即使我回的是反手平球，對方第一反應也是擋回來而已，不一定會被壓著打，如果打出一個不高不遠的球還比較容易被殺。當然有幾球是想要打出反手殺球，結果只是打出反手平球，還算勉勉強強。<code>未來可以多配一點反手殺球，好像比反手高遠球風險小一點</code></p>]]></content>
      
      
      <categories>
          
          <category> 羽球日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>句子過長，使用刪節號顯示</title>
      <link href="/2018/12/20/%E5%8F%A5%E5%AD%90%E9%81%8E%E9%95%B7%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%88%AA%E7%AF%80%E8%99%9F%E9%A1%AF%E7%A4%BA/"/>
      <url>/2018/12/20/%E5%8F%A5%E5%AD%90%E9%81%8E%E9%95%B7%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%88%AA%E7%AF%80%E8%99%9F%E9%A1%AF%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="單行"><a href="#單行" class="headerlink" title="單行"></a>單行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: 100px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><a id="more"></a><p>主要就是 <code>text-overflow: ellipsis;</code>，其他只是要營造出句子過長的情況。</p><h2 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure><p>但好像並不是所有瀏覽器都適用，所以如果 CSS 不能解決，也可以用 JS 去做計算做到一樣的效果。</p><hr><p><a href="https://jsbin.com/vohiyaw/6/edit?html,css,output" target="_blank" rel="noopener">Demo</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hk.saowen.com/a/0dce2e6ee51ba0a2cfcfa3cff857ae7682b20cc61276e066a7e63919f728f401" target="_blank" rel="noopener">CSS顯示指定行數文本、限制文本最大行數</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> TBD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angular 7 upgrade</title>
      <link href="/2018/12/16/angular-7-upgrade/"/>
      <url>/2018/12/16/angular-7-upgrade/</url>
      
        <content type="html"><![CDATA[<p>angular 7 在今年 10 月就已經可以升級摟！不過當然我才不會傻傻的那時候就更新我的專案啦～</p><a id="more"></a><hr><h2 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h2><p><a href="https://www.google.com.tw/search?q=angular+upgrade&amp;oq=angular+upgrade&amp;aqs=chrome..69i57j69i60j0l4.13893j0j4&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">Angular Upgrade Guide</a></p><p>這個更新教學網站一樣有效。</p><p>如果你跟我一樣在 <code>ng update @angular/cli @angular/core</code> 發現專案內的 angular 套件根本沒動，請改成以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng update @angular/cli @angular/core --force</span><br></pre></td></tr></table></figure><hr><h2 id="這次又改了什麼？"><a href="#這次又改了什麼？" class="headerlink" title="這次又改了什麼？"></a>這次又改了什麼？</h2><p><a href="https://github.com/angular/angular/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Angular Change Log</a></p><p><a href="https://medium.freecodecamp.org/whats-new-in-angular-7-0-and-how-to-upgrade-f2ed22a79e28" target="_blank" rel="noopener">外國人整理的重點</a></p><p>對我來說，我是使用 Primeng 套件的人，沒有使用 Angular Material，但還是有受到一些影響，因為 Primeng 也升級到 Angular 7 了，同時也在某些套件使用到 Virtual Scrolling，所以我剛升上去有遇到一些問題。</p><p>不過只要按照錯誤指令就可以發現問題根源，就是要補安裝 @angular/cdk 這個套件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @angular/cdk</span><br></pre></td></tr></table></figure><p>–angular 好像越來越肥了呢，又加了一個 library–</p>]]></content>
      
      
      <categories>
          
          <category> angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018/12/15 太平國小</title>
      <link href="/2018/12/16/2018-12-15-%E5%A4%AA%E5%B9%B3%E5%9C%8B%E5%B0%8F/"/>
      <url>/2018/12/16/2018-12-15-%E5%A4%AA%E5%B9%B3%E5%9C%8B%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>覺得最近羽球好像都沒有進步，雖然已經比大學之前好很多了，可是最近好像就這樣了，每次打完都知道自己的缺點，可是一上球場就忘光光，如果像這樣一點點記下自己要改進的地方，應該會有進步吧？</p><a id="more"></a><hr><p>今天熱身時和禮拜三感覺有點不一樣，好像手腕和小臂要很用力，才能打出又平又快的球，不知道是不是因為球的關係，但感覺更多是手腕的問題，反拍都可以抓到擊球點，打出去的球比較平也比較快，但是正手拍反而出去的球反而比較慢，感覺是因為<code>正手出拍的位置都感覺被擠到，不像反手拍有伸出手臂的感覺，還有就是擊球點都比較後面</code>。</p><p>剛剛原本想要上網找這一天用的球，可是都找不到，以後應該會看找品牌名，然後記錄每種球打起來的感覺。</p><p>今天搭的都是男雙，我自己是輸多勝少，應該只有贏一場吧，而且是險勝。</p><h2 id="發球"><a href="#發球" class="headerlink" title="發球"></a>發球</h2><p>自己最近發球有點不穩，之前最多是沒有進發球線，但是都很接近，我自己覺得還算可以接受範圍，可是這一天有一兩次掛網，掛網的原因比較有可能是因為求感覺比較重，自己放球的位置應該要再高一點，有時候打到累了，放球點就會很低，容易掛網。</p><p><code>可能要找出自己適合的放球點，還有用身體評估是不是習慣的放球點。</code></p><h2 id="接發球"><a href="#接發球" class="headerlink" title="接發球"></a>接發球</h2><p>最近接發球位好像又慢慢地往後站了，感覺就是第一球就是挑球的樣子，要放要推好像都會慢個半拍。雖然推腰帶前後場的長度都有到位，可是還是太常出界。</p><p>另外一點，就是我的接發球通常無法給對方致命一擊，即使推到對方反拍的位置，對方起個平高之後，我方也沒有方法再殺個球回去，因為我只要不是放小球，<code>通常會習慣性地往後退一步。</code>沒有去抓網前的習慣。</p><p>有幾次是接發球讓對方無法回擊或回擊掛網，位置都是穿越對方前排站位的頭頂，然後直接對方打到後排站位的拍子上或身前，看起來這方式的回球也可以成為攻擊的手段。但是要小心習慣繞頭平球的人。</p><h2 id="後場的攻擊"><a href="#後場的攻擊" class="headerlink" title="後場的攻擊"></a>後場的攻擊</h2><p>這一天好像沒有什麼球是因為殺球，然後被對方回抽反方向跑不到而掉分的，應該是有把殺不下去而硬殺的球給減少，雖然後場的攻擊還是沒有什麼威脅力，不過要先減少掉分和給隊友造成威脅的失誤。</p><p>切球還是要多練習，現在沒有特別快，角度也沒有特別切，感覺很像在練球。</p><h2 id="小球"><a href="#小球" class="headerlink" title="小球"></a>小球</h2><p>小球還是用太少，接發球時因為站太後面，所以想要放的時候都太被動了，雖然也會有放小球的時候，可是都是放對方反拍的位置，不會擠到對方的站位或者是離對方太遠的位置，所以也都是讓對方好挑球的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 羽球日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自控力</title>
      <link href="/2018/12/13/%E8%87%AA%E6%8E%A7%E5%8A%9B/"/>
      <url>/2018/12/13/%E8%87%AA%E6%8E%A7%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>當初是為了在維信讀書上找一些可以增加生產裡的書來看，看到書名覺得應該是一本可以解決我一些疑問的書，像是我現在就有早上賴床、工作時經常拿起手機不知道幹嘛、忘記吃飯的壞習慣，這本書可能不能馬上解決我的這些壞習慣，可是可以讓我知道為什麼我會這樣做。</p><a id="more"></a><hr><h2 id="自控力，就是意志力"><a href="#自控力，就是意志力" class="headerlink" title="自控力，就是意志力"></a>自控力，就是意志力</h2><p>我們會有許多慾望，慾望受許多誘惑影響，一般人認為我們經常在沒有注意的情況下做出衝動、沒有辦法控制自己的行為，但其實不然，只是大腦做決定做得太快，我們自認為沒有做任何決定，像是決定一天要吃什麼，不只是早、午、晚餐而已，我們在篩選的時候，就下了不知道幾個決定。</p><p>需要意志力的行為可以分為三種：<br>我要做：我認為我需要去做的，像是工作或唸書<br>我不要：我不要熬夜、我不要吃甜食等<br>我想要：我想要環遊世界、我想要買房子</p><p>其中，我要做和我想要，差別是一個是你應該去做的，一個是你不需要也可以活下去，但是你仍想要去做。</p><hr><h2 id="增加自控力的方式"><a href="#增加自控力的方式" class="headerlink" title="增加自控力的方式"></a>增加自控力的方式</h2><h3 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h3><p>最簡單的方式就是透過冥想，研究指出，讓自己的心靈和呼吸慢下來，有助於提供注意力，增加注意力之後，可以增加自己對於所有事情的專注力，你就不會不自覺地做出衝動的決定。</p><p>冥想最基本的動作就是盤腿、手放在膝蓋上，專注於呼吸，其他都不要想。</p><p>如果一開始很痛苦，還是一直想事情，也不要放棄。</p><h3 id="不斷消耗自己的自控力"><a href="#不斷消耗自己的自控力" class="headerlink" title="不斷消耗自己的自控力"></a>不斷消耗自己的自控力</h3><p>自控力也適用於用進廢退說，只要一直去使用它就會不斷進步，可是像文中提到，可以用肌肉訓練比喻自控力訓練，肌肉如果一直在高強度的訓練下也會受傷，自控力也是一樣，自控力受傷就是你反而會容易屈服於誘惑，後面會提到為什麼。所以訓練自控力也要適可而止，不要一直給自己壓力。</p><h3 id="公開自己的意志力挑戰"><a href="#公開自己的意志力挑戰" class="headerlink" title="公開自己的意志力挑戰"></a>公開自己的意志力挑戰</h3><p>如果你認為別人會支持你的，並且觀察或監督你的行為，公開自己的意志力挑戰，會有效幫助你維持你的挑戰，像是找朋友一起挑戰也是一種方式。但是有另外一篇研究，有些人會不斷地曬出自己有努力地一面，可是實際上都沒有像是表面那樣那麼努力，<code>他只是想要得到大家的讚賞，然後就認為自己很努力的</code>，這要小心。</p><hr><h2 id="削弱自控力的來源"><a href="#削弱自控力的來源" class="headerlink" title="削弱自控力的來源"></a>削弱自控力的來源</h2><h3 id="道德許可-我夠好了"><a href="#道德許可-我夠好了" class="headerlink" title="道德許可 - 我夠好了"></a>道德許可 - 我夠好了</h3><p>道德許可的意思就是，我們會認為自己已經夠好了，就允許自己犯一點過錯，或者覺得自己善事已經做的夠多了，不必再做了，就像是許多公眾人物做錯事後的反應一樣，他們平常已經在鎂光燈下維持了這麼久的好形象，犯一點小錯應該不為過吧？</p><ul><li>我已經唸了這麼久的書，我可以玩一下了吧？</li><li>我今天捐過錢了，我應該可以不簽老奶奶過馬路吧？</li><li>我已經跑了 800 公尺，我可以吃一塊蛋糕吧？</li></ul><p>上面三個問題的問法，是不是都在允許自己做後面的事情，後面這些事情，是不是當初自己就在避免做的事情？</p><h3 id="光環效應-有些美德會讓附帶的罪惡變成可以忍受的"><a href="#光環效應-有些美德會讓附帶的罪惡變成可以忍受的" class="headerlink" title="光環效應 - 有些美德會讓附帶的罪惡變成可以忍受的"></a>光環效應 - 有些美德會讓附帶的罪惡變成可以忍受的</h3><p>這個伎倆常常被用在廣告上，看起來可能會很像是一種噱頭，可是實際去想，可能比較像是幹話。</p><p>像是一個高熱量的產品，他標榜是零脂肪，可是小學生都知道熱量來源是糖類、蛋白質、脂質，這個產品可能是高糖份的，想要減肥的人如果不看熱量，還以為吃這個在減肥呢！</p><p>又像是每搭一次商務艙，就幫你多種一棵樹，可是種一棵樹根本無法負擔搭乘一次商務艙造成的環境傷害，還以為自己在做好事。</p><h3 id="努力，那又如何？"><a href="#努力，那又如何？" class="headerlink" title="努力，那又如何？"></a>努力，那又如何？</h3><p>你是否有過這種想法？我都已經這麼爛了，又何必繼續努力？通常也是這種想法再讓你放棄繼續努力。</p><p><code>堕落的行为并不是第一次的放弃，而是第一次放弃后产生的羞耻感、罪恶感、失控感和绝望感。</code> 這是書裡面我很喜歡的一句話。</p><h3 id="出售未來-我明天就會做啦！"><a href="#出售未來-我明天就會做啦！" class="headerlink" title="出售未來 - 我明天就會做啦！"></a>出售未來 - 我明天就會做啦！</h3><p>別想著自己今天不做，明天會更想做，也許會，但也只是提高 1% 的可能，因為你還有後天。</p><p>想要把事情做完，就跟台中人學習，我們把每一天都當最後一天在過。</p><h3 id="當你面對壓力時，你面前的所有誘惑都會更有誘惑力。"><a href="#當你面對壓力時，你面前的所有誘惑都會更有誘惑力。" class="headerlink" title="當你面對壓力時，你面前的所有誘惑都會更有誘惑力。"></a>當你面對壓力時，你面前的所有誘惑都會更有誘惑力。</h3><p>不知道用甚麼學術理論說明，可是真實情況就是這樣，當你面臨壓力或者挫敗，你就會尋找解脫，解脫就是做你想要做的事情：耍廢、購物、睡覺</p><hr><h2 id="多巴胺-快樂的假象"><a href="#多巴胺-快樂的假象" class="headerlink" title="多巴胺 - 快樂的假象"></a>多巴胺 - 快樂的假象</h2><p>多巴胺是給予我們渴望、想要的感覺，廣告、美食都是刺激我們產生多巴胺，可是多巴胺並不會讓我們感到快樂或滿足。大腦的運作也是如此，他靠給予我們快樂的承諾，讓我們的身體去行動。</p><p>獎勵系統誇大，可能會讓人勇於冒險，像是搶奪 1 億元獎金，如果獎勵一直沒有來，會讓自己更焦慮，讓人更上癮。</p><p>我們經常會把渴望誤認為快樂，就像我們原本想要買東西，再去大賣場的路上都很開心，可是一到賣場，購物的興致就沒了，有時候只是渴望，我們去達成可能是為了得到快樂，但有可能只是解除我們的焦慮。</p><h2 id="環境-孟母三遷"><a href="#環境-孟母三遷" class="headerlink" title="環境 - 孟母三遷"></a>環境 - 孟母三遷</h2><p>社會觀感也是影響自控力的一環，像是對於環保的貢獻，雖然自己都會說這樣環保、對後代子孫有利、省錢，可是真的讓你做環保的原因主要是因為大家都在做，而且大家認為這樣做是對的。</p><p>另外，社會觀感也包含隱藏的社會觀感，如果一開始以為同學都會作弊，自己也會做，可是實際上如果沒有，自己也不會作弊了。</p><h2 id="諷刺性反彈-你想的都會成真，壞的才會"><a href="#諷刺性反彈-你想的都會成真，壞的才會" class="headerlink" title="諷刺性反彈 - 你想的都會成真，壞的才會"></a>諷刺性反彈 - 你想的都會成真，壞的才會</h2><p>白熊理論 - 就叫你不要想白熊，你還一直想。</p><p>如果你一直想著不要幹嘛，也會一直想到，可是可能會在意志力薄弱時就去做了，最好的辦法是接受你自己想做，但是不要想成太嚴重的事情，這樣你就不會一直去想他，可以轉移注意力或者就是接受他。</p><blockquote><p>2010年的一项调查发现，和非节食者比起来，节食者更可能压抑对食物的想法。另外，正如韦格纳的白熊实验预示的，压抑对食物的想法的节食者，面对食物时控制力最差。她们感受到的对食物的渴望更强烈，因此比不控制想法的人更容易过度进食。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 讀書筆記 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tudi 台州市醫保文件</title>
      <link href="/2018/12/13/Tudi-%E9%86%AB%E4%BF%9D%E6%96%87%E4%BB%B6/"/>
      <url>/2018/12/13/Tudi-%E9%86%AB%E4%BF%9D%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="請輸入醫保密碼" />    <label for="pass">請輸入醫保密碼</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工作筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 醫保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找到第 n 個符號 - indexOf 延伸應用</title>
      <link href="/2018/10/20/%E6%89%BE%E5%88%B0%E7%AC%ACn%E5%80%8B%E7%AC%A6%E8%99%9F-indexOf-%E5%BB%B6%E4%BC%B8%E6%87%89%E7%94%A8/"/>
      <url>/2018/10/20/%E6%89%BE%E5%88%B0%E7%AC%ACn%E5%80%8B%E7%AC%A6%E8%99%9F-indexOf-%E5%BB%B6%E4%BC%B8%E6%87%89%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>我在最近遇到一個很奇怪的問題，現在在傳遞字串訊息時，都會使用 xml 或者 json 格式傳遞，但是到了現在，可能也會遇到只能傳遞極少字符串的情況，這樣就不能使用 json 或 xml 方式傳遞，因為他們會使資料量變大。</p><p>所以就會內部規定一些奇怪的格式，像是這樣：$$姓名~性別~生日~帳戶1%%餘額1%%帳戶2%%餘額2~修改日期$$，$$ 代表開始和結束符號，~ 會將不同的第一層資料給隔開，%% 會將第二層資料給隔開。</p><p>其中有沒有發現一個奇怪的地方，’帳戶1%%餘額1’ 和 ‘帳戶2%%餘額2’ 應該看成兩筆相同格式的資料，這兩筆同樣格式的資料他用 %% 隔開，同一筆資料內，他又用 %% 把不同意義的欄位隔開。（我暈…</p><a id="more"></a><hr><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>所以我就找了一下有沒有簡單的方法可以處理這個情況，主要解決的方向：我該如何找到第二個 ‘%%’，然後用類似 split 的方式處理成多筆相同格式的資料，也就是變成陣列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function indexOfAdv(str: string, cha: string, num: number): number &#123;</span><br><span class="line">    let x = 0;</span><br><span class="line">    for (var i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        x = i !== 0 ? str.indexOf(cha, x + cha.length) : str.indexOf(cha);</span><br><span class="line">        if (x === -1) &#123; break; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function splitAdv(str: string, cha: string, chaNum: number): string[] &#123;</span><br><span class="line">    const result = [];</span><br><span class="line">    while (indexOfAdv(str, cha, chaNum) &gt; -1) &#123;</span><br><span class="line">        const index = indexOfAdv(str, cha, chaNum);</span><br><span class="line">        const sliceStr = str.slice(0, index);</span><br><span class="line">        result.push(sliceStr);</span><br><span class="line">        str = str.slice(index + cha.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.push(str);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let test = &quot;1%%2%%3%%4%%5%%6%%7%%8%%9%%10%%11%%12&quot;;</span><br><span class="line">let result = splitAdv(test, &apos;%%&apos;, 5);</span><br><span class="line">console.log(result); // [1%%2%%3%%4%%5, 6%%7%%8%%9%%10, 11%%12]</span><br></pre></td></tr></table></figure><p>indexOfAdv() 是用來找到一段字串內第 n 個符號的位置，勢必要用到 indexOf() 的用法</p><p>但是只找到位置還不夠，我們要把一筆很長的 string 變成 array</p><p>splitAdv() 是將 indexOfAdv() 用不斷遞迴的方式整理成我們要的陣列結果。</p><hr><h3 id="indexOfAdv-利用-indexOf-和-for-找到第-n-個符號"><a href="#indexOfAdv-利用-indexOf-和-for-找到第-n-個符號" class="headerlink" title="indexOfAdv - 利用 indexOf 和 for 找到第 n 個符號"></a>indexOfAdv - 利用 indexOf 和 for 找到第 n 個符號</h3><p>string.indexOf() 可以找到某個字串或符號的位置，但是如果你要找到第 2 個符號要出現的位置，indexOf() 就必須做兩次，而且還要指定 indexOf() 的起始位置。</p><p>第一次就使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(cha)</span><br></pre></td></tr></table></figure><p>找到符號第 1 次出現的位置</p><p>第一次之後，就使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(cha, x + cha.length)</span><br></pre></td></tr></table></figure><p>找到第 2 個之後的符號出現的位置</p><p>合併起來就是這樣:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; num; i++) &#123;</span><br><span class="line">  if(i === 0) &#123;</span><br><span class="line">    x = str.indexOf(cha);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    x = str.indexOf(cha, x + cha.length);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS. 可以再自己修改程式碼變成跟我一樣的一行程式碼，但可能不好閱讀</p><p>我額外多做了一次處理是如果符號出現的次數沒有達到第 n 次，就應該回傳 -1，代表沒有找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(...)&#123;</span><br><span class="line">  ...</span><br><span class="line">  if (x === -1) &#123; break; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="splitAdv-使用-slice-將字串慢慢擷取出到陣列內存放"><a href="#splitAdv-使用-slice-將字串慢慢擷取出到陣列內存放" class="headerlink" title="splitAdv - 使用 slice 將字串慢慢擷取出到陣列內存放"></a>splitAdv - 使用 slice 將字串慢慢擷取出到陣列內存放</h3><p>在只有 indexOfAdv() 的情況下我會這樣做：</p><p>取出第一筆資料應該要是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let index = indexOfAdv(str, cha, chaNum);</span><br><span class="line">const sliceStr = str.slice(0, index);</span><br><span class="line">result.push(sliceStr);</span><br></pre></td></tr></table></figure><p>取出第二筆資料應該要是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = str.slice(index + cha.length);</span><br><span class="line">let index = indexOfAdv(str, cha, chaNum);</span><br><span class="line">const sliceStr = str.slice(0, index);</span><br><span class="line">result.push(sliceStr);</span><br></pre></td></tr></table></figure><p>第三筆…程式碼不斷加長下去…</p><p>所以我們應該要使用迴圈的方式處理上面這些問題</p><p>首先我們先宣告一個空陣列存放結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result = [];</span><br></pre></td></tr></table></figure><p>因為沒辦法確定總共有幾筆資料需要處理，所以無法使用 for loop，所以使用 while loop，跳出的條件就是找不到第 n 個符號了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while (indexOfAdv(str, cha, chaNum) &gt; -1) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while loop 裡面就是做前面重複的邏輯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (indexOfAdv(str, cha, chaNum) &gt; -1) &#123;</span><br><span class="line">    const index = indexOfAdv(str, cha, chaNum);</span><br><span class="line">    const sliceStr = str.slice(0, index);</span><br><span class="line">    result.push(sliceStr);</span><br><span class="line">    str = str.slice(index + cha.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後一步是看我們要不要把多餘的資料也回傳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.push(str);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018-10-20</title>
      <link href="/2018/10/20/2018-10-20/"/>
      <url>/2018/10/20/2018-10-20/</url>
      
        <content type="html"><![CDATA[<p>好久沒有上來更新了喔，主要是最近都在做一樣的事情，都沒有研究新的程式，不想當碼農啊！！～</p><p>最近公司的產品好像終於要步入正軌，好像…，因為終於要接上大陸那邊的內部系統，據說小診所要生存下去，就必須接上國家保險，但是進入的門檻有點高，而且我們又是比較晚進入市場的。</p><a id="more"></a><hr><p>說真的，一開始因為對保險這一塊相當不了解，和別家公司的工程師對接程式，其實一開始都只會得到一份文件，我通常是很相信文件的，像是接口標準、參數的選必填等，文件上的備註和建議，我都是能遵照就遵照，但是中間不免會遇到一些問題：</p><ol><li>設定檔問題：每次剛接入時都會遇到設定檔問題，一下是給的函式庫太舊，一下是設定檔版本太舊或根本不知道這個參數代表什麼意義，不過幸好，這些都只要找到對方的開發人員，一下就處理掉了，可是來來回回還是會花掉一整天的時間。</li><li>要加入目前既有系統：因為是要在原本的流程加入，所以有點疊床架屋的感覺，如果過去流程就有問題，只是問題不大，就忽略，等到邏輯越來越複雜，判斷越來越多，而且我們系統講求精簡，許多要揭露的訊息，我自己都無法說服同事加入，最後我也懶得去講。</li></ol><p>最近在做的程式就是簡單的資料傳送，根據對方給的 API，在我們自己的程式建立一個對應的物件，讓程式比較好產生資料，真慶幸當初選擇了 Typescirpt，完全支援編輯物件，還有物件繼承的寫法，不只支援，也不會像是 Javascript 難寫。後來連我自己開發模擬對方 API 回傳的 Nodejs Server 也可以共用一份物件。</p><hr><p>做一些跨國的專案真的很麻煩，除了溝通上就是一個大問題，我最怕的就是對方提供的 API 無法在外地使用，像是我們這次最主要的功能就是跟大陸當地的國家保險扯上關係，雖然做好這項功能，就不怕沒有客戶，可是要把這個功能給完成，中間真的要花不少人力和財力，像是我們的開發團隊就要一直跑到大陸這邊來做開發，而且系統做好不是客戶說好就好，也必須通過政府單位認可。</p><p>剛開始我是並不排斥到外地出差，因為有點走出家裡和辦公室的感覺，而且比較有動力不要整天都在寫程式，比較想走出來逛逛，最好是到處玩一玩，其實我還蠻嚮往可以邊工作邊旅遊的生活，但是前提是網路要夠自由，可是來到大陸就有一點不方邊，一個是工作地點有點侷限，像是目前開發的項目無法透過無線網路，必須在一個定點，也不是侷限在一個室內，而是人就只能坐在一個位置上，離開那個位置就不能開發了，而且現在那個位置還不是很大，桌面放不下兩台筆電的大小。</p><p>除了工作環境有點不好之外，大陸這邊地真的很大，去很多地方沒有車真的不方便，這邊除了二線城市之外，就很少有地鐵那麼方便的交通工具，像是台州這邊連公車都很不方便，雖然有很多公共腳踏車，可是這邊真的不太敢騎，因為這邊人車爭道的情況有點嚴重， 我連走路都很抖，更別說騎車了。而且除了百貨公司外，我其他地方都沒什麼興趣，這邊的景點都是公園、紀念館，我現在只想打球啊～（球場算什麼景點啊！喂</p><p>反正呢，現在在這邊除了去駐點寫程式，在飯店耍廢，出去找東西吃，就沒有什麼行程了，寧案回台灣打球…</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改 Ubuntu 時區</title>
      <link href="/2018/07/10/%E4%BF%AE%E6%94%B9-Ubuntu-%E6%99%82%E5%8D%80/"/>
      <url>/2018/07/10/%E4%BF%AE%E6%94%B9-Ubuntu-%E6%99%82%E5%8D%80/</url>
      
        <content type="html"><![CDATA[<p>查看機器現在時間</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br></pre></td></tr></table></figure><p>顯示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tue Jul 10 09:53:12 CST 2018</span><br></pre></td></tr></table></figure><p>叫出修改時區的程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>如果我要修改成台灣時區，就是先選 Asia(亞洲) -&gt; Taipei(台北)</p><p>然後再次執行 date 查看目前時間是否如自己預期</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> timezone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陣列 - 汰除重複的項目</title>
      <link href="/2018/06/18/%E9%99%A3%E5%88%97-%E6%B1%B0%E9%99%A4%E9%87%8D%E8%A4%87%E7%9A%84%E9%A0%85%E7%9B%AE/"/>
      <url>/2018/06/18/%E9%99%A3%E5%88%97-%E6%B1%B0%E9%99%A4%E9%87%8D%E8%A4%87%E7%9A%84%E9%A0%85%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.arr = this.arr.filter((item: string, index: number, arr: string[]) =&gt; &#123;</span><br><span class="line">  const firstIndex = arr.indexOf(item);</span><br><span class="line">  return index === firstIndex ? true : false;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="核心想法"><a href="#核心想法" class="headerlink" title="核心想法"></a>核心想法</h2><p>Array.indexOf() 會回傳 陣列中藥查詢的項目最先出現的 index 位置。</p><p>Array.filter() 會提供目前遍歷到的項目資料、目前項目的位置、陣列資料，如果該項目在陣列的位置，和 Array.indexOf() 回傳的位置不相同，就代表有重複。</p><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [ 1, 1, 2, 3, 3 , 3, 4, 5, 6 ];</span><br><span class="line"></span><br><span class="line">arr = arr.filter((item, index, arr) =&gt; &#123;</span><br><span class="line">  var firstIndex = arr.indexOf(item);</span><br><span class="line">  return index === firstIndex ? true : false;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p><a href="http://jsbin.com/bakeqed/1/edit?html,js,output" target="_blank" rel="noopener">JS Bin</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 匯出 Procedure 和 Function</title>
      <link href="/2018/06/18/MySql-%E5%8C%AF%E5%87%BA-Procedure-%E5%92%8C-Function/"/>
      <url>/2018/06/18/MySql-%E5%8C%AF%E5%87%BA-Procedure-%E5%92%8C-Function/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u user -p db-name --routines &gt; export-file.sql</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="匯出指令"><a href="#匯出指令" class="headerlink" title="匯出指令"></a>匯出指令</h2><p>過去的指令為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u &lt;user&gt; -p &lt;db-name&gt; &gt; &lt;file-name&gt;.sql</span><br></pre></td></tr></table></figure><p>之前匯出的指令包含 table 的 create，以及資料的 insert，但是後來嘗試開始使用 Procedure，發現並沒有一起匯出。</p><p>如果要一起將 Procedure 和 Function 一併匯出，需要加上 routines 參數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u &lt;user&gt; -p &lt;db-name&gt;  --routines &gt; &lt;file-name&gt;.sql</span><br></pre></td></tr></table></figure><p>PS. 也會將 Trigger 也匯出，只是我還沒有用過 Trigger</p><hr><h2 id="mysqldump-insufficient-privileges-to-show-create-function"><a href="#mysqldump-insufficient-privileges-to-show-create-function" class="headerlink" title="mysqldump: insufficient privileges to show create function"></a>mysqldump: insufficient privileges to show create function</h2><p>如果你遇到此問題，是因為登入 MySql 的使用者權限不足，假設登入的是 user01，而 user01 只有在某個 Database 有所有權限是不夠的。</p><p>請替 user01 增加預儲程序的權限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT ON mysql.proc to &apos;user01&apos;;</span><br></pre></td></tr></table></figure><p>記得要刷新權限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.ducea.com/2007/07/25/dumping-mysql-stored-procedures-functions-and-triggers/" target="_blank" rel="noopener">dumping-mysql-stored-procedures-functions-and-triggers</a></p><p><a href="https://stackoverflow.com/questions/30841351/mysqldump-insufficient-privileges-to-show-create-function-funcation-name/32765366" target="_blank" rel="noopener">mysqldump: insufficient privileges to show create function ‘funcation name’</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prodecure </tag>
            
            <tag> export </tag>
            
            <tag> function </tag>
            
            <tag> 匯出 </tag>
            
            <tag> 預儲程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 時間欄位</title>
      <link href="/2018/06/16/MySql-%E6%99%82%E9%96%93%E6%AC%84%E4%BD%8D/"/>
      <url>/2018/06/16/MySql-%E6%99%82%E9%96%93%E6%AC%84%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>在資料表設立一個修改資料的時間欄位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists sound(</span><br><span class="line">  id varchar(50) not null,</span><br><span class="line">  name varchar(100) not null,</span><br><span class="line">  modify_datetime datetime default current_timestamp on update current_timestamp,</span><br><span class="line">  url varchar(500),</span><br><span class="line">  graph longblob,</span><br><span class="line">  primary key (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><p>default current_timestamp 預設建立時間為現在時間</p><p>on update current_timestamp 在修改時，修改為現在時間</p><hr><h2 id="取得現在時間"><a href="#取得現在時間" class="headerlink" title="取得現在時間"></a>取得現在時間</h2><table><thead><tr><th>函式</th><th>結果</th></tr></thead><tbody><tr><td>CURDATE()</td><td>2018-06-16</td></tr><tr><td>CURTIME()</td><td>12:49:51</td></tr><tr><td>CURRENT_TIMESTAMP()</td><td>2018-06-16 12:50:04</td></tr><tr><td>NOW()</td><td>2018-06-16 12:50:04</td></tr><tr><td>UNIX_TIMESTAMP()</td><td>1529124630</td></tr></tbody></table><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://wen198599.pixnet.net/blog/post/22450019-mysql%E6%97%A5%E6%9C%9F%E5%92%8C%E6%99%82%E9%96%93%E5%87%BD%E6%95%B8%E4%B8%8D%E6%B1%82%E4%BA%BA" target="_blank" rel="noopener">mysql日期和時間函數不求人</a></p><p><a href="http://fecbob.pixnet.net/blog/post/39089591-mysql%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93%E5%87%BD%E6%95%B8%E5%A4%A7%E5%85%A8" target="_blank" rel="noopener">mysql日期時間函數大全</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
            <tag> datetime </tag>
            
            <tag> timestamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 建立和使用 function</title>
      <link href="/2018/06/16/MySql-%E5%BB%BA%E7%AB%8B%E5%92%8C%E4%BD%BF%E7%94%A8-function/"/>
      <url>/2018/06/16/MySql-%E5%BB%BA%E7%AB%8B%E5%92%8C%E4%BD%BF%E7%94%A8-function/</url>
      
        <content type="html"><![CDATA[<p>Sql 現在除了預存程序，可以直接執行複雜的 Sql 語法之外，還可以使用 function 處理一些更常使用的功能。</p><a id="more"></a><hr><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop function if exists &lt;functionName&gt;;</span><br><span class="line">delimiter #</span><br><span class="line">create function &lt;functionName&gt; (&lt;parameter&gt; &lt;paramType&gt;) returns &lt;returnType&gt;</span><br><span class="line">begin</span><br><span class="line">  &lt;expr&gt;</span><br><span class="line">  return &lt;result&gt;;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">select &lt;functionName&gt;(paramter);</span><br></pre></td></tr></table></figure><p>&lt;&gt; 內是要修改的地方</p><p>functionName 是呼叫的名稱</p><p>paramter 是 function 執行需要的參數，可以不只一個，但記得型態要正確</p><p>returnType 在是否要回傳結果的限制 function 和 procedure 不一樣，function 是一定要回傳一個結果</p><p>expr 是你的邏輯的部份，如果裡面有 select 的語法，是無法直接當作結果回傳的，一定要使用 return 的語法</p><hr><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop function if exists getMemberName;</span><br><span class="line">delimiter #</span><br><span class="line">create function getMemberName (id int) returns varchar(20)</span><br><span class="line">begin</span><br><span class="line">  declare member_name varchar(20) default &apos;&apos;;</span><br><span class="line">  select a.name into member_name from member a where a.id = id;</span><br><span class="line">  return member_name;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">select getMemberName(123);</span><br></pre></td></tr></table></figure><p>主要就是透過一個唯一值 ID 取得他的其他資訊</p><p>注意：select sth into variable 的用法，select 出來的東西只能是一筆結果而已，如果是多筆，會有問題</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html" target="_blank" rel="noopener">CREATE PROCEDURE and CREATE FUNCTION Syntax</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>這就是我要的生活嗎？</title>
      <link href="/2018/06/10/%E9%80%99%E5%B0%B1%E6%98%AF%E4%BD%A0%E8%A6%81%E7%9A%84%E7%94%9F%E6%B4%BB%E5%97%8E%EF%BC%9F/"/>
      <url>/2018/06/10/%E9%80%99%E5%B0%B1%E6%98%AF%E4%BD%A0%E8%A6%81%E7%9A%84%E7%94%9F%E6%B4%BB%E5%97%8E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>[掛] 到底要到多慘才會問自己：這就是我要的生活嗎？</p><a id="more"></a><p>剛剛在 Line 群組看到好久沒有聯絡的朋友說要離職，原因是因為前幾天她的同事看她每天都加班到很晚，就問她：這就是妳要的生活嗎？她一時答不上來。</p><p>然後就在 Line 群組問大家一樣的問題，馬上就引起了共鳴，因為最近也有人準備離職。</p><h2 id="這就是我要的生活嗎？"><a href="#這就是我要的生活嗎？" class="headerlink" title="這就是我要的生活嗎？"></a>這就是我要的生活嗎？</h2><p>我沒有加入討論，因為我真的不喜歡和人即時討論很嚴肅和正經的話題，感覺很不有趣。</p><p>我對自己的生活其實還算滿意，不為錢困擾，不為人際關係困擾，撇除這兩點，我可能就過得比別人開心，不過最重要的，就是我不太去追求什麼吧？只要工作穩定，有穩定的收入可以讓我打球、買遊戲就很謝天謝地了。</p><h2 id="別人問：你生活好無趣喔？"><a href="#別人問：你生活好無趣喔？" class="headerlink" title="別人問：你生活好無趣喔？"></a>別人問：你生活好無趣喔？</h2><p>朋友或親戚三不五時總是會問一些這樣的問題，因為除了打球和上班，幾乎不和人交集吧！</p><p>不對美食感興趣，不對時事娛樂感興趣，假日大多就是待家裡或去上班的地方吹免費冷氣。</p><p>大學時期認識了一個朋友，到現在還是很常聯絡，可是我覺得我和他性格差很多，忘記有次他說他很欣賞我，還是說很羨慕我，有點忘記他的說法了，可是其實我還比較欣賞他的處事態度，不會去管他人的看法，自己做自己，我覺得我自己好像有點做到了呢（驕傲</p><p>所以當別人評論起我的生活，我都覺得其實只是在找話題而已，我並不是太在意，我想追求時，我自己會去想辦法，現在蝸居在 5, 6 坪大小的套房，以後想要搬到大一點的地方，自然會搬，不是因為別人說我地方小，或者別人說什麼，只要不是我自己想，我就懶得去動。</p><p>我還蠻固執的呢（笑</p><h2 id="卦-大家追求的生活是什麼？"><a href="#卦-大家追求的生活是什麼？" class="headerlink" title="[卦] 大家追求的生活是什麼？"></a>[卦] 大家追求的生活是什麼？</h2><p>我一直都覺得那些出國去唸書或工作的朋友，都是在追求某種東西，和我這種習慣待在舒適圈的傢伙不一樣，可是有兩個朋友卻好像沒有很快樂（還是只是我都看到他們不快樂的地方？）</p><h2 id="放著不管不行嗎？"><a href="#放著不管不行嗎？" class="headerlink" title="放著不管不行嗎？"></a>放著不管不行嗎？</h2><p>群組內的朋友好像女性朋友們好像在人生上都遇到難以跨越的問題，觀察起來好像都是被工作壓得喘不過氣，是因為她們責任感比較重嗎？還是我們男生比較不負責任？</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular i18n 開始翻譯</title>
      <link href="/2018/06/08/Angular-i18n-%E9%96%8B%E5%A7%8B%E7%BF%BB%E8%AD%AF/"/>
      <url>/2018/06/08/Angular-i18n-%E9%96%8B%E5%A7%8B%E7%BF%BB%E8%AD%AF/</url>
      
        <content type="html"><![CDATA[<p>主要是使用了我自己寫一個網頁進行翻譯，但是現在沒有自動翻譯的功能，希望日後有時間補上。</p><p>如果要翻譯多國語系，並且要在本地端運行個語系的結果、要編譯成多國語系，請先查看前一篇的 <a href="https://contemplator.github.io/blog/2018/06/06/Angular-i18n-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E7%B3%BB/">Angular i18n 多國語系設置</a>。</p><a id="more"></a><hr><h2 id="產生翻譯檔-xlf"><a href="#產生翻譯檔-xlf" class="headerlink" title="產生翻譯檔 .xlf"></a>產生翻譯檔 .xlf</h2><p>在 Angular 專案的路徑下執行以下指令 (PS. 就是執行 npm start 或 ng serve 的路徑下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng xi18n --i18n-locale en --out-file locale/en.xlf</span><br></pre></td></tr></table></figure><p>然後等一段時間後，angular 就會幫你產生 ./src/locale/en.xlf 這樣一個檔案</p><h2 id="xlf-檔案說明"><a href="#xlf-檔案說明" class="headerlink" title=".xlf 檔案說明"></a>.xlf 檔案說明</h2><p>en.xlf 部分內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;xliff version=&quot;1.2&quot; xmlns=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</span><br><span class="line">  &lt;file source-language=&quot;en&quot; datatype=&quot;plaintext&quot; original=&quot;ng2.template&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      &lt;trans-unit id=&quot;productFeature&quot; datatype=&quot;html&quot;&gt;</span><br><span class="line">        &lt;source&gt;產品特色&lt;/source&gt;</span><br><span class="line">        &lt;context-group purpose=&quot;location&quot;&gt;</span><br><span class="line">          &lt;context context-type=&quot;sourcefile&quot;&gt;app/app.component.ts&lt;/context&gt;</span><br><span class="line">          &lt;context context-type=&quot;linenumber&quot;&gt;16&lt;/context&gt;</span><br><span class="line">        &lt;/context-group&gt;</span><br><span class="line">        &lt;note priority=&quot;1&quot; from=&quot;description&quot;&gt;產品特色字樣&lt;/note&gt;</span><br><span class="line">        &lt;note priority=&quot;1&quot; from=&quot;meaning&quot;&gt;產品特色&lt;/note&gt;</span><br><span class="line">      &lt;/trans-unit&gt;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>就對應到 ./src/app/app.component.html 第 16 行的內容，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#features&quot; class=&quot;nav-link&quot; i18n=&quot;產品特色|產品特色字樣@@productFeature&quot;&gt;產品特色&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>&lt;trans-unit&gt; 就代表一個需要翻譯的 html element</p><p>&lt;source&gt; 就是原始內容，像是現在，我就是要把產品特色翻譯成英文</p><p>&lt;context-group purpose=”location”&gt; 說明內容是在哪裡出現的</p><p>&lt;note priority=”1” from=”description”&gt; 就是翻譯作者可以參考的說明，比對到 html i81n 屬性的寫法，就是在 @@ 前，| 後的內容</p><p>&lt;note priority=”1” from=”meaning”&gt; 除了 description 之外，還可以另外有 meaning 給作者當作參考，一般是不寫沒關係</p><p>翻譯作者就是參考以上資料，然後翻譯出正確的文字和語意</p><p>翻譯後的結果，就是在 &lt;trans-unit&gt; 增加一個 &lt;target&gt;，target 就是翻譯的結果，結果應該要如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;trans-unit id=&quot;productFeature&quot; datatype=&quot;html&quot;&gt;</span><br><span class="line">    &lt;source&gt;產品特色&lt;/source&gt;</span><br><span class="line">    &lt;target&gt;Product Feature&lt;/target&gt;</span><br><span class="line">    &lt;context-group purpose=&quot;location&quot;&gt;</span><br><span class="line">        &lt;context context-type=&quot;sourcefile&quot;&gt;app/app.component.ts&lt;/context&gt;</span><br><span class="line">        &lt;context context-type=&quot;linenumber&quot;&gt;16&lt;/context&gt;</span><br><span class="line">    &lt;/context-group&gt;</span><br><span class="line">    &lt;note priority=&quot;1&quot; from=&quot;description&quot;&gt;產品特色字樣&lt;/note&gt;</span><br><span class="line">    &lt;note priority=&quot;1&quot; from=&quot;meaning&quot;&gt;產品特色&lt;/note&gt;</span><br><span class="line">&lt;/trans-unit&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="使用-transalte-tool"><a href="#使用-transalte-tool" class="headerlink" title="使用 transalte tool"></a>使用 transalte tool</h2><p>連到 <a href="http://www.idlefox.info/translate-tool/" target="_blank" rel="noopener">http://www.idlefox.info/translate-tool/</a></p><h3 id="選擇檔案"><a href="#選擇檔案" class="headerlink" title="選擇檔案"></a>選擇檔案</h3><p><img src="/blog/images/choose-xlf.png" alt="選擇檔案xlf"></p><h3 id="匯入結果"><a href="#匯入結果" class="headerlink" title="匯入結果"></a>匯入結果</h3><p><img src="/blog/images/xlf-import-result.png" alt="xls匯入結果"></p><h3 id="開始翻譯"><a href="#開始翻譯" class="headerlink" title="開始翻譯"></a>開始翻譯</h3><p><img src="/blog/images/translate-xlf.png" alt="開始翻譯"></p><p>如果有沒翻譯的部分，最後結果都會是 undefined</p><h3 id="匯出"><a href="#匯出" class="headerlink" title="匯出"></a>匯出</h3><p>點下匯出按鈕，就會自動下載剛剛你所做的翻譯結果。</p><hr><h2 id="替換掉-Angualr-的翻譯語系檔"><a href="#替換掉-Angualr-的翻譯語系檔" class="headerlink" title="替換掉 Angualr 的翻譯語系檔"></a>替換掉 Angualr 的翻譯語系檔</h2><p>將剛剛下載的檔案做更名，我先換成 en.xlf，主要是因為我的 angular.json 已經設定，如果要在 ng serve 指定語系為 en，我的翻譯檔名就要叫做 en.xlf。</p><hr><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>之後執行以下的 angular 指令，就可以在本地端看到結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng serve --configuration=en</span><br></pre></td></tr></table></figure><h2 id="編譯正式檔案"><a href="#編譯正式檔案" class="headerlink" title="編譯正式檔案"></a>編譯正式檔案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng build --base-href=./ --configuration=en</span><br></pre></td></tr></table></figure><p>在測試和編譯正式檔案都是參照你的 angular.json 設定的，所以如果有問題，請回去察看設定。</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> internationalization </tag>
            
            <tag> 多國語系 </tag>
            
            <tag> xlf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular i18n 多國語系設置</title>
      <link href="/2018/06/06/Angular-i18n-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E7%B3%BB/"/>
      <url>/2018/06/06/Angular-i18n-%E5%A4%9A%E5%9C%8B%E8%AA%9E%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>此文章適用於 angualr 6</p><a id="more"></a><h2 id="修改-angular-json"><a href="#修改-angular-json" class="headerlink" title="修改 angular.json"></a>修改 angular.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;projects&quot;: &#123;</span><br><span class="line">        &quot;&lt;your-project-name&gt;&quot;: &#123;</span><br><span class="line">            ...,</span><br><span class="line">            &quot;architect&quot;: &#123;</span><br><span class="line">                &quot;build&quot;: &#123;</span><br><span class="line">                    ...,</span><br><span class="line">                    &quot;configurations&quot;: &#123;</span><br><span class="line">                        &quot;production&quot;: &#123;</span><br><span class="line">                            ...</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;production-en&quot;: &#123;</span><br><span class="line">                            &quot;fileReplacements&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    &quot;replace&quot;: &quot;src/environments/environment.ts&quot;,</span><br><span class="line">                                    &quot;with&quot;: &quot;src/environments/environment.prod.ts&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            &quot;optimization&quot;: true,</span><br><span class="line">                            &quot;outputHashing&quot;: &quot;all&quot;,</span><br><span class="line">                            &quot;sourceMap&quot;: false,</span><br><span class="line">                            &quot;extractCss&quot;: true,</span><br><span class="line">                            &quot;namedChunks&quot;: false,</span><br><span class="line">                            &quot;aot&quot;: true,</span><br><span class="line">                            &quot;extractLicenses&quot;: true,</span><br><span class="line">                            &quot;vendorChunk&quot;: false,</span><br><span class="line">                            &quot;buildOptimizer&quot;: true,</span><br><span class="line">                            &quot;outputPath&quot;: &quot;dist/en/&quot;,</span><br><span class="line">                            &quot;i18nFile&quot;: &quot;src/locale/en.xlf&quot;,</span><br><span class="line">                            &quot;i18nFormat&quot;: &quot;xlf&quot;,</span><br><span class="line">                            &quot;i18nLocale&quot;: &quot;en&quot;,</span><br><span class="line">                            &quot;i18nMissingTranslation&quot;: &quot;error&quot;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;en&quot;: &#123;</span><br><span class="line">                                &quot;aot&quot;: true,</span><br><span class="line">                                &quot;outputPath&quot;: &quot;dist/en/&quot;,</span><br><span class="line">                                &quot;i18nFile&quot;: &quot;src/locale/en.xlf&quot;,</span><br><span class="line">                                &quot;i18nFormat&quot;: &quot;xlf&quot;,</span><br><span class="line">                                &quot;i18nLocale&quot;: &quot;en&quot;,</span><br><span class="line">                                &quot;i18nMissingTranslation&quot;: &quot;error&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;serve&quot;: &#123;</span><br><span class="line">                    ...,</span><br><span class="line">                    &quot;configurations&quot;: &#123;</span><br><span class="line">                        &quot;production&quot;: &#123;</span><br><span class="line">                            &quot;browserTarget&quot;: &quot;&lt;your-project-name&gt;:build:production&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;en&quot;: &#123;</span><br><span class="line">                            &quot;browserTarget&quot;: &quot;&lt;your-project-name&gt;:build:en&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;extract-i18n&quot;: &#123;</span><br><span class="line">                    ...,</span><br><span class="line">                    &quot;options&quot;: &#123;</span><br><span class="line">                        &quot;browserTarget&quot;: &quot;&lt;your-project-name&gt;:build&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 build 和 serve 下增加語系，會跟使用 angular-cli 指令時相對應。</p><hr><h2 id="在-HTML-指定要翻譯的文字"><a href="#在-HTML-指定要翻譯的文字" class="headerlink" title="在 HTML 指定要翻譯的文字"></a>在 HTML 指定要翻譯的文字</h2><p>完整的寫法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 i18n=&quot;site header|An introduction header for this sample@@introductionHeader&quot;&gt;Hello i18n!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>| 前為 meaning 大意<br>| 後為 description 說明<br>@@ 後為 id</p><p>不寫大意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 i18n=&quot;An introduction header for this sample@@introductionHeader&quot;&gt;Hello i18n!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>翻譯文件仍會有說明、id 和原始內容(Hello i18n!) 可供翻譯的參考</p><p>你也可以只寫說明或者 id，或者都不寫，看你留多少線索給翻譯作者。</p><hr><h2 id="無法翻譯-HTML-tag"><a href="#無法翻譯-HTML-tag" class="headerlink" title="無法翻譯 HTML tag"></a>無法翻譯 HTML tag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div i18n&gt;你好&lt;em&gt;這是我要強調的東西&lt;/em&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;span i18n&gt;你好&lt;span&gt;&lt;em i18n&gt;這是我要強調的東西&lt;/em&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>可是，如果是我的 header tag 包著東西，這樣改不會影響我網站的 SEO 嗎？</p><hr><h2 id="產生需要翻譯的文件"><a href="#產生需要翻譯的文件" class="headerlink" title="產生需要翻譯的文件"></a>產生需要翻譯的文件</h2><p>PS. 官方文件已經過期了，詳細說明請輸入指令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng xi18n --help</span><br></pre></td></tr></table></figure><p>如果只有一個語系要做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng xi18n</span><br></pre></td></tr></table></figure><p>如果要做多國語系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ng xi18n --i18n-locale en --out-file locale/en.xlf &amp;&amp; ng xi18n --i18n-locale zh-Hans --out-file locale/zh-Hans.xlf</span><br></pre></td></tr></table></figure><p>以上指令可以自行增加在 package.json 內的 script 方便作業。</p><p>–i18n-locale 為語系的地區標誌， en 為英文，可參照 <a href="https://github.com/angular/angular/tree/master/packages/common/locales" target="_blank" rel="noopener">Angular 支援語系</a> 打開有點久，也可以看 <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt#" target="_blank" rel="noopener">BCP 47 規範</a></p><p>–out-file 為產出文件的路徑和檔名的參數，為方便管理，我都產出在 locale 資料夾</p><hr><h2 id="開始翻譯"><a href="#開始翻譯" class="headerlink" title="開始翻譯"></a>開始翻譯</h2><p>主要就是修改執行 ng xi18n 產生的 .xlf 檔案</p><p>可以使用我自己寫的工具來翻譯，將 angular 產生的 xlf 上傳，就可以看到你下的 i18n 需要翻譯的內容，完成後按下匯出就會下載，再將下載下來的檔案和 angular 專案內的 xlf 替換即可。</p><p>持續更新中…</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.dzurico.com/i18n-with-angular-6/" target="_blank" rel="noopener">i18n with Angular 6+</a></p><p><a href="https://angular.cn/guide/i18n" target="_blank" rel="noopener">Angular 官方文件</a> - <strong>尚未更新</strong></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> internationalization </tag>
            
            <tag> 多國語系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 允許外部連入</title>
      <link href="/2018/06/06/Mysql-%E5%85%81%E8%A8%B1%E5%A4%96%E9%83%A8%E9%80%A3%E5%85%A5/"/>
      <url>/2018/06/06/Mysql-%E5%85%81%E8%A8%B1%E5%A4%96%E9%83%A8%E9%80%A3%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>架了一個 VPS server，一般都不會想要登入進去在 VPS server 上直接操作，一是因為速度通常有點慢，二就是用的工具可能不順手，像是我就習慣用圖形介面工具操作 MySql。</p><p>我的 Mysql 版本 5.7</p><a id="more"></a><hr><h2 id="安裝-Mysql"><a href="#安裝-Mysql" class="headerlink" title="安裝 Mysql"></a>安裝 Mysql</h2><p>先假設你已經安裝了 Mysql Server，不知道可以參考這篇：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install MySQL on Ubuntu 16.04</a></p><hr><h2 id="修改-Mysql-設定檔-etc-mysql-mysql-conf-d-mysqld-cnf"><a href="#修改-Mysql-設定檔-etc-mysql-mysql-conf-d-mysqld-cnf" class="headerlink" title="修改 Mysql 設定檔 - /etc/mysql/mysql.conf.d/mysqld.cnf"></a>修改 Mysql 設定檔 - /etc/mysql/mysql.conf.d/mysqld.cnf</h2><p>註解原本的 bind-address<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bind-address          = 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>改成自己 VPS 的 IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address            = &lt;your-ip&gt;</span><br></pre></td></tr></table></figure><p><strong> 更新 2018-06-06 </strong></p><p>如果你的 Mysql Server 要允許外部連入，但是也要允許 localhost 連入，就直接把 bind-address 都註解就好，連 bind-address = VPS IP 都不要</p><h2 id="重啟-mysql"><a href="#重啟-mysql" class="headerlink" title="重啟 mysql"></a>重啟 mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><hr><h2 id="新增-mysql-user"><a href="#新增-mysql-user" class="headerlink" title="新增 mysql user"></a>新增 mysql user</h2><h3 id="登入-MySql"><a href="#登入-MySql" class="headerlink" title="登入 MySql"></a>登入 MySql</h3><p>先登入 mysql </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure><p>會要求輸入 root 的密碼，密碼就是一開始安裝 MySql 時設定的，如果忘記了，也不必重新安裝，參考這一篇文章：<a href="https://contemplator.github.io/blog/2017/12/14/MySql-%E5%BF%98%E8%A8%98%E5%AF%86%E7%A2%BC/">MySql 忘記密碼</a></p><h3 id="新增-User"><a href="#新增-User" class="headerlink" title="新增 User"></a>新增 User</h3><p>登入之後開始新增 User</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &apos;newuser&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypass&apos;;</span><br></pre></td></tr></table></figure><p>newuser 是 user 登入的名稱<br>% 是允許 newuser 從任意 IP 登入<br>mypass 是 newuser 的密碼</p><h3 id="查詢-Mysql-內的-User"><a href="#查詢-Mysql-內的-User" class="headerlink" title="查詢 Mysql 內的 User"></a>查詢 Mysql 內的 User</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user, host from mysql.user;</span><br></pre></td></tr></table></figure><p>結果會長這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| newuser          | %         |</span><br><span class="line">| debian-sys-maint | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">| root             | localhost |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure><h3 id="刪除不必要的-user"><a href="#刪除不必要的-user" class="headerlink" title="刪除不必要的 user"></a>刪除不必要的 user</h3><p>如果上一步做錯了，想要重來，就 Drop 掉 user 就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &apos;newuser&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><h3 id="修改-user-的-host"><a href="#修改-user-的-host" class="headerlink" title="修改 user 的 host"></a>修改 user 的 host</h3><p>不建議這樣做，因為我修改了 root host 之後，可能導致 user 有兩筆資料</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| root             | %         |</span><br><span class="line">| root             | localhost |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure><p>結果搞了半天還是無法從我的筆電登入</p><h3 id="修改-newuser-權限"><a href="#修改-newuser-權限" class="headerlink" title="修改 newuser 權限"></a>修改 newuser 權限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON *.* TO &apos;newuser&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><p>這意思是將所有 database 下的 table 都給予 newuser 所有權限</p><p>記得要將系統記錄的權限更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><hr><h2 id="開通防火牆"><a href="#開通防火牆" class="headerlink" title="開通防火牆"></a>開通防火牆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /sbin/iptables -A INPUT -i eth0 -p tcp --destination-port 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><p>PS. eht0 是 網路卡名稱，像是我是在 Vultr 買的 VPS，查出來的結果是 ens3</p><p>查詢的方式，在 VPS server 輸入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ifconfig_result.pns" alt="ifconfig result"></p><hr><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>先回到自己的電腦上，也就是從 ssh login 登入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>MySql 遠端登入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u newuser -h &lt;mysql-server-ip&gt; -p</span><br></pre></td></tr></table></figure><p>輸入當初新增 user 時設定的密碼，就可以了。</p><p>如果不行，就要查看錯誤訊息是什麼，歡迎留言。</p><h3 id="測試是否可以連到-mysql，先不論帳號密碼和權限"><a href="#測試是否可以連到-mysql，先不論帳號密碼和權限" class="headerlink" title="測試是否可以連到 mysql，先不論帳號密碼和權限"></a>測試是否可以連到 mysql，先不論帳號密碼和權限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet &lt;your-mysql-ip&gt; 3306</span><br></pre></td></tr></table></figure><p>PS. 3306 是 mysql 預設的 port</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install MySQL on Ubuntu 16.04</a></p><p><a href="https://askubuntu.com/questions/82374/how-do-i-start-stop-mysql-server" target="_blank" rel="noopener">how-do-i-start-stop-mysql-server</a></p><p><a href="https://stackoverflow.com/questions/16287559/mysql-adding-user-for-remote-access" target="_blank" rel="noopener">mysql-adding-user-for-remote-access</a></p><p><a href="https://blog.longwin.com.tw/2009/06/query-mysql-show-grant-permission-2009/" target="_blank" rel="noopener">查詢 MySQL 對 此帳號 開放(GRANT)哪些權限</a></p><p><a href="https://stackoverflow.com/questions/8380797/enable-remote-mysql-connection-error-1045-28000-access-denied-for-user" target="_blank" rel="noopener">enable-remote-mysql-connection-error-1045-28000-access-denied-for-user</a></p><p><a href="https://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html" target="_blank" rel="noopener">how-do-i-enable-remote-access-to-mysql-database-server</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/drop-user.html" target="_blank" rel="noopener">DROP USER Syntax</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/create-user.html" target="_blank" rel="noopener">CREATE USER Syntax</a></p><p><a href="https://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html" target="_blank" rel="noopener">How Do I Enable Remote Access To MySQL Database Server?</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/set-password.html" target="_blank" rel="noopener">SET PASSWORD Syntax</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> access </tag>
            
            <tag> remote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unbunt 新的 user 在 terminal 沒有 tab 自動完成可以使用</title>
      <link href="/2018/06/05/unbunt-%E6%96%B0%E7%9A%84-user-%E5%9C%A8-terminal-%E6%B2%92%E6%9C%89-tab-%E8%87%AA%E5%8B%95%E5%AE%8C%E6%88%90%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/05/unbunt-%E6%96%B0%E7%9A%84-user-%E5%9C%A8-terminal-%E6%B2%92%E6%9C%89-tab-%E8%87%AA%E5%8B%95%E5%AE%8C%E6%88%90%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在 Vultr 新運行的 Ubuntu Server，新加了一名 User 之後，發現在終端機的操作上，沒有自動完成，也沒有上一句指令可以快速叫出，所以 Google 了一下問題。</p><a id="more"></a><hr><h2 id="安裝-bash-completion-套件"><a href="#安裝-bash-completion-套件" class="headerlink" title="安裝 bash-completion 套件"></a>安裝 bash-completion 套件</h2><h3 id="apt-get-安裝"><a href="#apt-get-安裝" class="headerlink" title="apt-get 安裝"></a>apt-get 安裝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install bash-completion</span><br></pre></td></tr></table></figure><h3 id="在-bashrc-加入指令"><a href="#在-bashrc-加入指令" class="headerlink" title="在 .bashrc 加入指令"></a>在 .bashrc 加入指令</h3><p>PS. 通常在執行上一個步驟時，就會發現已經安裝了，我也是在上一個步驟就有發現，然後在準備修改 .bashrc 檔案時，發現我現在使用的新 User 沒有使用到 /bin/bash 的設定</p><hr><h2 id="為新-User-加入-bin-bash-環境配置"><a href="#為新-User-加入-bin-bash-環境配置" class="headerlink" title="為新 User 加入 /bin/bash 環境配置"></a>為新 User 加入 /bin/bash 環境配置</h2><h3 id="查看-root-的環境配置"><a href="#查看-root-的環境配置" class="headerlink" title="查看 root 的環境配置"></a>查看 root 的環境配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ getent passwd root</span><br></pre></td></tr></table></figure><p>應該會看到以下訊息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><h3 id="為新-User-加入環境配置"><a href="#為新-User-加入環境配置" class="headerlink" title="為新 User 加入環境配置"></a>為新 User 加入環境配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s /bin/bash &lt;new-user&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://askubuntu.com/questions/545540/terminal-autocomplete-doesnt-work-properly" target="_blank" rel="noopener">Terminal autocomplete doesn’t work properly</a></p><p><a href="https://serverfault.com/questions/99787/tab-autocomplete-for-new-user" target="_blank" rel="noopener">Tab Autocomplete for New User</a></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> autocomplete </tag>
            
            <tag> shortcut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 解決 403 forbidden</title>
      <link href="/2018/06/05/nginx-%E8%A7%A3%E6%B1%BA-403-forbidden/"/>
      <url>/2018/06/05/nginx-%E8%A7%A3%E6%B1%BA-403-forbidden/</url>
      
        <content type="html"><![CDATA[<p>上次在 nginx.conf 修改預設的 html 資料夾之後，除了 index.html 之外，都是顯示 403 forbidden，完全看不到。</p><p>搜尋了一下資料，終於找到解法，一樣是對 nginx.conf 進行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br></pre></td></tr></table></figure><p>改為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user  leo staff;</span><br></pre></td></tr></table></figure><p>PS. leo 是我 mac 登入的 user 名稱，staff 是一定要加的</p><p>然後進行設定檔的測試</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -t</span><br></pre></td></tr></table></figure><p>測試通過之後，在進行設定檔的重新讀取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.sunzhongwei.com/nginx-user-conf-and-endless-loop.html" target="_blank" rel="noopener">Nginx user 配置引发的血案</a></p><p><a href="http://jiawu.iteye.com/blog/1390383" target="_blank" rel="noopener">nginx 代理本地的html</a></p><p><a href="https://www.jianshu.com/p/e0dadb871894" target="_blank" rel="noopener">簡書 - nginx 403 Forbidden 排错记录</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 403 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 從 conf 檔設定 html 資料夾路徑</title>
      <link href="/2018/06/04/nginx-%E5%BE%9E-conf-%E6%AA%94%E8%A8%AD%E5%AE%9A-html-%E8%B3%87%E6%96%99%E5%A4%BE%E8%B7%AF%E5%BE%91/"/>
      <url>/2018/06/04/nginx-%E5%BE%9E-conf-%E6%AA%94%E8%A8%AD%E5%AE%9A-html-%E8%B3%87%E6%96%99%E5%A4%BE%E8%B7%AF%E5%BE%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /Users/idlefox/Sites;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在執行重新讀取設定檔指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx 系統變數(包含 html 路徑)</title>
      <link href="/2018/06/04/nginx-%E7%B3%BB%E7%B5%B1%E8%AE%8A%E6%95%B8-%E5%8C%85%E5%90%AB-html-%E8%B7%AF%E5%BE%91/"/>
      <url>/2018/06/04/nginx-%E7%B3%BB%E7%B5%B1%E8%AE%8A%E6%95%B8-%E5%8C%85%E5%90%AB-html-%E8%B7%AF%E5%BE%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br></pre></td></tr></table></figure><a id="more"></a><p>你會看到以下變數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/Cellar/nginx/1.13.9 </span><br><span class="line">--sbin-path=/usr/local/Cellar/nginx/1.13.9/bin/nginx </span><br><span class="line">--with-cc-opt=&apos;-I/usr/local/opt/pcre/include -I/usr/local/opt/openssl/include&apos; </span><br><span class="line">--with-ld-opt=&apos;-L/usr/local/opt/pcre/lib -L/usr/local/opt/openssl/lib&apos; </span><br><span class="line">--conf-path=/usr/local/etc/nginx/nginx.conf </span><br><span class="line">--pid-path=/usr/local/var/run/nginx.pid </span><br><span class="line">--lock-path=/usr/local/var/run/nginx.lock </span><br><span class="line">--http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp </span><br><span class="line">--http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp </span><br><span class="line">--http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp </span><br><span class="line">--http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp </span><br><span class="line">--http-log-path=/usr/local/var/log/nginx/access.log </span><br><span class="line">--error-log-path=/usr/local/var/log/nginx/error.log </span><br><span class="line">--with-debug </span><br><span class="line">--with-http_addition_module </span><br><span class="line">--with-http_auth_request_module </span><br><span class="line">--with-http_dav_module </span><br><span class="line">--with-http_degradation_module </span><br><span class="line">--with-http_flv_module </span><br><span class="line">--with-http_gunzip_module </span><br><span class="line">--with-http_gzip_static_module </span><br><span class="line">--with-http_mp4_module </span><br><span class="line">--with-http_random_index_module </span><br><span class="line">--with-http_realip_module </span><br><span class="line">--with-http_secure_link_module </span><br><span class="line">--with-http_slice_module </span><br><span class="line">--with-http_ssl_module </span><br><span class="line">--with-http_stub_status_module </span><br><span class="line">--with-http_sub_module </span><br><span class="line">--with-http_v2_module </span><br><span class="line">--with-ipv6 </span><br><span class="line">--with-mail </span><br><span class="line">--with-mail_ssl_module </span><br><span class="line">--with-pcre </span><br><span class="line">--with-pcre-jit </span><br><span class="line">--with-stream </span><br><span class="line">--with-stream_realip_module </span><br><span class="line">--with-stream_ssl_module </span><br><span class="line">--with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/Cellar/nginx/1.13.9</span><br></pre></td></tr></table></figure><p>這一個就是電腦內 nginx 預設放 html 的位置</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx 重啟失敗</title>
      <link href="/2018/06/04/nginx-%E9%87%8D%E5%95%9F%E5%A4%B1%E6%95%97/"/>
      <url>/2018/06/04/nginx-%E9%87%8D%E5%95%9F%E5%A4%B1%E6%95%97/</url>
      
        <content type="html"><![CDATA[<p>在 mac 執行 nginx 重啟時</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -s reopen</span><br></pre></td></tr></table></figure><p>出現錯誤：nginx: [error] invalid PID number “” in “/usr/local/var/run/nginx.pid”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -c /usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>重新指定 nginx configuration(設定檔)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>重新讀取 nginx 的設定</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.csdn.net/github_33644920/article/details/51733436" target="_blank" rel="noopener">极客世杰: nginx: [error] invalid PID number “” in “/usr/local/var/run/nginx/nginx.pid”</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 增加一名 user 到管理者權限</title>
      <link href="/2018/06/04/ubuntu-%E5%A2%9E%E5%8A%A0%E4%B8%80%E5%90%8D-user-%E5%88%B0%E7%AE%A1%E7%90%86%E8%80%85%E6%AC%8A%E9%99%90/"/>
      <url>/2018/06/04/ubuntu-%E5%A2%9E%E5%8A%A0%E4%B8%80%E5%90%8D-user-%E5%88%B0%E7%AE%A1%E7%90%86%E8%80%85%E6%AC%8A%E9%99%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser &lt;username&gt; sudo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 為一名使用者增加資料夾的權限</title>
      <link href="/2018/06/04/ubuntu-%E7%82%BA%E4%B8%80%E5%90%8D%E4%BD%BF%E7%94%A8%E8%80%85%E5%A2%9E%E5%8A%A0%E8%B3%87%E6%96%99%E5%A4%BE%E7%9A%84%E6%AC%8A%E9%99%90/"/>
      <url>/2018/06/04/ubuntu-%E7%82%BA%E4%B8%80%E5%90%8D%E4%BD%BF%E7%94%A8%E8%80%85%E5%A2%9E%E5%8A%A0%E8%B3%87%E6%96%99%E5%A4%BE%E7%9A%84%E6%AC%8A%E9%99%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R testuser /home/testuser</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Vultr 架設 VPN</title>
      <link href="/2018/06/02/%E4%BD%BF%E7%94%A8-Vultr-%E6%9E%B6%E8%A8%AD-VPN/"/>
      <url>/2018/06/02/%E4%BD%BF%E7%94%A8-Vultr-%E6%9E%B6%E8%A8%AD-VPN/</url>
      
        <content type="html"><![CDATA[<p>一直想架 VPN 很久了，可是之前找文章都覺得很麻煩，最近剛好在 Vultr 試用他們的主機，剛好看到他的 App 有提供 OpenVPN 想說就試用一下，架設還蠻簡單的。</p><a id="more"></a><hr><h2 id="選擇-OS-和-安裝-OpenVPN"><a href="#選擇-OS-和-安裝-OpenVPN" class="headerlink" title="選擇 OS 和 安裝 OpenVPN"></a>選擇 OS 和 安裝 OpenVPN</h2><p>切換到 Application 的頁籤，選擇 OpenVPN</p><p><strong>PS. 注意，選了 Application 就不要再去選 OS 了，因為選擇了 Application 就等於選了他指定的 OS</strong></p><p><img src="/blog/images/vultr_app_openvpn.png" alt="Vultr App select OpenVPN"></p><hr><h2 id="完成剩下的選擇並部署"><a href="#完成剩下的選擇並部署" class="headerlink" title="完成剩下的選擇並部署"></a>完成剩下的選擇並部署</h2><p>選擇你要的硬體規格，以及是否需要其他的功能，這邊建議不用 IPv6，因為在官方文件中好像有提到尚未支援 IPv6。</p><p>接下來就按下右下角的 Deploy Now 就可以了。</p><hr><h2 id="設定-VPS-server-的使用者資訊"><a href="#設定-VPS-server-的使用者資訊" class="headerlink" title="設定 VPS server 的使用者資訊"></a>設定 VPS server 的使用者資訊</h2><h3 id="使用-ssh-登入-root"><a href="#使用-ssh-登入-root" class="headerlink" title="使用 ssh 登入 root"></a>使用 ssh 登入 root</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;your-ip&gt;</span><br></pre></td></tr></table></figure><p>密碼可以在 Vultr 的 Server Information 頁找到。</p><p>登入到 Vultr 顯示你的 VPS server 清單頁，點擊你剛剛建立的機器，就會進入到 Server Information 頁。</p><p><img src="/blog/images/vultr-looking-for-root-password.png" alt="vultr looking for root password"></p><h3 id="改變你的-root-使用這密碼"><a href="#改變你的-root-使用這密碼" class="headerlink" title="改變你的 root 使用這密碼"></a>改變你的 root 使用這密碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>再輸入兩次密碼做確認，就更改完成了</p><h3 id="增加一名-user"><a href="#增加一名-user" class="headerlink" title="增加一名 user"></a>增加一名 user</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd &lt;your-new-user-name&gt;</span><br></pre></td></tr></table></figure><h3 id="更改剛剛建立的-user-登入密碼"><a href="#更改剛剛建立的-user-登入密碼" class="headerlink" title="更改剛剛建立的 user 登入密碼"></a>更改剛剛建立的 user 登入密碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd &lt;your-new-user-name&gt;</span><br></pre></td></tr></table></figure><p>再輸入兩次要變更的密碼，就更改完成了</p><hr><h2 id="打開-OpenVPN-頁面進行檔案下載"><a href="#打開-OpenVPN-頁面進行檔案下載" class="headerlink" title="打開 OpenVPN 頁面進行檔案下載"></a>打開 OpenVPN 頁面進行檔案下載</h2><p>你應該會在進入到 Vultr Server Information 頁面看到以下內容</p><p><img src="/blog/images/vultr_openvpn_infomation.png" alt="Vultr OpenVPN Infomation"></p><p>開一個新的瀏覽器頁面，在網址列輸入 <a href="https://your-ip" target="_blank" rel="noopener">https://your-ip</a></p><p>如果你跟我一樣是 mac，根據指令會開始下載 openVPN client 端的 dmg 安裝檔，點開進行安裝，就可以在 mac 上方的工具列看到圖示</p><p><img src="/blog/images/mac_openvpn_icon.png" alt="mac openvpn icon"></p><p>你可以使用 Vultr 預設的 openVpn 使用者身份登入</p><hr><h2 id="為-OpenVpn-增加使用者"><a href="#為-OpenVpn-增加使用者" class="headerlink" title="為 OpenVpn 增加使用者"></a>為 OpenVpn 增加使用者</h2><p>開一個新的瀏覽器頁面，在網址列輸入 <a href="https://your-ip/admin/" target="_blank" rel="noopener">https://your-ip/admin/</a></p><p>你就會看到一個登入的表單，輸入 Vultr 預設的 openVpn 使用者身份</p><p>登入成功後，在左邊導覽列找到 User Management - User Permissions 連結</p><p>在右邊使用者清單增加剛剛使用 useradd 增加的 user</p><p><strong>PS. Vultr 的 OpenVPN 的 user 好像是參考到 Vultr VPS server 的 user，所以不必再設定密碼</strong></p><p>然後按下 Save Settgins 就完成了</p><hr><h2 id="連到-VPN"><a href="#連到-VPN" class="headerlink" title="連到 VPN"></a>連到 VPN</h2><p>在 mac 上方的 icon 找到 OpenVPN 的 icon</p><p>選擇 connect to your ip </p><p>輸入使用者帳密，成功的話，會看到成功訊息</p><hr><h2 id="測試-VPN-是否正常運作"><a href="#測試-VPN-是否正常運作" class="headerlink" title="測試 VPN 是否正常運作"></a>測試 VPN 是否正常運作</h2><p>連到 <a href="https://whatismyipaddress.com/zh-cn/index" target="_blank" rel="noopener">查看自己 IP 的網站</a></p><p>看自己的 IP 是不是已經變成 Vultr VPS 的 IP 了</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.vultr.com/docs/one-click-openvpn" target="_blank" rel="noopener">Vultr OpenVPN Doc</a></p><p><a href="https://www.cyberciti.biz/faq/linux-set-change-password-how-to/" target="_blank" rel="noopener">Linux Set or Change User Password</a></p><p><a href="https://www.cyberciti.biz/faq/linux-list-users-command/" target="_blank" rel="noopener">Linux List All Users In The System</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vultr </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署 nodejs 後端程式 - Vultr 介紹</title>
      <link href="/2018/06/01/%E9%83%A8%E7%BD%B2-nodejs-%E5%BE%8C%E7%AB%AF%E7%A8%8B%E5%BC%8F-Vultr-%E4%BB%8B%E7%B4%B9/"/>
      <url>/2018/06/01/%E9%83%A8%E7%BD%B2-nodejs-%E5%BE%8C%E7%AB%AF%E7%A8%8B%E5%BC%8F-Vultr-%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<p>我用過的虛擬主機商有 AWS, Google Cloud Platform, 騰訊雲，不過都是用免費的優惠試用一下，用起來都覺得不錯，但是最後都是因為優惠結束，用的又不多，所以就沒有繼續使用了。文章最後再小小抱怨一下。</p><a id="more"></a><hr><p>原本是要使用 Godaddy 的架站主機做就好，可是便宜的主機都只支援 PHP，沒辦法另外安裝其他語言的環境，所以我就去找了其他 VPS (Virturl Private Server - 虛擬私人伺服器）服務，有興趣深入瞭解的人可以 Google VPS 就可以看到許多介紹，如果你的需求是<font color="#d9534f">希望開發環境不受限制的虛擬主機</font>，s你就可以考慮 VPS。</p><p>像是 Godaddy 為什麼架站主機那麼便宜，就是因為他限制你只能使用它規定的工具，像是只有 PHP 可以做開發，但是其實大多數需要的工具他也都包含了，像是：FTP, Mail Server, Wordpress 等工具，如果不是像我一樣挑食的話，那個也就夠了。</p><hr><h2 id="Godaddy-和-Vultr-價格上的比較"><a href="#Godaddy-和-Vultr-價格上的比較" class="headerlink" title="Godaddy 和 Vultr 價格上的比較"></a>Godaddy 和 Vultr 價格上的比較</h2><p><a href="https://tw.godaddy.com/hosting/vps-hosting?isc=gofhltw01&amp;currencytype=TWD&amp;slid=&amp;pgrid=46463503647&amp;ptaid=kwd-296914754384&amp;mkwid=sU39wqwPM_pcrid_260523076020_pkw_godaddy_pmt_e_pdv_c_&amp;gclid=CjwKCAjwur7YBRA_EiwASXqIHCh9If4ekNGfXnRW9PhyVLOL2UFL1xnM415xMzIlSSAQYFlUqGlW3xoC8OIQAvD_BwE" target="_blank" rel="noopener">GoDaddy Pricing</a></p><p><img src="/blog/images/godaddy-vps-pricing.png" alt="GoDaddy Pricing"></p><p><a href="https://www.vultr.com/pricing/" target="_blank" rel="noopener">Vultr Pricing</a></p><p><img src="/blog/images/vultr-vps-pricing.png" alt="Vultr Pricing"></p><p>因為我做出來的網站和 API Server 不需要很大的流量，所以我都是從最低價開始考慮，就這兩家比的話，我最後就選了 Vultr，因為硬體速度方面只參考了記憶體（內容 和 Memory)，容量不需要太多，頻寬其實 Vultr 也已經很夠用了，超過那個額度，硬體也應該先撐不住了。</p><p>其實還有許多家，可以 Google VPS 或者虛擬主機商，就有很多選擇。</p><hr><h2 id="最重要的是網速"><a href="#最重要的是網速" class="headerlink" title="最重要的是網速"></a>最重要的是網速</h2><p>影響速度的除了硬體之外，還有就是你主機的位置，像是如果在非洲，就 hmmm…，只記得之前打信長連不上時都被嗆：你非洲線喔！</p><p>每家主機商都有許多位置可供選擇，一般來說選離自己家最近的就好，像我就選的日本。</p><hr><h2 id="購買-Vultr-主機"><a href="#購買-Vultr-主機" class="headerlink" title="購買 Vultr 主機"></a>購買 Vultr 主機</h2><p>Step 1: 選擇國家/地點</p><p><img src="/blog/images/vultr-deploy-step1.png" alt="Vultr Deploy Step1"></p><p>你可以先使用 Vultr 提供的下載速度測試服務檢查適合自己的位置：<a href="https://www.vultr.com/faq/#downloadspeedtests" target="_blank" rel="noopener">連結</a></p><p>Step 2: 選擇作業系統</p><p><img src="/blog/images/vultr-deploy-step2.png" alt="Vultr Deploy Step2"></p><p>Step 3: 選擇 Server 的配置</p><p><img src="/blog/images/vultr-deploy-step3.png" alt="Vultr Deploy Step3"></p><p>Step 4: 選擇額外的需求</p><p>從 server 配置後的部分，我都沒有去做勾選，因為我都還用不到，其實之後要加，也是不難的。</p><p>最後跳到 Step 7</p><p>Step 7: 為自己的機器取個好記的名字</p><p>因為他不是希望你只買一台，現在開發大一點的服務，都是需要多台機器去分攤工作，所以做大了之後，多買幾個 VPS 去擴充也是很常見的。</p><p>Step 8: Deploy Now</p><p>右下角的 Deploy Now 點下去就會開始幫你啟動機器，等一下子就會好了。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://tw.godaddy.com/?isc=gofhltw01" target="_blank" rel="noopener">Godaddy</a></p><p><a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a></p><p><a href="https://www.inside.com.tw/2017/03/17/how-to-picking-the-right-web-hosting" target="_blank" rel="noopener">如何選擇好的主機商</a></p><hr><p>我自己在 Vultr 日本機器上弄完之後，一開始覺得速度好像有點慢，可是再回去開 Godaddy 的網站，hmm…，好多是比較快的ＸＤ</p><p>在中國的主機商架站絕對不是優先考量，如果你只是要透過 IP 連線是可以考慮，因為如果你要為中國境內的主機加上 Domain 管理，就會被警告要替網站做備案，有點小麻煩就沒弄了，所以問我我也不知道。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vultr </tag>
            
            <tag> Godaddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署 nodejs 後端程式到遠端伺服器</title>
      <link href="/2018/06/01/%E9%83%A8%E7%BD%B2-nodejs-%E5%89%8D%E5%BE%8C%E7%AB%AF%E7%A8%8B%E5%BC%8F%E5%88%B0%E9%81%A0%E7%AB%AF%E4%BC%BA%E6%9C%8D%E5%99%A8/"/>
      <url>/2018/06/01/%E9%83%A8%E7%BD%B2-nodejs-%E5%89%8D%E5%BE%8C%E7%AB%AF%E7%A8%8B%E5%BC%8F%E5%88%B0%E9%81%A0%E7%AB%AF%E4%BC%BA%E6%9C%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>雖然現在架站服務和工具很多，但是菜味重如我，還是偶爾會有一些東西常常忘記，我還可以從記憶中抓出關鍵字去 google，可是如果大腦乾淨如白紙，可能遇到問題就不知從何下手，或者連問題都不知道是什麼，那就只能放棄。</p><a id="more"></a><p>所以此篇純屬當作筆記，若是好運被人看到，歡迎鞭。</p><hr><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><ul><li><a href="#">Vultr 介紹</a></li><li><a href="#">準備一個 nodejs server 程式</a></li><li><a href="#">準備一個呼叫 server 的客戶端工具</a></li><li><a href="#">部署到 Vultr 的 VPS 上</a></li></ul><hr><h2 id="筆記重點"><a href="#筆記重點" class="headerlink" title="筆記重點"></a>筆記重點</h2><ul><li>知道一些虛擬主機商，不讓作品只在內網</li><li>nodejs 簡單實作 RestFul API</li><li>nodejs 部署到 remote server 的方式</li><li>nginx 讓 nodejs 前後端都使用相同的 domain name 和 port (埠)</li><li>linux 防火牆開通</li><li>測試 API 的工具 - Postman</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vultr </tag>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 從 5 升級到 6</title>
      <link href="/2018/05/26/Angular-%E5%BE%9E-5-%E5%8D%87%E7%B4%9A%E5%88%B0-6/"/>
      <url>/2018/05/26/Angular-%E5%BE%9E-5-%E5%8D%87%E7%B4%9A%E5%88%B0-6/</url>
      
        <content type="html"><![CDATA[<p>2018-05-03，Angular 已經更新到 6.0.0 摟，別急著更新，可能會爆掉的，像是 rxjs 也跟著更新了</p><p>（持續更新中文章…，因為我自己也還沒更新</p><a id="more"></a><hr><h2 id="Angualr-Update-Guide"><a href="#Angualr-Update-Guide" class="headerlink" title="Angualr Update Guide"></a>Angualr Update Guide</h2><p>angular 建立了一個網站，透過指定版本，就可以告訴你應該怎麼升級你的 Angular 專案</p><p><a href="https://update.angular.io/" target="_blank" rel="noopener">如何更新 Angular 的教學網站</a></p><hr><h2 id="Rxjs-5-到-6"><a href="#Rxjs-5-到-6" class="headerlink" title="Rxjs 5 到 6"></a>Rxjs 5 到 6</h2><p>請先看此文章的介紹，日後會有一篇文章的整理</p><p><a href="https://www.youtube.com/watch?v=X9fdpGthrXA" target="_blank" rel="noopener">Fix your RxJS 6 Imports &amp; Operators - What’s New in RxJS 6?</a></p><p>主要就是 import 的方式改變</p><p>還有增加 pipe 的用法，過去都是 Observable.map() 現在要改成 Observable.pipe(map())，多了一個 pipe，將過去的 operator 都寫在 pipe 內</p><hr><h2 id="Angular-Framework"><a href="#Angular-Framework" class="headerlink" title="Angular Framework"></a>Angular Framework</h2><hr><h2 id="Angular-Material"><a href="#Angular-Material" class="headerlink" title="Angular Material"></a>Angular Material</h2><p>因為我自己已經先使用 Primeface，功能上並沒有太大的差異，差異比較大的應該是 UI 的部分而已。</p><p>如果是剛開始接觸 Angular，可以自行選擇適合自己的 UI 風格</p><ul><li><p>bootstrap: <a href="https://www.npmjs.com/package/ngx-bootstrap" target="_blank" rel="noopener">npm</a> <a href="https://valor-software.com/ngx-bootstrap/" target="_blank" rel="noopener">demo</a></p></li><li><p>primeng: <a href="https://www.primefaces.org/primeng/#/" target="_blank" rel="noopener">npm</a> <a href="https://www.primefaces.org/primeng/#/" target="_blank" rel="noopener">demo</a></p></li><li><p>kendoUI: <a href="https://www.telerik.com/login/v2/kendo?ReturnUrl=https%3a%2f%2fwww.telerik.com%2fdownload-trial-file%2fv2%2fkendo-angular-ui#register" target="_blank" rel="noopener">官網</a> (我已放棄使用，因為需要帳號才能下載）</p></li><li><p>material: <a href="https://www.npmjs.com/package/@angular/material" target="_blank" rel="noopener">npm</a> <a href="https://material.angular.io/" target="_blank" rel="noopener">demo</a></p></li></ul><hr><h2 id="Angular-Cli"><a href="#Angular-Cli" class="headerlink" title="Angular Cli"></a>Angular Cli</h2><ul><li>暫時停用 ng eject</li></ul><p>因為不相容新的 angular setting json file (angular-cli.json 換成 angular.json)</p><p>eject 功能我也從來沒用過，如果要使用，可以使用 @<a href="mailto:angular/cli@1.7.4" target="_blank" rel="noopener">angular/cli@1.7.4</a></p><ul><li>增加 ng update</li></ul><p>用來更新 angular 專案下 npm 管理的套件，不用再自己輸入一長串 npm install 指令</p><p>使用說明可參照 <a href="https://github.com/angular/devkit/blob/master/docs/specifications/update.md" target="_blank" rel="noopener">官方說明</a></p><ul><li>增加 ng add </li></ul><p>我到目前也沒用過，說明就是增加套件到你的 angular 專案，應該僅限於增加 angular 的套件，如：@angular/pwa</p><ul><li>增加支援 PWA (Progressive Web App )</li></ul><p><a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/?hl=zh-tw" target="_blank" rel="noopener">Progressive Web App 介紹 - 你的首個 Progressive Web App</a></p><ul><li>取代 angular-cli.json</li></ul><p>angular.json 取代 angular-cli.json 成為新的 angular 專案的設定檔</p><p>angular.json 架構可參考 <a href="https://github.com/angular/angular-cli/wiki/angular-workspace" target="_blank" rel="noopener">官方說明</a></p><ul><li>編譯及建置的優化</li></ul><p>Webpakc 更新到 4</p><ul><li>在一個 Angular 專案支援多個應用</li></ul><p>我不知道跟一個資料夾下有多個 angular app 有什麼差異</p><p>增加 app 的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate application my-other-app</span><br></pre></td></tr></table></figure><p>運行指定 app 的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve my-other-app</span><br></pre></td></tr></table></figure><ul><li>支援開發自己的函式庫</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate library my-lib</span><br></pre></td></tr></table></figure><p>該函式庫會包含 component 和 service 各一個</p><p>PS. 我另外有做一個像是 typescript Date 物件的擴充 <a href="https://github.com/contemplator/typescript-extension" target="_blank" rel="noopener">Github - typescript extension</a></p><ul><li>Schematic Defaults 預設的設定 </li></ul><p>在 angular.json 的設定，可以是 root（全域） 設定，也可以根據 project 設定</p><p>另外也可以在 /.angular-config.json 檔案設定</p><ul><li>Smart Defaults 智能預設</li></ul><p>我在想是不是在執行 command line 指令時，通常都會透過 –args 這樣傳遞參數，透過 smart defaults</p><ul><li>Breaking changes</li></ul><p>沒有用過</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4" target="_blank" rel="noopener">Version 6 of Angular Now Available</a></p><p><a href="https://github.com/angular/angular/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Angular Framework Change Log</a></p><p><a href="https://github.com/angular/material2/blob/master/CHANGELOG.md" target="_blank" rel="noopener">Angular Material Change Log</a></p><p><a href="https://github.com/angular/angular-cli/releases" target="_blank" rel="noopener">Angular Cli Change Log</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> migration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>異步任務 async await 示範</title>
      <link href="/2018/05/26/%E7%95%B0%E6%AD%A5%E4%BB%BB%E5%8B%99-async-await/"/>
      <url>/2018/05/26/%E7%95%B0%E6%AD%A5%E4%BB%BB%E5%8B%99-async-await/</url>
      
        <content type="html"><![CDATA[<p>這篇僅作為自己的心得，因為自己常常不知道 Promise 怎麼寫…</p><a id="more"></a><p>先建立一個 function 是回傳 Promise 的</p><p>最簡單的就是使用 setTimeout 建立一個異步任務</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const doc = document.body;</span><br><span class="line"></span><br><span class="line">function wait(): Promise&lt;any&gt;&#123;</span><br><span class="line">    doc.innerHTML += &quot;&lt;p&gt;get in wait()&quot;;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            doc.innerHTML += &quot;&lt;p&gt;get in setTimeout()&quot;;</span><br><span class="line">            if (2 &gt; 3) &#123;</span><br><span class="line">                resolve(true);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                reject(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function foo() &#123;</span><br><span class="line">    doc.innerHTML += &quot;&lt;p&gt;call foo()&quot;;</span><br><span class="line">    let result;</span><br><span class="line">    try &#123;</span><br><span class="line">        result = await wait();</span><br><span class="line">        doc.innerHTML += &quot;&lt;p&gt;wait done, &quot; + result;</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        doc.innerHTML += &quot;&lt;p&gt;wait done, &quot; + error;</span><br><span class="line">        console.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>上面就是簡單的 Promise 異步函式，如果要使用 then() 或者 await 來取得一個異步函式的回傳，該異步函式就是用 return 一個 Promise 物件。</p><p>可以將以上程式碼貼到 typescript 官網的 <a href="https://www.typescriptlang.org/play/index.html" target="_blank" rel="noopener">Playground</a> 執行</p><hr><h2 id="拿掉-await-比較-執行順序"><a href="#拿掉-await-比較-執行順序" class="headerlink" title="拿掉 await 比較  執行順序"></a>拿掉 await 比較  執行順序</h2><p>如果是拿掉 await ，foo() 執行到 wait() 時就不會等 </p><hr><h2 id="修改-if-內的判斷，比較-resolve-和-reject-的流程"><a href="#修改-if-內的判斷，比較-resolve-和-reject-的流程" class="headerlink" title="修改 if() 內的判斷，比較 resolve 和 reject 的流程"></a>修改 if() 內的判斷，比較 resolve 和 reject 的流程</h2><p>如果  執行到 resolve 就會執行到 result = await wait();， result 將會有值</p><p>如果執行到 reject 就會執行到 catch(error)</p><hr><h2 id="Promise-物件說明"><a href="#Promise-物件說明" class="headerlink" title="Promise 物件說明"></a>Promise 物件說明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return Promise((resolve, reject) =&gt; &#123;...&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>resolve 成功的情況會回傳的結果</p></li><li><p>reject 失敗的情況會回傳的結果</p></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developers.google.com/web/fundamentals/primers/async-functions?hl=zh-tw" target="_blank" rel="noopener">異步函數 - 提高 Promise 的易用性</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用者程式碼片段 code snippet</title>
      <link href="/2018/05/26/%E4%BD%BF%E7%94%A8%E8%80%85%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5-code-snippet/"/>
      <url>/2018/05/26/%E4%BD%BF%E7%94%A8%E8%80%85%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5-code-snippet/</url>
      
        <content type="html"><![CDATA[<p>最近在試著做一個 nodejs 後端的 RestFul API，所以像是處理 res, req 的 function 很常用到，為了保持寫法一致，還有就是加速開發速度，只要使用一些關鍵字就可以快速寫玩一個 function。</p><a id="more"></a><hr><h2 id="簡單示範"><a href="#簡單示範" class="headerlink" title="簡單示範"></a>簡單示範</h2><p>在 VS Code 可以自定義程式碼片段，像是輸入關鍵字 ‘log’，就跑出自動完成的選項</p><p><img src="/blog/images/console-snippet-select.png" alt="自動完成選擇"></p><p>選擇到你要的選項後，就跑出更長的一段程式碼，像是這樣</p><p><img src="/blog/images/console-snippet-result.png" alt="自動完成結果"></p><hr><h2 id="使用-snippet-寫-RestFul-API-常用-function"><a href="#使用-snippet-寫-RestFul-API-常用-function" class="headerlink" title="使用 snippet 寫 RestFul API 常用 function"></a>使用 snippet 寫 RestFul API 常用 function</h2><p>我的 nodejs server api 程式碼長這樣子</p><p><img src="/blog/images/nodejs-restful-api.png" alt="nodejs restful api"></p><p>可以看到 function 參數和 function 裡面的 try…catch… 樣子差不多，應該說重複的地方很多，所以就想要透過 snippets 自動完成，所以就在 typescript 的使用者片段加入以下的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;http res&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &quot;httpres&quot;,</span><br><span class="line">    &quot;body&quot;: [</span><br><span class="line">        &quot;async $1(req: Request, res: Response) &#123;&quot;,</span><br><span class="line">        &quot;\ttry &#123;&quot;,</span><br><span class="line">        &quot;\t\t$2&quot;,</span><br><span class="line">        &quot;\t&#125; catch (error) &#123;&quot;,</span><br><span class="line">        &quot;\t\tres.json(error);&quot;,</span><br><span class="line">        &quot;\t&#125;&quot;,</span><br><span class="line">        &quot;&#125;&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;description&quot;: &quot;http request and response function&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只要輸入 httpres 就可以看到自動完成，選擇後的結果也可以隨時修改，儲存後就立馬生肖，非常好用。</p><p><img src="/blog/images/http-snippet-select.png" alt="http snippet select"></p><p><img src="/blog/images/http-snippet-result.png" alt="http snippet result"></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Creating your own snippets</a></p><p><a href="https://code.visualstudio.com/docs/languages/markdown" target="_blank" rel="noopener">Markdown and VS Code</a></p><p><a href="https://github.com/contemplator/express-typesript" target="_blank" rel="noopener">Nodejs + Express + Typescript + Decorator </a></p>]]></content>
      
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宣告變數 - @ 和 :=</title>
      <link href="/2018/04/15/%E5%AE%A3%E5%91%8A%E8%AE%8A%E6%95%B8-2/"/>
      <url>/2018/04/15/%E5%AE%A3%E5%91%8A%E8%AE%8A%E6%95%B8-2/</url>
      
        <content type="html"><![CDATA[<p>不知道有沒有發現前一篇參考來源的宣告變數有個點很奇怪，就是 declare 和 set 後面的變數名有點不一樣</p><a id="more"></a><hr><p>– declare @a 的盲點</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    DECLARE a INT DEFAULT 1;</span><br><span class="line">    </span><br><span class="line">    SET a=a+1;</span><br><span class="line">    SET @b=@b+1;</span><br><span class="line"></span><br><span class="line">    SELECT a,@b;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>declare 後面是 a</li><li>set @b 後面是 @b</li></ul><p>如果你和我一開始一樣認為 <em>‘@’</em> 只是習慣性加上去，代表這個名稱是給變數用的，你就會跟我一樣吃大虧。</p><p>如果你這樣寫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decalre @a = 1;</span><br></pre></td></tr></table></figure><p>你就只會讓這一段 sql 死在這裡…</p><p>根據 MySql 文件說，前面加上 @ 就代表他是 User defined variable 使用者定義變數，這變數就是可以在使用者離開之前都可以操作。</p><p>我猜錯誤的原因就是 @ 和 declare 的使用範圍衝突，所以就會一直噴錯。</p><hr><h2 id="和"><a href="#和" class="headerlink" title="= 和 :="></a>= 和 :=</h2><p>在某些 MySql 程式碼你可能會看到 := ，我第一次看到也很納悶，看過 +=, -=, *=, /= 知道這是簡化的四則運算寫法，但就是沒有看過 :=。</p><p>一樣在 MySql User-defined Variable 章節也有介紹，’=’ 就是 set 將等號右邊的值，指定到等好左邊的變數。</p><p>但是如果等號右邊不是一個值，而是一個直述句(expression)，像是 @a+@b+@c 這樣的加法，’=’ 就會變成 ‘:=’。</p><p>簡單來分別就是看等號右邊是值，還是直述句。</p><hr><h2 id="將-select-存到變數內"><a href="#將-select-存到變數內" class="headerlink" title="將 select 存到變數內"></a>將 select 存到變數內</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用 :="></a>使用 :=</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @a = 1;</span><br><span class="line">set @b = 2;</span><br><span class="line">select @a:=@b;</span><br></pre></td></tr></table></figure><h3 id="使用-into"><a href="#使用-into" class="headerlink" title="使用 into"></a>使用 into</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @c = 1;</span><br><span class="line">select 3 into @c;</span><br><span class="line">select @3;</span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><p><a href="http://www.jb51.net/article/99856.htm" target="_blank" rel="noopener">浅谈MySQL存储过程中declare和set定义变量的区别</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/user-variables.html" target="_blank" rel="noopener">User-Defined Variables</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宣告變數 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宣告變數 - declare 和 set</title>
      <link href="/2018/04/15/%E5%AE%A3%E5%91%8A%E8%AE%8A%E6%95%B8/"/>
      <url>/2018/04/15/%E5%AE%A3%E5%91%8A%E8%AE%8A%E6%95%B8/</url>
      
        <content type="html"><![CDATA[<p>原本都是在 MSSQL 寫預存程序，都沒有遇到什麼問題，不知道只是換成在 MySql 寫就一直依靠 Google 大神…</p><a id="more"></a><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare @num int default 0;</span><br><span class="line">set @num = 1;</span><br><span class="line">select @num;</span><br></pre></td></tr></table></figure><p>我期望會得到 1 這個結果。</p><p>我沒有嗑過任何有關 MySql 的文件直覺就是覺得這應該就是宣告變數的一般寫法，可是不知道為什麼卻一直遇到問題，後來一直亂試，發現把 declare 那一行拿掉就可以，但是還是不懂，所以就開始請教百度大神（因為現在人在大陸）和 MySql 的文件。發現原來宣告變數有這麼多眉眉角角…</p><hr><h2 id="declare-只能在-begin-和-end-之間"><a href="#declare-只能在-begin-和-end-之間" class="headerlink" title="declare 只能在 begin 和 end 之間"></a>declare 只能在 begin 和 end 之間</h2><p>參考來源：<a href="http://www.jb51.net/article/99856.htm" target="_blank" rel="noopener">http://www.jb51.net/article/99856.htm</a></p><p>一般來說，如果是寫 function 或 procedure 使用 declare 是沒有問題的，因為應該都會在 begin 和 end 之間寫。</p><p>但會有另外一個問題，後面會說到，一個個慢慢來。</p><h2 id="set-的用法"><a href="#set-的用法" class="headerlink" title="set 的用法"></a>set 的用法</h2><p>在 MySql 裡面這樣寫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set @a = 1;</span><br><span class="line">select @a;</span><br></pre></td></tr></table></figure><p>你會得到 1</p><p>繼續輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@a = @a + 1;</span><br><span class="line">select @a;</span><br></pre></td></tr></table></figure><p>你會得到 2</p><p>@a 這個變數值即使在直述句 (expression) 執行完畢仍會記憶起來，在 MySql 的文件裡稱 @a 為 user-defined variable 使用者定義變數，在百度的搜尋結果，他們又稱 sesison variable 會話變數，我覺得會話變數比較貼切。</p><p>因為如果你使用 exit 離開 MySql，之後再重新登入 MySql (可以使用同個帳戶)，再次執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@a = @a + 1;</span><br><span class="line">select @a;</span><br></pre></td></tr></table></figure><p>你會得到 Null 值，因為 @a 原本的值已經被遺忘了，變成沒有宣告過的 Null，Null + 1 還是 Null</p><hr><h2 id="declare-和-set-的差異"><a href="#declare-和-set-的差異" class="headerlink" title="declare 和 set 的差異"></a>declare 和 set 的差異</h2><p>根據百度的搜尋結果得知，</p><ul><li>declare 的限制是要在 begin 和 end 之間使用。</li><li>set 所宣告的變數會被記憶道使用者離開</li></ul><p>因此可以得知他們變數的 scope field 可以使用的區域，defalre 就像是在 function 內宣告的變數，只有 function 使用才會符合一般邏輯，否則就會出現錯誤，或者不如自己的預期；set 所宣告的變數，即使在 function 內宣告，可是離開了 function 操作仍是被允許的，所以要小心會不會和其他 function 或 procedure 命名衝突，導致有非預期的變化。</p><hr><p>參考資料：</p><p><a href="http://www.jb51.net/article/99856.htm" target="_blank" rel="noopener">浅谈MySQL存储过程中declare和set定义变量的区别</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/user-variables.html" target="_blank" rel="noopener">User-Defined Variables</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宣告變數 </tag>
            
            <tag> declare variable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firebase Query in Angular</title>
      <link href="/2018/03/19/Firebase-Query-in-Angular/"/>
      <url>/2018/03/19/Firebase-Query-in-Angular/</url>
      
        <content type="html"><![CDATA[<p>最近在試著用 ionic 3 寫 Mobile App，因為還是要有資料庫，所以就決定使用 Firebase 當作資料庫，因為是 NoSql 不像是之前操作 MySql，所以作法搞了很久才搞懂。</p><a id="more"></a><hr><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>因為 angular service 的機制，所以在 app.module 去初始化你的 firebaseApp，並且加到 provides 就可以在專案所有地方使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AngularFireDatabaseModule, AngularFireDatabase &#125; from &apos;angularfire2/database&apos;;</span><br><span class="line">import &#123; AngularFireAuthModule &#125; from &apos;angularfire2/auth&apos;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">const firebaseConfig = &#123;</span><br><span class="line">  apiKey: &quot;...&quot;,</span><br><span class="line">  authDomain: &quot;...&quot;,</span><br><span class="line">  databaseURL: &quot;...&quot;,</span><br><span class="line">  projectId: &quot;...&quot;,</span><br><span class="line">  storageBucket: &quot;...&quot;,</span><br><span class="line">  messagingSenderId: &quot;...&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  ...</span><br><span class="line">  imports: [</span><br><span class="line">    ...</span><br><span class="line">    AngularFireModule.initializeApp(firebaseConfig),</span><br><span class="line">    AngularFireDatabaseModule,</span><br><span class="line">    AngularFireAuthModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    ...</span><br><span class="line">    AngularFireDatabase</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p><img src="/blog/images/firebase app config.png" alt="firebase app config"><br>可以到 firebase 指定的專案看 project overview，選擇右邊畫面的”新增其他應用程式”，選擇自己的開發環境就會顯示你 firebase 的 config 資料</p><hr><h2 id="valueChanges"><a href="#valueChanges" class="headerlink" title="valueChanges()"></a>valueChanges()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AngularFireDatabase &#125; from &apos;angularfire2/database&apos;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export class ChartPage implements OnInit &#123;</span><br><span class="line">  constructor(</span><br><span class="line">    private db: AngularFireDatabase</span><br><span class="line">  ) &#123; </span><br><span class="line">    db.list(&apos;record&apos;).valueChanges().subscribe(res=&gt;&#123;</span><br><span class="line">      console.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>valueChanges() 比較簡單理解，因為 firebase 的 database 是 realtime database，根據我自己的理解，他是即時儲存和改變的，像是如果同樣一個 db 有其他裝置儲存資料，其實這一個 ChartPage 這邊的 valueChanges() 也會在被觸發一次，因為 db 裡面的資料改變了，可以不經過麻煩的處理，也可以做到像是聊天的功能。</p><p>此外，因為是在 angular 做，在處理資料和異步任務，經常使用 rxjs 的 observable ，所以要接著使用 subscribe (訂閱) 才會真的觸發和取得資料。<br>res 就是取得的資料</p><hr><h2 id="snapshotChanges"><a href="#snapshotChanges" class="headerlink" title="snapshotChanges()"></a>snapshotChanges()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AngularFireDatabase &#125; from &apos;angularfire2/database&apos;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export class ChartPage implements OnInit &#123;</span><br><span class="line">  constructor(</span><br><span class="line">    private db: AngularFireDatabase</span><br><span class="line">  ) &#123; </span><br><span class="line">    db.list(&apos;record&apos;).snapshotChanges().subscribe(res=&gt;&#123;</span><br><span class="line">      this.records = res.map(item =&gt; &#123;</span><br><span class="line">        let data = item.payload.val();</span><br><span class="line">        data.key = item.key;</span><br><span class="line">        return data;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>snapshotChanges() 可以把它想成 valueChanges() 的進階版，因為我是實作到一個功能時才知道要用這一個，valueChanges() 是單純取得資料，可是把資料都倒出來看，會發現他沒有給你 firebase 每筆資料都會有的 key。如果我要修改過去資料，就必須要有 key。</p><p>snapshotChanges() 的 res 會帶有 key，還有帶有資料的 payload，這裡我用 Array.map() 整理成自己想要的資料</p><hr><h2 id="query-with-ref"><a href="#query-with-ref" class="headerlink" title="query with ref()"></a>query with ref()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AngularFireDatabase &#125; from &apos;angularfire2/database&apos;;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export class ChartPage implements OnInit &#123;</span><br><span class="line">  constructor(</span><br><span class="line">    private db: AngularFireDatabase</span><br><span class="line">  ) &#123; </span><br><span class="line">    let records = this.db.database.ref(&apos;record&apos;);</span><br><span class="line">    records.orderByChild(&apos;datetime&apos;).startAt(startDate).endAt(endDate).on(&apos;value&apos;, (dataSnapshot)=&gt;&#123;</span><br><span class="line">      let data = dataSnapshot.toJSON();</span><br><span class="line">      let arr = [];</span><br><span class="line">      for(let key of Object.keys(data))&#123;</span><br><span class="line">        arr.push(data[key]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>valueChanges() 和 snapshotChanges() 都是將 db 所有資料取出來，如果我想要讓 firebase 幫我做有條件的篩選，用這兩者的方式就不行，所以就要找出類似執行 sql 的方式。</p><p>this.db.database.ref(‘collection’) 類似我要查詢哪一張資料表，在 nosql 通常是在 collection</p><p>.orderByChild(‘property’) 我的理解和之前 mysql 會接在 select 最後的 orderBy 意思不一樣，他不是排序的意思，我覺得比較像是 where column = ‘something’ 的 column，後面的 equalTo() 或 startAt() 都是根據 orderByChild(‘property’) 裡面寫的資料屬性(property) 去比較。</p><p>startAt() 和 endAt() 就像是 between 得用法，當然可以單獨使用，就會像是 &gt;= 或者 &lt;=，因為我是要找出一段時間內的資料，所以才這樣用</p><p>後面的處理是因為 .ref() 的查詢出來的結果，不管是經過 .toJson() 還是 .val() 的方式，他仍是 JSON Obejct 的結果，不是 Array，所以不好使用，所以我又再額外處理</p><hr><h2 id="比較-valueChanges-和-ref-的-query"><a href="#比較-valueChanges-和-ref-的-query" class="headerlink" title="比較 valueChanges() 和 ref() 的 query"></a>比較 valueChanges() 和 ref() 的 query</h2><p>我是使用 console.time() 和 console.timeEnd() 的方式比較這兩種方式回傳時間的差異，經過實測，就是 ref() 的查詢都是比較快的，儘管我的查詢是所有資料取出來，ref() 一樣比較快，代表如果不需要即時的效果，建議都是使用 ref() 的查詢。</p><p><img src="/blog/images/valueChanges 和 ref 的查詢比較.png" alt="valueChanges 和 ref 的查詢比較"></p>]]></content>
      
      
      <categories>
          
          <category> Firebase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> Ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 合併其他分支上的 commit</title>
      <link href="/2018/02/13/Git-%E5%90%88%E4%BD%B5%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84-commit/"/>
      <url>/2018/02/13/Git-%E5%90%88%E4%BD%B5%E5%85%B6%E4%BB%96%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84-commit/</url>
      
        <content type="html"><![CDATA[<p>不是用 merge，是用 <font color="#d9534f">cherry-pick</font></p><a id="more"></a><h2 id="情境說明"><a href="#情境說明" class="headerlink" title="情境說明"></a>情境說明</h2><p>我主要都是在 dev 分支上開發，因為有個功能不確定要不要加入，所以另開了一個分支 issue-9 處理這個問題，結果在處理問題時發現有個問題蠻嚴重的，但是已經 commit 到 issue-9 這個分支上，我需要在 dev 也適用這個更動，但是其他修改不要 merge 回去 dev。</p><h2 id="使用-git-cherry-pick"><a href="#使用-git-cherry-pick" class="headerlink" title="使用 git cherry-pick"></a>使用 git cherry-pick</h2><p>先在 issue-9 上找到我要合併到 dev 的那個 commit 的 sha1 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout issue-9</span><br><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>PS. 輸入 q 即可以離開</p><p>假使我要的 commit 的 sha1 前六碼是 5e9eeb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git cherry-pick 5e9eeb</span><br></pre></td></tr></table></figure><p>這樣子就完成了，如果有衝突，和 merge 一樣手動變更吧！</p><hr><p>參考資料：</p><p><a href="https://www.jianshu.com/p/ed3cc84b48cb" target="_blank" rel="noopener">Git合并特定Commits 到另一个分支</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cherry-pick </tag>
            
            <tag> merge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 使用 JSON 當作預存程序參數</title>
      <link href="/2018/02/11/MySql-%E4%BD%BF%E7%94%A8-Json-%E7%95%B6%E4%BD%9C%E9%A0%90%E5%AD%98%E7%A8%8B%E5%BA%8F%E5%8F%83%E6%95%B8/"/>
      <url>/2018/02/11/MySql-%E4%BD%BF%E7%94%A8-Json-%E7%95%B6%E4%BD%9C%E9%A0%90%E5%AD%98%E7%A8%8B%E5%BA%8F%E5%8F%83%E6%95%B8/</url>
      
        <content type="html"><![CDATA[<p>如果你像我一樣在 Rest API 不想要每個 controller 都個別指定需要什麼參數，想要資料傳進來直接當作預存程序的參數整包傳入，可以把預存程序改成接受 JSON 格式的資料。</p><a id="more"></a><hr><p>上一篇我已經介紹過在 MySql 怎麼寫預存程序：<a href="/blog/2018/02/11/Mysql-Procedure-預存程序/">MySql Procedure 預存程序</a></p><p>首先你要檢查你的 MySql 版本是否已經在 5.7 以上，像我的就是 5.7.16，根據官方說法，已經開始支援部分 JSON 的 function，為什麼是部分可以看官方 API 文件。<a href="https://dev.mysql.com/doc/refman/5.7/en/json-function-reference.html" target="_blank" rel="noopener">官方 API</a></p><hr><p>先直接上 Sample Code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists jsonParams;</span><br><span class="line">delimiter #</span><br><span class="line">create procedure jsonParams (</span><br><span class="line">params JSON </span><br><span class="line">)</span><br><span class="line">begin</span><br><span class="line">    declare date varchar(10) default &quot;&quot;; </span><br><span class="line">    declare keyword varchar(10) default &quot;&quot;;</span><br><span class="line">    declare num int unsigned default 0;</span><br><span class="line">    </span><br><span class="line">    set date = JSON_EXTRACT(params, &apos;$.date&apos;);</span><br><span class="line">    set keyword = JSON_EXTRACT(params, &apos;$.keyword&apos;);</span><br><span class="line">    set num = JSON_EXTRACT(params, &apos;$.order&apos;);</span><br><span class="line"></span><br><span class="line">select date, keyword, num;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">call jsonParams</span><br><span class="line">(&apos;&#123;&quot;date&quot;: &quot;2018-02-09&quot;, &quot;keyword&quot;: &quot;mysql&quot;, &quot;order&quot;: 1&#125;&apos;);</span><br></pre></td></tr></table></figure><p>上面的 sql 一樣可以在 MySql 執行。</p><hr><h2 id="指定傳入參數為-JSON-資料"><a href="#指定傳入參數為-JSON-資料" class="headerlink" title="指定傳入參數為 JSON 資料"></a>指定傳入參數為 JSON 資料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create procedure jsonParams (</span><br><span class="line">params JSON </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>將參數格式定義為 JSON 就好。</p><p>有了 JSON 格式的資料，你應該不需要第二個參數，只是應該，你應該還是要視情況去設定你的傳入參數的方式。</p><hr><h2 id="取得-JSON-參數內的資料"><a href="#取得-JSON-參數內的資料" class="headerlink" title="取得 JSON 參數內的資料"></a>取得 JSON 參數內的資料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare keyword varchar(10) default &quot;&quot;;</span><br><span class="line">set keyword = JSON_EXTRACT(params, &apos;$.keyword&apos;);</span><br></pre></td></tr></table></figure><p>先用 declare 宣告一個變數的存在，你可以給他 default 預設值，也可以不要，重要的是一樣要<font color="#d9534f">定義資料格式</font><br>然後再使用 set 方式將 JSON 物件內的資料指定到變數內，<font color="#d9534f">記得要加單引號在第二個參數</font>。</p><p>JSON_EXTRACT() 就是將 JSON 物件資料取出的 function</p><h2 id="資料都有用雙引號包著怎麼辦？"><a href="#資料都有用雙引號包著怎麼辦？" class="headerlink" title="資料都有用雙引號包著怎麼辦？"></a>資料都有用雙引號包著怎麼辦？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare date varchar(12) default &quot;&quot;; </span><br><span class="line">set date = JSON_EXTRACT(params, &apos;$.date&apos;);</span><br></pre></td></tr></table></figure><p>如果你在 JSON 物件內塞入一個日期字串，想要在 sql query 裡面當作 where 的日期比對條件，可是不知道為什麼總是比對錯誤。</p><p>你會發現 JSON_EXTRACT 出來的日期資料 varchar(10) 完全裝不下，至少要 varchar(12)。</p><p>看了官方 API 之後發現還有 JSON_UNQUOTE() 這個函式可以用，他是用來將雙引號給拿掉。</p><p>那什麼情況會遇到需要把雙引號拿掉？</p><p>我目前只有在要比對日期時。</p><p>PS. 原本以為是 JSON_EXTRACT() 拿出來都會加上雙引號，像是可能也會把數字給轉成字串，但是好像數字進去，就是數字出來。</p><p>所以改成下面這樣子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare date varchar(10) default &quot;&quot;; </span><br><span class="line">set date = JSON_UNQUOTE(JSON_EXTRACT(params, &apos;$.date&apos;));</span><br></pre></td></tr></table></figure><p>你在 select 結果就可以看到差異，如果你要比對日期欄位的資料時也不會比對不成功了。</p><p>PS. 原本要宣告 order 或 index 時都會遇到問題，因為 index 和 order 都是 sql 的保留字。（但是不知道為什麼 date 就沒問題）</p><hr><h2 id="傳入-JSON-資料"><a href="#傳入-JSON-資料" class="headerlink" title="傳入 JSON 資料"></a>傳入 JSON 資料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call jsonParams</span><br><span class="line">(&apos;&#123;&quot;date&quot;: &quot;2018-02-09&quot;, &quot;keyword&quot;: &quot;mysql&quot;, &quot;order&quot;: 1&#125;&apos;);</span><br></pre></td></tr></table></figure><p>括號內還是傳入字串格式，只是這個字串內是 JSON 的格式。</p><p>如果你像我一樣在 Nodejs 想要這樣傳入就會有問題：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;jsonParams&apos;;</span><br><span class="line">let data = &#123;&quot;date&quot;: &quot;2018-02-09&quot;, &quot;keyword&quot;: &quot;mysql&quot;, &quot;order&quot;: 1&#125;;</span><br><span class="line"></span><br><span class="line">this.db.query(`call $&#123;name&#125;(&apos;$&#123;data)&apos;);`, (error, rows, fields) =&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><p>實際的 query 會變成 call jsonParams(‘Object [object]’)</p><p>要加上 JSON.stringify() 轉成字串格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let name = &apos;jsonParams&apos;;</span><br><span class="line">let data = &#123;&quot;date&quot;: &quot;2018-02-09&quot;, &quot;keyword&quot;: &quot;mysql&quot;, &quot;order&quot;: 1&#125;;</span><br><span class="line"></span><br><span class="line">this.db.query(`call $&#123;name&#125;(&apos;$&#123;JSON.stringify(data)&#125;&apos;);`, (error, rows, fields) =&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><hr><p>參考資料：</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/json-function-reference.html" target="_blank" rel="noopener">官方 API</a><br><a href="http://www.jonathanlevin.co.uk/2016/12/json-and-mysql-stored-procedures.html" target="_blank" rel="noopener">json-and-mysql-stored-procedures</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql Procedure 預存程序</title>
      <link href="/2018/02/11/Mysql-Procedure-%E9%A0%90%E5%AD%98%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/02/11/Mysql-Procedure-%E9%A0%90%E5%AD%98%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>SQL Procedure 就是把 SQL Query 的邏輯寫在 DB 裡面，要使用時直接 call procedure 的名稱就好，視情況丟參數進去</p><a id="more"></a><hr><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>先看簡單的 Procedure 範例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists test;</span><br><span class="line">delimiter #</span><br><span class="line">create procedure test ()</span><br><span class="line">begin</span><br><span class="line">    select 1+7;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">call test();</span><br></pre></td></tr></table></figure><p>以上的 SQL 可以貼到你的 Mysql DB 內測試，你應該會看到結果是 8;</p><hr><h3 id="判斷是否存在"><a href="#判斷是否存在" class="headerlink" title="判斷是否存在"></a>判斷是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists test;</span><br></pre></td></tr></table></figure><p>這是在建立 procedure 時判斷同名稱的 procedure 是否存在，有時不建議你加入這個判斷，萬一如果已經存在了同名稱的 procedure，但是兩個邏輯完全不一樣，你應該另外命名，而不是直接蓋掉</p><p>PS. 所以你可以不寫這一行的判斷，讓系統自己告知你這個 Procedure 是否已經有同名的存在</p><hr><h3 id="切換分隔符號"><a href="#切換分隔符號" class="headerlink" title="切換分隔符號"></a>切換分隔符號</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delimiter #</span><br><span class="line">...</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>在寫 Mysql Procedure 時一定要加入這一行的邏輯，意思就是要將分隔符號切換成分號 “;” 之外的符號，建議就是不容易和其他符號意義衝突的，不然你直接寫 Procedure 會直接一直收到拼法錯誤。</p><p>PS. 最後記得要再改回去分號 “;”</p><hr><h3 id="開始寫邏輯"><a href="#開始寫邏輯" class="headerlink" title="開始寫邏輯"></a>開始寫邏輯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">    statement...</span><br><span class="line">end#</span><br></pre></td></tr></table></figure><p>begin 和 end# 中間就是你的 sql 邏輯</p><hr><h3 id="使用-Procedure"><a href="#使用-Procedure" class="headerlink" title="使用 Procedure"></a>使用 Procedure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call test();</span><br></pre></td></tr></table></figure><p>這是呼叫 Procedure 的方式，就像是 call function 一樣。</p><hr><h2 id="加入參數"><a href="#加入參數" class="headerlink" title="加入參數"></a>加入參數</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists getParams;</span><br><span class="line">delimiter #</span><br><span class="line">create procedure getParams (</span><br><span class="line">search_date date,</span><br><span class="line">keyword varchar(10)</span><br><span class="line">)</span><br><span class="line">begin</span><br><span class="line">select search_date, keyword;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">call getParams(&apos;2018-02-11&apos;, &apos;google&apos;);</span><br></pre></td></tr></table></figure><hr><h3 id="接收參數"><a href="#接收參數" class="headerlink" title="接收參數"></a>接收參數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure getParams (</span><br><span class="line">search_date date,</span><br><span class="line">keyword varchar(10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>差別就在於原本 ProcedureName 後面的括號指定要接什麼型態的資料</p><h3 id="傳入參數"><a href="#傳入參數" class="headerlink" title="傳入參數"></a>傳入參數</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call getParams(&apos;2018-02-11&apos;, &apos;google&apos;);</span><br></pre></td></tr></table></figure><p>就真的和呼叫函式一樣，在括號內依照需要的參數順序傳入就好</p><h3 id="資料格式錯誤"><a href="#資料格式錯誤" class="headerlink" title="資料格式錯誤"></a>資料格式錯誤</h3><p>如果我已經指定第一個參數要是 date 格式，結果你傳入錯誤格式或資料，他也會像是一般 sql query 告訴你錯誤</p><p><img src="/blog/images/incorrect date value.png" alt="incorrect date value"></p><h3 id="參數少傳或多傳"><a href="#參數少傳或多傳" class="headerlink" title="參數少傳或多傳"></a>參數少傳或多傳</h3><p>如果傳入的參數數量和指定要接受的參數數目不對，也會報錯</p><p><img src="/blog/images/incorrect number of arguments.png" alt="incorrect number of arguments"></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> procedure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 VS Code 執行 mysql query</title>
      <link href="/2018/02/10/%E5%9F%B7%E8%A1%8C-mysql-query/"/>
      <url>/2018/02/10/%E5%9F%B7%E8%A1%8C-mysql-query/</url>
      
        <content type="html"><![CDATA[<p>今天要介紹一個可以直接在 VS code 執行 Mysql SQL 指令的套件。除了可以直行 query 之外，也會支援 mysql 的 sql 語法，不然沒有安裝擴充套件，mysql 的許多指令都會被當作錯誤 T^T</p><a id="more"></a><hr><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>打開擴充功能，搜尋 vscode-database，點開後看到這個就是了：<a href="https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-database" target="_blank" rel="noopener">vscode-database</a></p><hr><h2 id="連上-Mysql-Server"><a href="#連上-Mysql-Server" class="headerlink" title="連上 Mysql Server"></a>連上 Mysql Server</h2><p>使用快捷鍵 Command ⌘ + Shift ⇧ + P 叫出指令輸入視窗</p><p>先輸入 sql 或圖片上顯示的關鍵字查詢連上 Mysql Server 的功能</p><p><img src="/blog/images/sql connect to Mysql.png" alt="sql connect to Mysql"></p><p>依照順序輸入需要的資料：</p><p>mysql</p><p>可以選擇連接 mysql 或 postgres </p><p>host name</p><p>如果要連上本地端的 Mysql 就是輸入 localhost</p><p>user name</p><p>登入 mysql 的帳號</p><p>password</p><p>剛剛輸入帳號的密碼</p><p>成功之後就會跳出一則訊息告知你現在是 </p><p><img src="/blog/images/mysql connect success.png" alt="Mysql connect success"></p><hr><h2 id="編輯一個-sql-檔案"><a href="#編輯一個-sql-檔案" class="headerlink" title="編輯一個 sql 檔案"></a>編輯一個 sql 檔案</h2><p>建立一個 test.sql。</p><p>最重要的是副檔名要是 .sql </p><p>然後試著輸入簡單的 sql，像是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1+7;</span><br></pre></td></tr></table></figure><p>PS. 當你輸入 select 會有自動完成的提示，目前我還沒研究出他為什麼會這麼難用</p><hr><h2 id="執行-sql-query"><a href="#執行-sql-query" class="headerlink" title="執行 sql query"></a>執行 sql query</h2><p>在 test.sql 選起剛剛輸入的 query 指令，或者使用 Command ⌘ + A 全選起來，</p><p>然後使用快捷鍵 Command ⌘ + Shift ⇧ + E 就可以執行選起的 sql query。</p><p>然後你就可以在下方的輸出頁籤看到結果</p><p><img src="/blog/images/sql query result.png" alt="sql query result"></p><hr><p>參考資源：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-database" target="_blank" rel="noopener">vscode-database</a></p>]]></content>
      
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Tomcat 改為 80 port</title>
      <link href="/2018/02/07/AWS-Tomcat-%E6%94%B9%E7%82%BA-80-port/"/>
      <url>/2018/02/07/AWS-Tomcat-%E6%94%B9%E7%82%BA-80-port/</url>
      
        <content type="html"><![CDATA[<p>因為同事在 AWS 架了一個簡單的伺服器，專門處理測試中的網站專案，我們現在習慣都是架 Tomcat，Tomcat 預設運行在 8080 port，這篇要說的是我這次發現可以怎麼做</p><a id="more"></a><hr><p>原本我是到 tomcat 資料夾下的 server.xml 將 port 從 8080 改為 80。</p><p>在 AWS 的 linux 系統 server.xml 應該是放在 /var/lib/tomcat8/conf/ 下</p><p>打開會看到類似下面的內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">    connectionTimeout=&quot;20000&quot;</span><br><span class="line">    URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">    redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><p>我就試著把 port=”8080” 改成 port=”80”</p><p>透過 tomcat restart 重啟也是沒問題的，在 firewall 的規則也加上允許外部訪問 80 port 的規則，可是結果還是無法使用 80 port 開啟網頁。</p><p>後來找到了這篇文章：<a href="https://medium.com/@rijoalvi/setting-up-an-amazon-ec2-aws-server-with-tomcat7-running-on-ports-80-443-mysql-oracle-jdk-1-68bcc42bdb94" target="_blank" rel="noopener">Setting up an Amazon EC2 AWS Server with Tomcat7 (running on ports 80 &amp; 443)</a></p><p>雖然有幾個部份我操作起來有問題，可能是因為我們不是用 EC2 也不是安裝 Tomcat 7，但還是有給我解決問題的方向。</p><hr><h2 id="加入預路由的規則"><a href="#加入預路由的規則" class="headerlink" title="加入預路由的規則"></a>加入預路由的規則</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 將 8080 port 轉到 80 port</span><br><span class="line">sudo /sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br><span class="line">// 將 8443 port 轉到 443 port</span><br><span class="line">sudo /sbin/iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443</span><br></pre></td></tr></table></figure><hr><h2 id="儲存剛加入的規則"><a href="#儲存剛加入的規則" class="headerlink" title="儲存剛加入的規則"></a>儲存剛加入的規則</h2><p>原本文章內的指令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/service iptables save</span><br></pre></td></tr></table></figure><p>但因為我的 /sbin/ 下並沒有 service 所以才改成以下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables-save</span><br></pre></td></tr></table></figure><hr><h2 id="重啟網路，套用剛剛加入的規則"><a href="#重啟網路，套用剛剛加入的規則" class="headerlink" title="重啟網路，套用剛剛加入的規則"></a>重啟網路，套用剛剛加入的規則</h2><p>原本文章內的指令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure><p>但因為我的 /etc/init.d/  下並沒有 iptable 及 firewall 所以才使用以下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>按造以上步驟做完之後，我的 tomcat 就可以透過 ip:80 和 ip:8080 訪問了</p><hr><p>以下是補充刪除規則的方法</p><h2 id="查詢目前所有規則"><a href="#查詢目前所有規則" class="headerlink" title="查詢目前所有規則"></a>查詢目前所有規則</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables -L -n -t nat --line-numbers</span><br></pre></td></tr></table></figure><p>–line-numbers 是查詢規則，順便依照加入順序編上編號，待會會用到</p><h2 id="刪除指定規則"><a href="#刪除指定規則" class="headerlink" title="刪除指定規則"></a>刪除指定規則</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables -t -nat -D PREROUTING 1</span><br></pre></td></tr></table></figure><p>PREROUNTING 可以替換成 INPUT, OUTPUT 等名稱，因為規則會依照使用情境不一樣去分類，我們這次加入的 PREROUTING。</p><p>1 是指編號為 1 的規則</p><hr><p>參考資料：</p><p><a href="https://medium.com/@rijoalvi/setting-up-an-amazon-ec2-aws-server-with-tomcat7-running-on-ports-80-443-mysql-oracle-jdk-1-68bcc42bdb94" target="_blank" rel="noopener">Setting up an Amazon EC2 AWS Server with Tomcat7 (running on ports 80 &amp; 443)</a></p><p><a href="https://stackoverflow.com/questions/21068727/how-to-remove-iptables-rule" target="_blank" rel="noopener">how-to-remove-iptables-rule</a></p><p><a href="https://stackoverflow.com/questions/8239047/iptables-how-to-delete-postrouting-rule" target="_blank" rel="noopener">iptables-how-to-delete-postrouting-rule</a></p><p><a href="https://askubuntu.com/questions/793272/iptables-forward-port-error-no-chain-target-match-by-that-name" target="_blank" rel="noopener">iptables-forward-port-error-no-chain-target-match-by-that-name</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules#delete-rule-by-chain-and-number" target="_blank" rel="noopener">delete-rule-by-chain-and-number</a></p><p><a href="https://askubuntu.com/questions/91413/reloading-iptables" target="_blank" rel="noopener">reloading-iptables</a></p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> prerouting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 程序管理-pm2 (TB)</title>
      <link href="/2018/02/04/Nodejs-%E7%A8%8B%E5%BA%8F%E7%AE%A1%E7%90%86-pm2/"/>
      <url>/2018/02/04/Nodejs-%E7%A8%8B%E5%BA%8F%E7%AE%A1%E7%90%86-pm2/</url>
      
        <content type="html"><![CDATA[<p>在一開始，如果要執行 nodejs 開發和運行的網站伺服器，都會使用 termial 終端機執行 node index.js 這樣的方式。現在使用 pm2 就可以管理 nodejs 的網站和其他程序。</p><a id="more"></a><hr><p>最簡單的用法</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>啟動 nodejs 程式</p><p>切換到 nodejs 專案底下，看要執行的檔案是 index.js 還是 server.js，如果是 server.js 的話：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start server.js</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>顯示目前 nodejs 程式列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p>## </p><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjs - groupby</title>
      <link href="/2018/02/03/Rxjs-groupby/"/>
      <url>/2018/02/03/Rxjs-groupby/</url>
      
        <content type="html"><![CDATA[<p>groupby 是指將資料依照部分相同，而將相同資料組成一個群集。</p><p>一開始會找 javascript 的 groupby 用法是因為 groupby 自己寫很麻煩，原本是想要在 SQL 的階段就使用 groupby 處理，可是 mssql 的groupby 我覺得相當難用，後來看到 rxjs 才是我理想的 groupby 方式，就做個筆記吧，因為也是蠻複雜的…。</p><a id="more"></a><hr><h2 id="原始資料"><a href="#原始資料" class="headerlink" title="原始資料"></a>原始資料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">originalData = [</span><br><span class="line">    &#123; name: &apos;Aaron&apos;, score: 45 &#125;,</span><br><span class="line">    &#123; name: &apos;Abbott&apos;, score: 23 &#125;,</span><br><span class="line">    &#123; name: &apos;Bowen&apos;, score: 36 &#125;,</span><br><span class="line">    &#123; name: &apos;Boyce&apos;, score: 67 &#125;,</span><br><span class="line">    &#123; name: &apos;Don&apos;, score: 73 &#125;,</span><br><span class="line">    &#123; name: &apos;Dominic&apos;, score: 26 &#125;,</span><br><span class="line">    &#123; name: &apos;Gene&apos;, score: 84 &#125;,</span><br><span class="line">    &#123; name: &apos;Gavin&apos;, score: 95 &#125;,</span><br><span class="line">    &#123; name: &apos;Isaac&apos;, score: 18 &#125;,</span><br><span class="line">    &#123; name: &apos;Ivan&apos;, score: 51 &#125;,</span><br><span class="line">    &#123; name: &apos;Larry&apos;, score: 28 &#125;,</span><br><span class="line">    &#123; name: &apos;King&apos;, score: 53 &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>想要將以上 12 名學生的成績分區間</p><p>低於 40 分為 low </p><p>高於等於 40 分，低於 70 為 middle</p><p>高於等於 70 分為 high</p><hr><h2 id="Version-1-groupBy"><a href="#Version-1-groupBy" class="headerlink" title="Version 1 - groupBy()"></a>Version 1 - groupBy()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(this.originalData)</span><br><span class="line">    .map(item=&gt;&#123;</span><br><span class="line">        return &#123;name: item.name, score: item.score, level: this.classify(item.score)&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .groupBy(item =&gt; &#123;</span><br><span class="line">        return item.level;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在 console 可以看到會有三筆資料被 log 出來，也可以看到的確是用 3 個定義好的區間，但是其他資料看起來並不是那麼好閱讀，像是我想要知道哪些人在哪個區間就無法看出來</p><p><img src="/blog/images/Groupby Version1.png" alt="Groupby Version1"></p><hr><h2 id="Version-2-mergeMap-toArray"><a href="#Version-2-mergeMap-toArray" class="headerlink" title="Version 2 - mergeMap() + toArray()"></a>Version 2 - mergeMap() + toArray()</h2><p>增加 mergeMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(this.originalData)</span><br><span class="line">    .map(item=&gt;&#123;</span><br><span class="line">        return &#123;name: item.name, score: item.score, level: this.classify(item.score)&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .groupBy(item =&gt; &#123;</span><br><span class="line">        return item.level;</span><br><span class="line">    &#125;)</span><br><span class="line">    .mergeMap(group=&gt;&#123;</span><br><span class="line">        return group.toArray();</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/Groupby Version2.png" alt="Groupby Version2"></p><p>mergeMap 是增加的過程，簡單說就是把 GroupedObservable 內實際的資料變成 array 讓我們好閱讀。</p><p>PS. toArray 也是 rxjs 提供的函數，你也可以使用 reduce 來完成</p><h2 id="Version-2-mergeMap-reduce"><a href="#Version-2-mergeMap-reduce" class="headerlink" title="Version 2 - mergeMap() + reduce()"></a>Version 2 - mergeMap() + reduce()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(this.originalData)</span><br><span class="line">    .map(item=&gt;&#123;</span><br><span class="line">        return &#123;name: item.name, score: item.score, level: this.classify(item.score)&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .groupBy(item =&gt; &#123;</span><br><span class="line">        return item.level;</span><br><span class="line">    &#125;)</span><br><span class="line">    .mergeMap(group=&gt;&#123;</span><br><span class="line">        return group.reduce((pre, curr) =&gt; [...pre, curr], []);</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>PS. () =&gt; {statement} 是 arrow function 寫法，有興趣的人可以找找這方面的資料，推薦</p><p>但是 console 看到的資料還有個問題，就是我不知道我 groupby 的根據是什麼，我得到的是分類好的資料，但是我要知道哪些是哪個群集，要每一個群集抽一個資料出來看才知道</p><hr><h2 id="Version-3-zip"><a href="#Version-3-zip" class="headerlink" title="Version 3 - zip()"></a>Version 3 - zip()</h2><p>在 mergeMap 使用 zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(this.originalData)</span><br><span class="line">    .map(item=&gt;&#123;</span><br><span class="line">        return &#123;name: item.name, score: item.score, level: this.classify(item.score)&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .groupBy(item =&gt; &#123;</span><br><span class="line">        return item.level;</span><br><span class="line">    &#125;)</span><br><span class="line">    .mergeMap(group=&gt;&#123;</span><br><span class="line">        return group.toArray().zip(Observable.from(group));</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/Groupby Version3.png" alt="Groupby Version3"></p><p>上面提到，groupby 之後的資料是 GroupedObservable，一樣是 Observable 的一種，如果要將實際的資料取出來，最簡單的方式就是使用 Observable.from()，使用 zip() 之後你會發現，原本是只有被 groupby 的一維陣列，變成二維陣列，除了在這區間的學生資料外，還有一個是某個學生的資料，但這樣好像跟 Version 2 差不多。</p><hr><h2 id="Version-4-zip-map"><a href="#Version-4-zip-map" class="headerlink" title="Version 4 - zip() + map()"></a>Version 4 - zip() + map()</h2><p>再 map 一次，<strong>Observable.from().map()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.from(this.originalData)</span><br><span class="line">    .map(item=&gt;&#123;</span><br><span class="line">        return &#123;name: item.name, score: item.score, level: this.classify(item.score)&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .groupBy(item =&gt; &#123;</span><br><span class="line">        return item.level;</span><br><span class="line">    &#125;)</span><br><span class="line">    .mergeMap(group=&gt;&#123;</span><br><span class="line">        return group.toArray().zip(Observable.from(group).map(item =&gt; item.level));</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/Groupby Version4.png" alt="Groupby Version4"></p><p>就這樣告一段落吧！</p><p><a href="https://github.com/contemplator/rxjs-practice/blob/master/src/app/rxjs/groupby/groupby.component.ts" target="_blank" rel="noopener">Source Code</a></p>]]></content>
      
      
      <categories>
          
          <category> Rxjs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 的基礎應用 - reduce</title>
      <link href="/2018/02/03/Array-%E7%9A%84%E5%9F%BA%E7%A4%8E%E6%87%89%E7%94%A8-reduce/"/>
      <url>/2018/02/03/Array-%E7%9A%84%E5%9F%BA%E7%A4%8E%E6%87%89%E7%94%A8-reduce/</url>
      
        <content type="html"><![CDATA[<p>第一次聽到 Reduce 是大學上了一堂跟 Hadoop 有關的課程，Hadoop 可以執行分散式運算，是因為它運用了 Map-Reduce 的運算邏輯，Map 是指可以重複執行的任務，而且不管在不同機器上運行的結果都是一致的，像是將調整分數的規則定好，每個老師對同一個分數進行調分，結果都應該要一致，這就是 Map 的規則；而 Recude 有人翻成匯總函數，就是將所有資料統整起來，像是將全班分數進行加總或平均，因為必須取得所有資料後才能動作，這是和 Map 最大的差異。</p><a id="more"></a><hr><p>情境一樣是跟學生分數有關</p><p>原始資料為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">originScores = [</span><br><span class="line">    &#123; name: &quot;Leo&quot;, score: 25 &#125;,</span><br><span class="line">    &#123; name: &quot;May&quot;, score: 36 &#125;,</span><br><span class="line">    &#123; name: &quot;Sun&quot;, score: 16 &#125;,</span><br><span class="line">    &#123; name: &quot;Ken&quot;, score: 81 &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h2 id="reduce-公式"><a href="#reduce-公式" class="headerlink" title="reduce 公式"></a>reduce 公式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let result = this.someArr.reduce((curResult, curItem, curIndex?, arr?)=&gt;&#123;</span><br><span class="line">    return newCurResult;</span><br><span class="line">&#125;, initValue);</span><br></pre></td></tr></table></figure><ul><li>reduce 一樣要回傳一個值，不然計算的結果就無法在程式內取得</li><li>curResult 是指目前彙總的結果</li><li>curItem 是指目前要加入彙總的新資料</li><li>curIndex 目前新資料在原始陣列的序列數，不一定要使用到</li><li>arr 原始陣列，不一定要使用到</li><li>initValue 因為是彙總函式，所以要先給初始值讓彙總函式去比較和加總，像是加總分數也是要從 0 開始加</li></ul><h2 id="加總"><a href="#加總" class="headerlink" title="加總"></a>加總</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">countSum(): number&#123;</span><br><span class="line">    let sum = this.originScores.reduce((curSum, curItem)=&gt;&#123;</span><br><span class="line">      return curSum + curItem.score;</span><br><span class="line">    &#125;, 0);</span><br><span class="line">    return sum; // 158</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">countAverage(): number&#123;</span><br><span class="line">    let avg = this.originScores.reduce((curAvg, curItem, curIndex, arr)=&gt;&#123;</span><br><span class="line">      return curAvg + ((curItem.score)/(arr.length));</span><br><span class="line">    &#125;, 0);</span><br><span class="line">    return avg; // 39.5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS. 這裡的算法不是先求總數在求平均，而是每人的分數先去除以全班人數再加總</p><hr><h2 id="最高分"><a href="#最高分" class="headerlink" title="最高分"></a>最高分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">countMax(): &#123;name: string, score: number&#125;&#123;</span><br><span class="line">    let student = this.originScores.reduce((curWinner, curItem)=&gt;&#123;</span><br><span class="line">        if(curItem.score &gt; curWinner.score)&#123;</span><br><span class="line">            return curItem;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return curWinner;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, this.originScores[0]);</span><br><span class="line"></span><br><span class="line">    return student; // &#123;name: &quot;Ken&quot;, score: 81&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS. 這裡回傳的不是數字，而是全班最高分的學生和他的分數，所以在 initValue 和 reduce 回傳的結果型態要注意！</p><hr><h2 id="找出及格的人"><a href="#找出及格的人" class="headerlink" title="找出及格的人"></a>找出及格的人</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filtPass(): &#123; name: string, score: number &#125;[] &#123;</span><br><span class="line">    let students = this.originScores.reduce((curArr, curItem) =&gt; &#123;</span><br><span class="line">        if (curItem.score &gt;= 60) &#123;</span><br><span class="line">            return [...curArr, curItem];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return curArr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    return students; // [&#123;name: &quot;Ken&quot;, score: 81&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[…curArr, curItem] 這個用法是 array.concat 的語法糖的樣子，是將兩個陣列合併，或者將一個新的值塞進陣列中很好用，注意，他會是一個新的陣列</p><p>PS. else {return curArr}; 很重要，若是沒有變動陣列，也要將原本的陣列回傳，不然下一次的 curArr 會是 undefined，會噴錯</p><p>PS. 如果像是根據資料去篩選，有 array.filter 這樣好用的函數可以用。</p><p><a href="https://github.com/contemplator/rxjs-practice/blob/master/src/app/array/reduce/reduce.component.ts" target="_blank" rel="noopener">Source Code</a></p>]]></content>
      
      
      <categories>
          
          <category> Rxjs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 的基礎應用 - map, foreach</title>
      <link href="/2018/01/30/Array-%E7%9A%84%E5%9F%BA%E7%A4%8E%E6%87%89%E7%94%A8-map-foreach/"/>
      <url>/2018/01/30/Array-%E7%9A%84%E5%9F%BA%E7%A4%8E%E6%87%89%E7%94%A8-map-foreach/</url>
      
        <content type="html"><![CDATA[<p>進入 Rxjs 之前，應該要先對 array 提供的一堆超好用的方法，而且我現在用到的功能，都是在整理後端傳過來的資料，比較少處理動畫，所以建議大家先從簡單的做起，減少用 for loop 的次數</p><a id="more"></a><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 在 rxjs 也會很常用到，邏輯也是一樣的，直接看程式碼：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">export class MapComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  originScores = [</span><br><span class="line">    &#123; name: &quot;Leo&quot;, score: 25 &#125;,</span><br><span class="line">    &#123; name: &quot;May&quot;, score: 36 &#125;,</span><br><span class="line">    &#123; name: &quot;Sun&quot;, score: 16 &#125;,</span><br><span class="line">    &#123; name: &quot;Ken&quot;, score: 81 &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  fixScores = [];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    this.fixScores = this.originScores.map(item =&gt; &#123;</span><br><span class="line">      let fixScore = Math.sqrt(item.score) * 10;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: item.name,</span><br><span class="line">        score: fixScore,</span><br><span class="line">        isPass: fixScore &gt;= 60 ? true : false</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    // 修正後</span><br><span class="line">    // fixScores = [</span><br><span class="line">    //   &#123; name: &quot;Leo&quot;, score: 50, isPass: false &#125;,</span><br><span class="line">    //   &#123; name: &quot;May&quot;, score: 60, isPass: true &#125;,</span><br><span class="line">    //   &#123; name: &quot;Sun&quot;, score: 40, isPass: false &#125;,</span><br><span class="line">    //   &#123; name: &quot;Ken&quot;, score: 90, isPass: true &#125;</span><br><span class="line">    // ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map 的用途通常是資料需要進行修正，像是幫學生調分數，不過還是用 excel 應該比較快；或者不只是改變資料的數值，而是要變形成另外一個資料型態，像是加上是不是及格的判斷</p><p>map 的公式長這樣</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let newArr = someArr.map((currentValue, index, arr) =&gt; &#123;</span><br><span class="line">    return newValue;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue 就是陣列目前迭代處理的元素<br>index 他像是 for loop 一樣會提供你目前處理的元素，在原陣列是第幾個位置的資料<br>arr 原始的完整陣列資料</p><p>map 的 callback function 一定要回傳值，因為他要讓陣列經過 map 處理後還是陣列型態</p><p><a href="https://github.com/contemplator/rxjs-practice/blob/master/src/app/array/map/map.component.ts" target="_blank" rel="noopener">Source Code</a></p><hr><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>forEach 和 map 很像，我一開始知道 forEach 是在 php，他讓我不用在每次都寫 for(let i=0; i&lt;arr.length; i++) 這麼囉唆語句，只要是陣列裡每個東西都要處理，就直接用 foreach 就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">export class ForeachComponent implements OnInit &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  originScores: any[] = [</span><br><span class="line">    &#123; name: &quot;Leo&quot;, score: 25 &#125;,</span><br><span class="line">    &#123; name: &quot;May&quot;, score: 36 &#125;,</span><br><span class="line">    &#123; name: &quot;Sun&quot;, score: 16 &#125;,</span><br><span class="line">    &#123; name: &quot;Ken&quot;, score: 81 &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  fixScore = [];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    this.originScores.forEach(item =&gt; &#123;</span><br><span class="line">      item.score = Math.sqrt(item.score) * 10;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    // 修正後</span><br><span class="line">    // originScores = [</span><br><span class="line">    //   &#123; name: &quot;Leo&quot;, score: 50 &#125;,</span><br><span class="line">    //   &#123; name: &quot;May&quot;, score: 60 &#125;,</span><br><span class="line">    //   &#123; name: &quot;Sun&quot;, score: 40 &#125;,</span><br><span class="line">    //   &#123; name: &quot;Ken&quot;, score: 90 &#125;</span><br><span class="line">    // ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forEach 和 map 我認為最大的差異就是 map 的 callback function 規定一定要 return 一個值，因為 map 會回傳一個一樣長度的陣列，但是 forEach 則不行在 callbakc function 使用 return。</p><p>PS. map 也可以不 return，但是 map 就不會回傳陣列，而是 null 值</p><p>forEach 的公式長這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someArr.forEach((currentValue, index, arr) =&gt; &#123;</span><br><span class="line">    statement...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/contemplator/rxjs-practice/blob/master/src/app/array/foreach/foreach.component.ts" target="_blank" rel="noopener">Source Code</a></p>]]></content>
      
      
      <categories>
          
          <category> Rxjs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>prettier - vscode 套件</title>
      <link href="/2018/01/29/prettier-vscode-%E5%A5%97%E4%BB%B6/"/>
      <url>/2018/01/29/prettier-vscode-%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近很常和公司的設計師聊，因為會一直被她很有壓力的逼迫，順便檢討自己的工作方式，雖然一直覺得是自己再配合大家，可是其實有時是別人配合我都沒有發現…</p><a id="more"></a><hr><p>最近在 git pull 後都會發現有些檔案的 tab intent 大小不一樣，自己習慣都是 tab size 為 4 在做排版，可是程式碼從設計師那邊 merge 回來後，tab size 都會變成 2，今天和她開會閒聊才發現原來 angular 的專案會產生一個 .editorconfig 的設定檔，裡面就有規定到 tab size 為 2，原來一直是我在 vscode 的偏好設定設為 tab size 為 4，而且沒有在 vscode 安裝 editorconfig 套件，變成是我在用 angular 開發，可是卻忽略 angular 的設定檔，我道歉，我雷！</p><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noopener">editorconfig</a></h2><p>一般情況下，vscode 並不會去讀取專案下的 .editorconfig 檔案去影響開發工作區的設定，像是 tab size，主要還是看他偵測到的檔案大多怎麼排，再來就是看使用者偏好設定、工作區偏好設定，所以在這建議大家如果是開發 angular 專案，或者專案下有 .editorconfig 檔案，記得去下載套件 - <a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig" target="_blank" rel="noopener">Editorcofig for VS code</a></p><p>或者在 mac 環境下按下快捷鍵 command + P，輸入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install EditorConfig</span><br></pre></td></tr></table></figure><p>這樣就會參照 .editorconfig 檔案</p><hr><h2 id="Beautify-css-sass-scss-less"><a href="#Beautify-css-sass-scss-less" class="headerlink" title="Beautify css/sass/scss/less"></a><a href="https://marketplace.visualstudio.com/items?itemName=michelemelluso.code-beautifier" target="_blank" rel="noopener">Beautify css/sass/scss/less</a></h2><p>在前公司我都用這套外掛在做自動排版，前公司的工作規範訂的不是很好，很多事我進去之後才定，我也雷雷的和大家分享了這個套件，起初只是因為這個操作最無腦，安裝之後使用 Ctrl + Shift + F 就可以自動排版，而且找了很久，就這個比較能排 scss，可是後來因為和設計師討論到怎麼規範 scss 和 css ，發現這個套件可以自己設定的選項很少（可能文件說明太少），而且預設不是參照 .editorconfig，所以後來我就開始找其他套件。</p><hr><h2 id="Sass-Formatter"><a href="#Sass-Formatter" class="headerlink" title="Sass Formatter"></a><a href="https://marketplace.visualstudio.com/items?itemName=sasa.vscode-sass-format" target="_blank" rel="noopener">Sass Formatter</a></h2><p>後來想要直接找 scss 的自動排版，就看到 vscode 推薦這個給我，我也稍微試用了一下，發現在設定上比前一個套件彈性，說明也比較清楚，唯一麻煩的地方，是他還要在 command line tool 安裝一個工具，安裝指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install sass</span><br></pre></td></tr></table></figure><p>此外，他可以支援參照 editorconfig，原本就要使用這個了，可是後來在一個個檔案自動排版時，發現他在 css 的 單行註解排版有點問題，他大括號 } 結束的部分，後面會緊挨著單行註解，只有多行註解會正常排版。所以後來又繼續找。</p><hr><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a></h2><p>好酒沈甕底，後來就決定用這個了，因為他預設就參照 .editorconfig 檔案，要另外自訂也可以，一開始預設排版也都沒有問題，雖然後來在排版 json 檔案和 ts 檔案時遇到一點問題，可是後來都在他的文件找到解法。</p><p>ts 的問題是在 import 的內容太多時，會自行增加一行，讓我 import 的套件顯示太多行，不滿意，後來使用以下方法在 vscode 的工作區額外設定解決：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;prettier.disableLanguages&quot;: [&quot;typescript&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json 的問題是因為我的 npm script 指令太長，他幫我自動在新的一行顯示，其實在排版上沒有什麼幫助，原本想用上面的方法避開他幫我在 json 檔案的自動排版，看能不能用 vscode 或其他參照的地方排版，發現不行，只好找到以下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;prettier.printWidth&quot;: 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因在於他會去計算那一行的程式碼有多長，超過預設長度 80 就會折行，我將它擴展到 200 就不會有這問題</p>]]></content>
      
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> plugin </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成人世界 CHAPPiE</title>
      <link href="/2018/01/27/%E6%88%90%E4%BA%BA%E4%B8%96%E7%95%8C-CHAPPiE/"/>
      <url>/2018/01/27/%E6%88%90%E4%BA%BA%E4%B8%96%E7%95%8C-CHAPPiE/</url>
      
        <content type="html"><![CDATA[<p>故事是在說一個原本犯罪率極高的地區，因為導入了機器人警察而改善治安，一名科學家因為開發了機器人警察而在科技公司受到重用，但是他最大的夢想是開發一個會感覺、會思考的機器人，在接近 1000 天的努力，終於成功了，但是因為主管不同意他的測試，他自行偷竊了一個待銷毀的機器人，將人工智慧的程式安裝進入這個機器人的體內，也埋下這名機器人日後產生的求生念頭。</p><a id="more"></a><p><img src="/blog/images/Chappie_poster.jpg" alt="成人世界電影海報"><br>由 來源, <a href="//zh.wikipedia.org/wiki/File:Chappie_poster.jpg" title="合理使用">合理使用</a>, <a href="https://zh.wikipedia.org/w/index.php?curid=4337465" target="_blank" rel="noopener">連結</a></p><p>–</p><p>雖然片名就做成人世界，但是跟<em>“成人”</em>沒有關係，而是應該想成<em>“成為人”</em>，但是整部片看下來，並沒有<em>“&lt;變人&gt;”</em>或者<em>“&lt;AI人工智慧&gt;”</em>那種感覺，可能是因為這些電影內的機器人所追求的是不一樣的情感。</p><p>&lt;變人&gt; 和 &lt;AI人工智慧&gt; 是渴望親情導致他們想要成為人類，而&lt;成人世界&gt;中的查皮是為了<em>活下去</em>。儘管查皮相當愛他的媽媽，但我認為他仍認為在世界上，活下去才是重點。</p><p>雖然查皮在電影中像個孩子，儘管他學習快速，甚至在程式開發已經超過他的創造者，但是在依賴他人、情感智商仍像是個小孩，他還是很依賴他的創造者、媽媽和爸爸，可能這告訴我們，從書上、網路上，任何一個可以獲得知識的地方，我們都可以很快地獲取知識，可是在相信他人、或者任何情感，我們是無法說像是獲得知識一樣，有些事情，要親身經歷過了，才會真的了解什麼是對、什麼是錯。</p><p>– </p><p>看完電影，其實認為有些地方讓我覺得很奇怪，雖然自己可以合理化，但是在電影中表現的並沒有很強烈，只是自己的猜測：</p><h2 id="麋鹿-重裝機器人-為何會打輸查皮？"><a href="#麋鹿-重裝機器人-為何會打輸查皮？" class="headerlink" title="麋鹿(重裝機器人)為何會打輸查皮？"></a>麋鹿(重裝機器人)為何會打輸查皮？</h2><p>麋鹿是電影中另外一個工程師的得意之作，他的特色在於武器相當的強大，電影中的警察也說到，如果要他採購麋鹿，除非是發生真的非常嚴重的暴動（但是多嚴重不知道，像是戰爭嗎？）</p><p>電影的最後，麋鹿終於有登場的機會，可是卻不是去阻止暴動，而是摧毀查皮和他的創造者，順便和一群小混混來一場遭遇戰，可是結果讓我傻眼貓咪！看起來只有榴導彈炸死了一堆小混混，可是還是有很多人活下來…（劇情需要嘛，這我還可以接受），可是麋鹿用機關槍掃射，根本掃不到人，用的用槍打死的，只有查皮媽，還是站著給他射才射到！你做機器人，結果還是人在操縱，還是會有一堆人為方面的缺陷啊！難怪賣不出去！結果麋鹿主打的特色反而在我看來是缺點。</p><p>不過整部電影看完，只要有查皮的打鬥畫面，只要查皮願意打，還真沒有他打不贏的架，不管是對人、還是對機器人，這可能也在暗示，儘管人類之後開發出多有殺傷力的武器，只要能夠自行思考的人工智慧出現，人類一定輸，因為目前沒有人的運算可以快過電腦，精密的運算近乎預知，這是在許多動漫可以看到的能力。</p><p>– </p><h2 id="查皮一直想活下去，為什麼最後他選擇先救創造者？"><a href="#查皮一直想活下去，為什麼最後他選擇先救創造者？" class="headerlink" title="查皮一直想活下去，為什麼最後他選擇先救創造者？"></a>查皮一直想活下去，為什麼最後他選擇先救創造者？</h2><p>當查皮知道自己會因為電量不足而死亡這件事情，他所有的行為就因為這個動機而行動，不管是買伺服器主機、搶運鈔車，但是再回到工廠，要使用意識頭盔將意識轉移到另外一個身體（機器人）時，發現只有一個身體，他選擇讓創造者先活下去，先不管是否是查皮有其他考量，像是他不確定會不會成功，想要讓創造者先試試之類的考量，我想任何人喜歡看 Happy Ending 的人都會猜想：一定是人性本善！</p><p>雖然整部片看下來，感覺導演應該真的是想要給人這種感覺，但是我不能接受！</p><p>– </p><h2 id="查皮爸爸（小混混）最後認為洗白了嗎？"><a href="#查皮爸爸（小混混）最後認為洗白了嗎？" class="headerlink" title="查皮爸爸（小混混）最後認為洗白了嗎？"></a>查皮爸爸（小混混）最後認為洗白了嗎？</h2><p>查皮爸一直想要利用查皮賺錢，不管是教他開槍、騙他一堆人偷他的車，還是最後騙他搶運鈔車是為了幫他買身體等行為。</p><p>電影中間有三個部分一度讓我認為查皮爸也許是好的，只是人在江湖，身不由己。</p><p>第一：他把查皮帶到混混集散地，讓一堆混混對他施以暴力，讓他見識真實世界，但最後卻害查皮掉了一隻手，最後他不斷說他很抱歉。但後來想想，他當下只是覺得事情發展得比他預期的嚴重，所以他這個抱歉，只是為自己開脫，他並沒有為自己讓一個孩子身歷險境的行為感到抱歉。他道歉，只是因為查皮媽在生氣，他只是怕老婆而已。</p><p>第二：查皮爸在和查皮偷完車，買完炸彈後，對著查皮說：如果你要生存，就要戰鬥；你要像那隻死狗，還是像那隻活狗（但還是被人圈養著，有一餐沒一餐）。查皮最後選擇了活狗，所以要生存，但如果他知道活著不一定都有好事，他還會這樣選擇嗎？</p><p>第三：最後查皮爸選擇留下來拖住麋鹿，讓查皮、查皮媽和創造者逃出去，也許會讓人覺得這是一種非常犧牲的情操，但現在給大家和我自己一個情境：<br>現在一台車上有四個人，一個是受傷的自己，一個是比自己柔弱的愛人，一個是已經受傷的人，一個是目前唯一可以正常行動的人，車後面正有一個強大的怪物追著自己，怪物追著的是所有人，也有可能是追著車上的某個人。你有以下選項：</p><blockquote><ol><li>一起逃，但很有可能被追上，一起死</li><li>可能在追愛人，丟下愛人（乾，你還說愛他，人渣！</li><li>可能在追受傷的另外一個人，丟下他</li><li>可能在追可以行動的人，丟下他</li><li>自己犧牲</li></ol></blockquote><p>大家自己選，可能情境沒有假設得非常好，但我想，應該夠讓被留下當怪物誘餌的人給一點關懷。</p><p>– </p><h2 id="意識到底是不是靈魂？"><a href="#意識到底是不是靈魂？" class="headerlink" title="意識到底是不是靈魂？"></a>意識到底是不是靈魂？</h2><p>最後查皮能夠活下來，就是靠他自己的努力，他最後竟然將意識成功計算出來，將自己的意識轉移到另外一個機器人上。</p><p>意識能夠被備份，那應該也可以複製吧？如果意識可以代表一個人，只要在任何地方安裝了，就是那一個人，那世界上有兩個自己，其實也不是那麼不能接受的事情。</p><p>我想應該是本電影的想要講的東西有限，所以有兩個自己這種常見的人工智慧倫理討論，這邊就不再吵一次了吧！</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 電影 </tag>
            
            <tag> 成人世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 忘記密碼</title>
      <link href="/2017/12/14/MySql-%E5%BF%98%E8%A8%98%E5%AF%86%E7%A2%BC/"/>
      <url>/2017/12/14/MySql-%E5%BF%98%E8%A8%98%E5%AF%86%E7%A2%BC/</url>
      
        <content type="html"><![CDATA[<p>略過前情提要，反正這篇在說如果你忘記 MySql root 的密碼的話，你可以怎麼做。</p><a id="more"></a><hr><h2 id="關閉-mysql"><a href="#關閉-mysql" class="headerlink" title="關閉 mysql"></a>關閉 mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><hr><h2 id="執行不用輸入密碼也可以登入-mysql-的模式"><a href="#執行不用輸入密碼也可以登入-mysql-的模式" class="headerlink" title="執行不用輸入密碼也可以登入 mysql 的模式"></a>執行不用輸入密碼也可以登入 mysql 的模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure><p>如果你遇到錯誤：<br><em>mysqld_safe Directory ‘/var/run/mysqld’ for UNIX socket file don’t exists</em></p><p>問題大概就是說：/var/run/mysqld 此路徑下的檔案不存在，只要去把該檔案建立起來就好</p><p>你可以參考此篇文章：<a href="https://stackoverflow.com/questions/42153059/mysqld-safe-directory-var-run-mysqld-for-unix-socket-file-dont-exists" target="_blank" rel="noopener">mysqld_safe Directory ‘/var/run/mysqld’ for UNIX socket file don’t exists</a></p><p>再重新執行一次指令就好</p><p>PS. 執行成功後請不要按任何鍵，也不要關閉終端機，讓他保留執行中的狀態</p><hr><h2 id="登入-mysql"><a href="#登入-mysql" class="headerlink" title="登入 mysql"></a>登入 mysql</h2><p>另開一個終端機，然後執行 mysql 進行登入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><hr><h2 id="修改-root-的密碼"><a href="#修改-root-的密碼" class="headerlink" title="修改 root 的密碼"></a>修改 root 的密碼</h2><p>在 mysql 內執行以下 sql 更新密碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&apos;root&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>記得將 ‘root’ 改成自己要的密碼</p><hr><h2 id="退出-mysql"><a href="#退出-mysql" class="headerlink" title="退出 mysql"></a>退出 mysql</h2><p>在 mysql 內</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>退出 mysql 後重啟 mysql server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure><hr><h2 id="測試是否更改成功"><a href="#測試是否更改成功" class="headerlink" title="測試是否更改成功"></a>測試是否更改成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>輸入剛剛設定的密碼</p><hr><p>參考資料：</p><p><a href="http://emn178.pixnet.net/blog/post/87659567-mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A2%BC%E8%88%87%E5%BF%98%E8%A8%98%E5%AF%86%E7%A2%BC%E9%87%8D%E8%A8%AD" target="_blank" rel="noopener">mysql修改密碼與忘記密碼重設</a></p><p><a href="http://blog.csdn.net/u010603691/article/details/50379282" target="_blank" rel="noopener">Unknown column ‘password’ in ‘field list’</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WeMo 公共電動車心得</title>
      <link href="/2017/11/30/WeMo-%E5%85%AC%E5%85%B1%E9%9B%BB%E5%8B%95%E8%BB%8A%E5%BF%83%E5%BE%97/"/>
      <url>/2017/11/30/WeMo-%E5%85%AC%E5%85%B1%E9%9B%BB%E5%8B%95%E8%BB%8A%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>最近又搬回臺北，跟台中的生活真的差很多，雖然台中捷運還沒蓋好，可是自己去哪都騎車，其實比在臺北找車搭方便多了，這次搬上來，突然發現台北除了有公共腳踏車外，還有<strong>公共電動車</strong>！</p><a id="more"></a><hr><p><a href="http://www.wemoscooter.com/" target="_blank" rel="noopener">WeMo 公共電動車官網</a></p><p>一開始只要輸入別人的推薦碼，就可以拿到騎乘金，我那時候是有 100 原，可以利用這 100 元好好嘗試一下，不管怎樣都不吃虧。</p><p>現在總共騎了三次</p><p><img src="/blog/images/WeMo騎乘紀錄.png" alt="騎乘紀錄"></p><p>第一次因為在熟悉系統，雖然騎的公里數不多，但是卻花了 23 分鐘，除了系統不熟悉之外，還有就是停紅燈和忘記點還車…</p><p>第二次知道流程後，在租車前都想好步驟，所以就沒有什麼浪費，因為租房子的地方靠近台北市的邊邊，停了整整一天多都還沒有人去動他，可是第二次去騎的時候還發現電充滿了…</p><p>第三次騎的比較遠一點，可是也沒有比第一次貴</p><hr><p>比較之前看一下 WeMo 現在的收費</p><p><img src="/blog/images/WeMo計價方式.png" alt="收費方式"></p><h2 id="和-Ubike-比"><a href="#和-Ubike-比" class="headerlink" title="和 Ubike 比"></a>和 Ubike 比</h2><p>為什麼不和 Obike 比？因為 Obike 好像風評不好，當初他出來時，我人也不在台北，不知道騎起來怎樣，後來又怕怕的，而且台北 Ubike 點超多的，其實 Obike 沒有什麼隨借隨停的優勢。</p><p>我現在還是經常騎 Ubike，而且不太會騎超過 5 塊錢，如果要比划算的話，應該是 Ubike 獲勝，騎 WeMo 6 分鐘就要 9 元（我還是青春價），更別說以後的 15 元，15 元都可以搭公車搭一段了，騎 Ubike 應該可以騎到滿身大汗。</p><p>在台北考慮到站點多、價格超優惠，能夠騎 Ubike 還是 Ubike 先，只有在站點在步行需要 10 分鐘的地分，就會考慮找 WeMo 騎，通常沒有 Ubike 站點，應該停車位也比較好找。</p><hr><h2 id="和捷運比"><a href="#和捷運比" class="headerlink" title="和捷運比"></a>和捷運比</h2><p>捷運票價起跳價就是 16 元，站點分布和 Ubike 不能比，如果距離不遠，搭不超過 5 站都是會考慮的，因為超過 3 站的距離騎 WeMo 的價格就有可能超過捷運，在不超過 5 站捷運站的情況下，時間上的話，可能還是 WeMo 佔優勢，因為時速勇敢一點還是可以騎到 60km/hr，只是我都騎 50km/hr。</p><hr><h2 id="和計程車比"><a href="#和計程車比" class="headerlink" title="和計程車比"></a>和計程車比</h2><p>計程車起跳價就是 70 元，而且每 200 公尺就跳 5 元，應該怎麼算都是 WeMo 便宜，不過只比價格就不是很公道，因為計程車感覺就比較安全（應該吧？）至少他是鐵包肉啊！而且計程車最多可以 4 個人分，不過你也要找的到人跟你分（幫邊緣人ＱＱ）。</p><p>總之對於一個邊緣人，而且又覺得自己騎車不會不安全，兩者擺在一起當然是選 WeMo 啦！</p><hr><h2 id="和公車比"><a href="#和公車比" class="headerlink" title="和公車比"></a>和公車比</h2><p>我不想等公車。除非地點超偏僻，只有公車可以，那我就選公車吧！</p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>距離近到遠的話，考慮的順序是：走路 &gt; Ubike &gt; WeMo &gt; 捷運 &gt; 公車或放棄思考交給 Google</p><p>WeMo 還有其他幾點我覺得很棒的地方，就是他超級安靜，第一次卡超久的原因，就是他發動沒有聲音，催油門也幾乎沒有聲音，騎機車增加上手機的流程，害我整個像是第一次騎機車的人…</p><p>電動車也很環保，就沒有廢氣排放這點，如果你要跟我爭製造過程會不會排放比較多…，算你贏好嗎？</p><p>腳踏墊很大，我第二次騎，就是騎去洗衣服，連洗衣籃都放得下，我就很滿意了，而且我也觀察 gogoro 的腳踏墊，好像都比一般的機車大。</p><p>服務也很貼心，除了會派人自動去充電外，最讓我窩心的就是車廂有兩頂安全帽啊～！完全超給機會的啊！不會說我要騎 WeMo 還兩個人分開騎，多棒啊！</p><p>以上，就是這樣啦～就算騎乘金用完，我也會繼續騎看看，推薦序號去 Google Play 評論下面隨便挑一個就好。</p><p>下載：<a href="https://play.google.com/store/apps/details?id=com.wemoscooter&amp;hl=zh-TW" target="_blank" rel="noopener">Android</a>  <a href="https://itunes.apple.com/tw/app/wemo-scooter/id1185800267?l=zh&amp;mt=8" target="_blank" rel="noopener">iOS</a></p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杭州行</title>
      <link href="/2017/11/26/%E6%9D%AD%E5%B7%9E%E8%A1%8C/"/>
      <url>/2017/11/26/%E6%9D%AD%E5%B7%9E%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>這次的杭州行原本不在我的本年的行程內，因為換了一個工作，同事原本是說我不會有出差的機會，可是後來設計師加入，認為是開發一個新的產品，所以不管怎麼樣都要過去瞭解當地使用者（民情），反正現在我也不能做什麼，而且只有我待過類似的工作場所，就讓我參與需求分析的部分，所以也需要我一起到當地一起考察。</p><p>本篇日記不會只記錄工作的事情。</p><a id="more"></a><hr><h2 id="到底要不要掛號？"><a href="#到底要不要掛號？" class="headerlink" title="到底要不要掛號？"></a>到底要不要掛號？</h2><p>在台灣看病，不管是到診所還是醫院，我們都會習慣先找護士或護理師掛號，因為我們知道不掛號，醫生就不知道要叫到我們的號碼（沒掛號等於沒取號，這不是廢話？！），可是當我們到當地體驗時，發現很多診所都是沒有掛號的，應該說是不要求這個流程，許多病人都是直奔診間（醫生在的房間），然後跟醫生說我要看病！對！就是直奔診間。那診間門不關的嗎？ㄜ…我看是都沒在關的啦！你問會不會尷尬？我看大家都頗自然的啊～</p><p>不過其實醫生都希望大家都可以掛號、排隊，因為這樣醫生才能專心看目前這一位病人，像是我也不習慣有主管或客戶在旁邊看我寫程式，原本能寫好的部分，都因為緊張不知道要寫什麼了。</p><hr><h2 id="叭叭叭！我要過去摟～"><a href="#叭叭叭！我要過去摟～" class="headerlink" title="叭叭叭！我要過去摟～"></a>叭叭叭！我要過去摟～</h2><p>很多人都問說，大陸這邊是不是路上很常聽到喇叭聲啊？我的回答是肯定的。</p><p>其實出了台灣，喇叭的聲音代表很多意義，絕對不是想要跟你起爭議。就我的觀察，杭州司機喇叭聲的意義有以下幾種：</p><ul><li>我在你左後方，我要超你車摟～（通常是長按，直到我的車身超過你的車身為止）</li><li>欸！都綠燈了，怎麼還不走啊？不要滑手機了。（很多人真的都邊開邊滑手機，而且左手邊有個手機架是很正常的事情，就像是身為一個汽車維修員，隨身有個板手也是很正常的）</li></ul><p>變換車道在這邊是很稀鬆平常的事情，很少有人是因為別人突然插到你面前按喇叭的。</p><hr><h2 id="很像德州電鋸殺人魔的電瓶車"><a href="#很像德州電鋸殺人魔的電瓶車" class="headerlink" title="很像德州電鋸殺人魔的電瓶車"></a>很像德州電鋸殺人魔的電瓶車</h2><p>在這裡最要注意的不是公車、計程車、摩托車（這裡沒有），是<strong>電瓶車</strong>，其實就是電動車，為什麼呢？因為他會無聲無息地出現在你的旁邊，在你後面你可能都不知道，只有當他出現在你視線時，你才會發現他的存在，我被嚇到好幾次，有次更誇張，他一直按喇叭，可是電瓶車的喇叭也被設計成很小聲，所以我都沒有感覺在對我按喇叭…</p><hr><h2 id="哥是沒再帶現金的啦"><a href="#哥是沒再帶現金的啦" class="headerlink" title="哥是沒再帶現金的啦"></a>哥是沒再帶現金的啦</h2><p>在這裡最常見的支付方式不是現金、也不是信用卡，是<strong>支付寶和微信支付</strong>，每個人都一定會有一支智慧型手機，而且裡面一定會裝支付寶和微信，你的智慧型手機沒有這兩個，就像是手槍裡面沒有子彈，你帶了也沒用，這一點我真的很佩服他們，因為這代表他們每個人一定都有智慧型手機（可能連幼稚園小孩都要有），而且一定很會用，最重要的是還要有網路，可見杭州網路覆蓋率很高，沒有支付寶感覺很像次等公民，很多東西都享受不到，像是公共自行車、自動販賣機等。</p><p>但是我很好奇，他們如果真的沒有網路時又該怎麼辦？因為好像真的很多人有了支付寶之後，就沒有再帶現金的，因為我們再搭機場巴士要去機場時，就遇到一位先生沒有現金，但是搭機場巴士又只能付現金，後來不知道怎麼樣了。杭州好像跳過了像是我們使用悠遊卡或者其他代幣的支付方式，直接進化到使用手機和網路支付，覺得相當有魄力。</p><hr><h2 id="什麼！這一桌只要一張紅色的？"><a href="#什麼！這一桌只要一張紅色的？" class="headerlink" title="什麼！這一桌只要一張紅色的？"></a>什麼！這一桌只要一張紅色的？</h2><p>我們在這邊最常去的就是西湖銀泰城，我在杭州就看過三家銀泰城，銀泰城是這邊很常見的 Shopping Mall，銀泰城裡面都會有許多家適合聚餐的地方，像是外婆家、綠茶、新白鹿等，這三家可謂首推啊！不只好吃，還很便宜，有時三菜真的不到 100 元人民幣（換算成台幣約 450 元），很夠三個人吃，如果要再來杭州玩，我一定放心把菜點下去。</p><p>順帶一提，這裡除了吃得很便宜（跟台北比的話），計程車也很便宜，起步價是 11 人民幣，換算成台幣也是 50 元左右，但聽說最近在爭取漲價。</p><hr><p>這裡很多體驗和台灣是相差很多的，還有很多事情都很有趣，不過最近工作比較忙，就這樣啦！</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杭州 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX 找到佔用 Port 的程序並殺掉</title>
      <link href="/2017/10/01/OSX-%E6%89%BE%E5%88%B0%E4%BD%94%E7%94%A8-Port-%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%A6%E6%AE%BA%E6%8E%89/"/>
      <url>/2017/10/01/OSX-%E6%89%BE%E5%88%B0%E4%BD%94%E7%94%A8-Port-%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%B8%A6%E6%AE%BA%E6%8E%89/</url>
      
        <content type="html"><![CDATA[<p>身為一個攻城屍，電腦的 Port 被佔是很常見的事情，但是每次都想不起來怎麼找到並殺掉..</p><a id="more"></a><hr><h2 id="找到佔用-port-的程序"><a href="#找到佔用-port-的程序" class="headerlink" title="找到佔用 port 的程序"></a>找到佔用 port 的程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i tcp:3000</span><br></pre></td></tr></table></figure><p>tcp:3000 就是找到佔用 Port 3000 的條件</p><h2 id="殺掉指定的-PID-程序"><a href="#殺掉指定的-PID-程序" class="headerlink" title="殺掉指定的 PID 程序"></a>殺掉指定的 PID 程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 &lt;PID&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://stackoverflow.com/questions/3855127/find-and-kill-process-locking-port-3000-on-mac" target="_blank" rel="noopener">stackoverflow</a></p>]]></content>
      
      
      <categories>
          
          <category> OSX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Google App Script Log</title>
      <link href="/2017/10/01/Google-App-Script-Log/"/>
      <url>/2017/10/01/Google-App-Script-Log/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章 <a href="/blog/2017/10/01/angular-使用-google-試算表當資料庫/">angular 使用 google 試算表當資料庫</a> 因為遇到 Google App Script 一直不知道接到的參數為何，所以亂找了一通，也發現有個工具可以使用，分享給大家。</p><a id="more"></a><hr><p>在 Google App Script 的工具列 -&gt; 檢視 -&gt; Stackdrive Logging 可以看到過去執行的紀錄，有人會問，看工具列 -&gt; 檢視 -&gt; 執行紀錄有什麼差別？<br>兩者都會在錯誤發生時記錄 log，但是如果是要遠端偵錯，可能就需要透過 Stackdrive Logging，因為我不管程式碼怎麼下，只要不使用 debug.gs 就不會出現在”執行記錄”</p><p><img src="/blog/images/toolStackdrive.png" alt="Stackdrive Logging"></p><h2 id="執行紀錄"><a href="#執行紀錄" class="headerlink" title="執行紀錄"></a>執行紀錄</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.log(&quot;log message&quot;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/toolLogHistoryView.png" alt="執行紀錄"></p><h2 id="紀錄檢視器-Stackdriver"><a href="#紀錄檢視器-Stackdriver" class="headerlink" title="紀錄檢視器 Stackdriver"></a>紀錄檢視器 Stackdriver</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#123;message: &apos;Function Input&apos;, initialData: JSON.stringify(e)&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/toolStackdriveView.png" alt="執行紀錄"></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developers.google.com/apps-script/reference/base/logge" target="_blank" rel="noopener">Google App Script Class Logger</a><br><a href="https://developers.google.com/apps-script/guides/logging" target="_blank" rel="noopener">Google App Script Log</a></p>]]></content>
      
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular 使用 google 試算表當資料庫</title>
      <link href="/2017/10/01/angular-%E4%BD%BF%E7%94%A8-google-%E8%A9%A6%E7%AE%97%E8%A1%A8%E7%95%B6%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2017/10/01/angular-%E4%BD%BF%E7%94%A8-google-%E8%A9%A6%E7%AE%97%E8%A1%A8%E7%95%B6%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>最近一直想要試作一些個人用的 APP，然後試試看用 ionic 3 寫看看，看能不能每天自己用，然後慢慢改善、慢慢收集一些資料，做一些小功能的試做，不過用 ionic 3 開發，真的遇到蠻多問題的，像是我就不知道資料庫應該怎麼抉擇，一開始用 SQLite 結果開發起來好綁手綁腳的 ＱＱ</p><a id="more"></a><hr><p><em>因為 ionic 2 之後是根據 Angular 架構設計的，所以兩者的程式碼和檔案架構會很像，我文章中 ionic 和 Angular 可能會切換來切換去的，請見諒。</em></p><p>網路上 Google “使用 Google 試算表當作資料庫” 就可以找到很多資源，不過大家都是寫說怎麼使用 jQuery，因為寫網頁，用 jQuery 是最省事的，但是 Angular 本身就有 http 的模組可以使用，不必再靠 jQuery，但是我在參考網路上資源時遇到一些問題，後來解決了，分享給大家。</p><h2 id="Angular-Service"><a href="#Angular-Service" class="headerlink" title="Angular Service"></a>Angular Service</h2><p>這裡不多做 Angular Service 的介紹，只要知道 Angular 的 Service 主要是用來存取 App 內資料的，不管是透過 API 還是將資料寫死在 Service 都是常見的用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public addTrans(params): Observable&lt;boolean&gt;&#123;</span><br><span class="line">    return this.http.post(&quot;https://script.google.com/macros/s/AKfycbxDMcqskNOmuaRvku5A85Tauz-99ltopHyI8PVHQO5DZGrcadLR/exec&quot;, JSON.stringify(params))</span><br><span class="line">        .map(res=&gt;&#123;</span><br><span class="line">            return res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addTrans() 是一個將資料傳送給 Google App Script API 的函式。<br>Observable 是 Angular 使用 RXJS 經常會用到的物件類型，可以當作 Promise 進階應用。<br>this.http.post() 就是 Http Request 方法（method）指定為 POST 的函式，至少要傳兩個參數，第一個為 url，第二個為 data<br>JSON.stringify() 建議將參數使用字串的方式傳給 Google App Script API，也可以等後面介紹 Google App Script 實在自行決定。<br>map(res=&gt; res.json()) 將 Google App Script API 回傳的結果以 json 格式回傳給呼叫 addTrans() 的對象。</p><p><a href="https://github.com/contemplator/plan-consumption/blob/master/src/app/app.service.ts" target="_blank" rel="noopener">程式碼</a></p><hr><h2 id="Google-試算表"><a href="#Google-試算表" class="headerlink" title="Google 試算表"></a>Google 試算表</h2><p>在自己的 Google 雲端硬碟建立一個試算表，記下該試算表的 id</p><p><img src="/blog/images/googleSheetId.png" alt="Google 試算表 id"></p><hr><h2 id="Google-App-Script"><a href="#Google-App-Script" class="headerlink" title="Google App Script"></a>Google App Script</h2><p>邏輯和網路上搜尋前幾名的做法一樣</p><ol><li>先取得 Angular Service 傳進來的參數</li><li>設定要儲存的試算表 ID 和 試算表工作表名稱</li><li>儲存資料</li></ol><p>差別主要在於取得參數，原本是 e.parameters，要改為 e.postData.contents，程式碼如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function doPost(e) &#123;</span><br><span class="line">  // 取得 request 資料</span><br><span class="line">  var params = JSON.parse(e.postData.contents);</span><br><span class="line">  var id = params.id;</span><br><span class="line">  var datetime = params.datetime;</span><br><span class="line">  var price = params.price;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  // 取得指定的 google 試算表</span><br><span class="line">  var spreadSheet = SpreadsheetApp.openById(sheetId);</span><br><span class="line">  </span><br><span class="line">  // 取得指定的工作表</span><br><span class="line">  var sheet = spreadSheet.getSheetByName(sheetName);</span><br><span class="line">  </span><br><span class="line">  // 取得最後一行的行數</span><br><span class="line">  var lastRow = sheet.getLastRow();</span><br><span class="line">  </span><br><span class="line">  // 儲存資料</span><br><span class="line">  sheet.getRange(lastRow + 1, 1).setValue(id);</span><br><span class="line">  sheet.getRange(lastRow + 1, 2).setValue(datetime);</span><br><span class="line">  sheet.getRange(lastRow + 1, 3).setValue(price);</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  // 回傳結果（結果須為字串）</span><br><span class="line">  return ContentService.createTextOutput(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/contemplator/plan-consumption/tree/master/src/google-scripts" target="_blank" rel="noopener">完整程式碼</a></p><ul><li><p>JSON.parse()</p><blockquote><p>因爲我 Angular Service 傳進來是 JSON 格式的字串，所以可以使用 JSON.parse() 再轉回 JSON 的物件，後面要取得比較容易。</p></blockquote></li><li><p>e.postData.contents</p><blockquote><p>我是用 Google App Script 的 console.log() 才找到我傳進來資料的結構，才知道要從 postData.contents 取得<br><a href="/blog/2017/10/01/Google-App-Script-Log/">Google App Script Log</a></p></blockquote></li></ul><hr><h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><p>因為是使用 ionic 的 serve 在運行，會運行在 http:localhost:8100 下，所以會遇到此情況，你可以選擇直接 build 成 App，應該就不會遇到此情況，可是每次 build 都要一陣子，你就可以使用 Proxy 解決這問題。</p><h3 id="ionic-config-json"><a href="#ionic-config-json" class="headerlink" title="ionic.config.json"></a>ionic.config.json</h3><p>這是 ionic serve 在運行時會來參考的一個設定檔，加入以下訊息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;proxies&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;path&quot;: &quot;/goto&quot;,</span><br><span class="line">      &quot;proxyUrl&quot;: &quot;https://script.google.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>其他設定不用動到，加入後記得要符合 json 格式</p><h3 id="Angular-Service-1"><a href="#Angular-Service-1" class="headerlink" title="Angular Service"></a>Angular Service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public addTrans(params): Observable&lt;boolean&gt;&#123;</span><br><span class="line">    return this.http.post(&quot;/goto/macros/s/AKfycbxDMcqskNOmuaRvku5A85Tauz-99ltopHyI8PVHQO5DZGrcadLR/exec&quot;, JSON.stringify(params))</span><br><span class="line">        .map(res=&gt;&#123;</span><br><span class="line">            return res.json();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> <a href="https://script.google.com/" target="_blank" rel="noopener">https://script.google.com/</a> 改為 /goto </strong></p><p>這樣 localhost:8100 的 domain 就會被認為是在 script.google.com 下向 API 執行 request</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://www.wfublog.com/2017/01/google-apps-script-spreadsheet-write-data.html" target="_blank" rel="noopener">用 Google Apps Script 操作試算表 (1)製作資料庫 + 寫入資料</a><br><a href="https://www.techiediaries.com/ionic-2-proxy/" target="_blank" rel="noopener">The Ionic 2 proxy</a><br><a href="/blog/2017/10/01/Google-App-Script-Log/">Google App Script Log</a></p><hr><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><p><a href="https://github.com/contemplator/plan-consumption" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等空洞教育</title>
      <link href="/2017/09/30/%E9%AB%98%E9%BD%A1%E6%95%99%E8%82%B2%E7%A4%BE%E6%9C%83/"/>
      <url>/2017/09/30/%E9%AB%98%E9%BD%A1%E6%95%99%E8%82%B2%E7%A4%BE%E6%9C%83/</url>
      
        <content type="html"><![CDATA[<p>前幾個禮拜和學妹約吃飯，因為我回台中一陣子了，她前一陣子找到工作，想說很久沒見面，順便吃吃飯、聊個天，聽她說工作上的事情，我們就聊到感覺彼此年紀為什麼感覺這麼大！</p><a id="more"></a><hr><p>我們都是 8 年級生，說自己老了可能會被很多人幹譙，20 幾歲跟人家喊老，讓我解釋一下為什麼我們這個覺得…</p><p>我們都是正常大學畢業，所以在 22 歲畢業了，然後我花了一年當服役，她花了一點時間在準備考試（什麼考試我不知道啦～），然後就這樣到了 23 歲，我一退役花了一點時間休息，到了 24 歲開始我的正常上下班生活（之前我也是有一點收入的，在家幫別人寫寫程式），覺得到目前生活還算不錯，我也沒什麼擔心了（除了擔心自己會孤老終身之外），然後學妹就跟我說她之前很徬徨，因為她工作找了好久，為什麼五專和大學念了這麼久，找工作卻這麼不順利？難道這幾年都荒廢了嗎？</p><p>細想了一下，我覺得我大學生活沒有留白，但是我是覺得因為我陰錯陽差的雙主修了一個還蠻有活力的課程，因此我的大學生活不覺得無聊，也感覺比別人充實，但是如果抽掉了這一部份，感覺就剩下羽球讓我比較懷念，我真的想不起來我在大學學到了什麼讓我覺得受益匪淺的，現在我最常用的技術和觀念，也都是自己在學時的接案和實習學到的，到底是為什麼會這樣，是我太不懂得惜福嗎？</p><p>我不知道是不是只有我念的科系這樣，可是我念的應該還蠻和社會接軌的啊！資訊類別的應該很實用啊！其他的科系可能還比我們更徬徨吧？</p><p>然後我今天看到了這一篇文章 <a href="https://buzzorange.com/techorange/2017/09/30/what-happen-to-our-colleage/" target="_blank" rel="noopener">\【為何人生如此空白？\】台灣人最愛講產學落差了，空洞高等教育就是罪魁禍首</a>，我們大學生時期的選課標準是什麼？我就不明說在一些小道上流傳的選課守則了了，我來說說我的（因為我覺得我選課標準和別人有點不一樣），我選課一是看課名有沒有興趣，我都直接選實用的課程，如程式開發等；一個就是看多不多人搶，多人搶得我就不去了，原因只是想說這樣很難選上，也不管老師怎麼樣，因為我認為老師教得好不好，從朋友口中聽到的好，應該就是講的比較有趣，我去上課都是一種「知道了」的感覺，真的要變成我的知識，還是看我有沒有興趣和真的會不會用到。</p><p>在大學時非學程的課（就是我雙主修的課程），我的選課標準就是照前面我提到的標準，但很常受到時間和選課人數的限制，所以最後我都選了一些冷門，我又不是很有興趣的課程（可能也因為我念的學校本來我有興趣的就不多吧），反倒是雙主修的課程都可以讓我選到我想選的課程，而且選的時候都會預期在課堂上學到什麼，而不是窮擔心選不選得上，所以現在可以讓我想起來的課程內容都是學程的課程。</p><p>在大學，我真的覺得許多課程都是在浪費我的時間，理由很多，但我覺得最主要的原因就是我不知道它用來做什麼？他也沒有讓我瞭解他可以用來做什麼？可能我想要學的東西都太篇工具型，像是程式語言這種東西，在課堂上總不可能帶著學生寫程式吧！可是講一些 Clean Code 的觀念總可以吧？有接觸過這本書的人都知道，這本書實際提到的程式碼不多，許多都是經驗談，這難道和商管類的經驗談就不一樣嗎？</p><p>那好，不說程式，說說專案管理總可以吧？但是我怎麼只記得我一直在系上的課程上學到專有名詞，案例考試都是考歷史上發生的事情？我如果要賺錢我難道要用別人用過的方法嗎？</p><p>其實我想說的是，為什麼會覺得人生如此空白，是因為我們在做決定時都沒有想過我想得到什麼結果？如果你是想要輕鬆過我就沒辦法了，那就不要抱怨生活太輕鬆吧，享受輕鬆的人生就好。有時候我們就是花太少時間想，要嘛不想，要嘛就是請別人幫我們決定，得到的當然大多就不是我們想要的。</p><p>PS. 原本我是想要打高齡教育社會，抱怨一下 22 歲大學畢業，讓我們這些人覺得到 25 遂，或者 30 歲要穩定下來都太倉促了，可是後來想想好像還好，所以邊打邊改了想法。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在 chrome 使用 sourceMap</title>
      <link href="/2017/09/25/%E5%9C%A8-chrome-%E4%BD%BF%E7%94%A8-sourceMap/"/>
      <url>/2017/09/25/%E5%9C%A8-chrome-%E4%BD%BF%E7%94%A8-sourceMap/</url>
      
        <content type="html"><![CDATA[<p>對於剛接觸程式的人，可能看到某些 .map 結尾的檔案都會覺得很奇怪，不知道是什麼東西，而且裡面的內容都看不懂，就不理他，其實這是一種叫做 source map 的檔案，它的用途是用來找到原本的程式碼。什麼意思？</p><a id="more"></a><hr><h2 id="起源及用途"><a href="#起源及用途" class="headerlink" title="起源及用途"></a>起源及用途</h2><p>在開始寫 angular 使用 typescript 開發之後，才知道 javascript 到底有多難寫，有多難維護，angular 都建議先用 typescript 開發取代原本 js 的行為，在開始運行 server 或者要編譯靜態檔時，才又把 typescript 編譯為 javascript 檔案，直接編譯過去也可以，你要產生 source map 檔案也可以，source map 就是幫你從編譯後的 javascript 檔案某段程式碼找到對應的 typescript 檔案內的程式碼。</p><p>另外一個情境是你需要壓縮檔案大小，你可能會直接開發 javascript 檔案，可是當你要上到 server 上的時候，為了效能可能會做 uglify 或 minify 的動作，做完之後程式碼他娘或他爸（也就是你）都認不出來，source map 一樣可以幫你找回你兒子原本的樣貌。</p><p>左邊為編譯前的檔案，右邊為編譯後的檔案</p><p><img src="/blog/images/compileDiff.png" alt="編譯前的檔案及編譯後的檔案"></p><p>這有什麼用處？</p><p>一般來說是用來做 debug 用的，這樣你在用編譯後的 javascript 檔案 debug 才會知道自己應該修改哪一段 typescript。</p><p>後來我才發現有更好的做法。</p><hr><h2 id="檔案的比較"><a href="#檔案的比較" class="headerlink" title="檔案的比較"></a>檔案的比較</h2><p>在 chrome 有開發者工具可以用這大家都知道，可是你知道可以直些在 chrome 修改程式碼，將修改的部分也修改到 server 下的檔案嗎？這時靠的也是 source map 的幫助，沒有的話就別想做到。</p><p>一開始你在編譯的時候就記得要指定也要產生 source map 檔案，這個步驟就不說明，因為每個程式語言和你自己使用的套件不一樣，不過我會在最後附上一個簡單的範例給大家參考。</p><p>檔案大概會像是這樣子。</p><p>左邊為編譯後的檔案，右邊為 source map（看不懂也沒關係，鬼才看得懂）</p><p><img src="/blog/images/sourceMapFile.png" alt="編譯後的檔案及 source map"></p><p>然後在 server 運行起來，我們來看看有什麼差異</p><p>沒有 source map</p><p><img src="/blog/images/withoutSourceMap.png" alt="沒有 source map"></p><p>有 source map</p><p><img src="/blog/images/withSourceMap.png" alt="有 source map"></p><p>有 source map 你會發現他會連沒有編譯過的檔案也幫你列出來，是不是就看得懂自己應該要改哪裡。但其實如果知道程式碼事自己寫的，應該也都知道，不用靠 source map。另外一個好處是在 chrome 可以下中斷點，因為 uglify 後都會變成一行，我看你怎麼下中斷點！</p><p><img src="/blog/images/breakpoint.png" alt="中斷點"></p><hr><h2 id="在-chrome-的操作"><a href="#在-chrome-的操作" class="headerlink" title="在 chrome 的操作"></a>在 chrome 的操作</h2><p>現在來教大家怎麼直接從 chrome 直接修改檔案內的程式碼</p><ol><li>將檔案或資料夾加入到 workspace </li></ol><p>記得切換到 source 頁籤，如果 chrome dev tool 在對應的路徑下找的到 source map 檔案，應該會幫你列出尚未編譯的檔案。</p><p>對想要進行修改的檔案右鍵，選擇 Add Folder to Workspace</p><p><img src="/blog/images/addFolderToWrokspace.png" alt="Add Folder to Workspace"></p><ol start="2"><li>編譯後的檔案，映射到相對應的編譯前檔案（可能可省略，沒有成功就記得回來做這個動作）</li></ol><p><img src="/blog/images/mapToFileSystemResource.png" alt="Map to File System Resource"></p><ol start="3"><li>對檔案進行修改</li></ol><p>映射成功應該會像是我這樣的畫面，沒有的話…也是可以修改看看，然後進行到下一個步驟看看有沒有成功。</p><p><img src="/blog/images/addFolderToWrokspaceResult.png" alt="Add Folder to Workspace Result"></p><p>要修改的檔案要選擇畫面中橘色資料夾下的檔案喔！</p><ol start="4"><li>儲存</li></ol><p>按下 Ctrl + S 就好（mac 是 command + S)</p><ol start="5"><li>重新整理</li></ol><hr><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><p><a href="http://fireqqtw.logdown.com/posts/203088-sass-how-to-use-the-source-map" target="_blank" rel="noopener">Sass-如何使用Source Map</a></p><p><a href="https://github.com/contemplator/gulp-samle/" target="_blank" rel="noopener">contemplator/gulp-samle</a> 這連結是我使用 gulp 編譯 scss 和 uglify javascript 的範例，大家可以下載下來操作看看：</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> source map </tag>
            
            <tag> map </tag>
            
            <tag> chrome </tag>
            
            <tag> chrome devTool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁接案心得</title>
      <link href="/2017/09/21/%E7%B6%B2%E9%A0%81%E6%8E%A5%E6%A1%88%E5%BF%83%E5%BE%97/"/>
      <url>/2017/09/21/%E7%B6%B2%E9%A0%81%E6%8E%A5%E6%A1%88%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>上上禮拜到台北找朋友聚會，結果就陰錯陽差地接了一個網頁案子，想說只是做做靜態網頁，只是稍微趕一點而已，而且也想說順便看看自己前端的能力。</p><a id="more"></a><h2 id="故事是這樣的"><a href="#故事是這樣的" class="headerlink" title="故事是這樣的"></a>故事是這樣的</h2><p>一開始我就想說要用 angular 寫網站，因為這幾個月都習慣 angular 的開發模式，而且也可以輕易的部署到 github 上，但是沒想到這就是我錯誤的第一步。</p><p>我在交貨前一天就把東西都做好給負責和我接洽的人，就差一些說明和程式碼註解就算完成，而且原本預期是要花一個禮拜做完，我這一個禮拜應該只用了禮拜六一個整天，還有三天晚上的時間就做完了，其實還蠻輕鬆的，不過不知道我自己哪根筋不對，竟然想要幫對方考慮 SEO 的問題，然後就開始了一整段煩人的路…</p><p>上網找了 SEO 和 angular 還有 SPA （一頁式網頁）的文章，發現 google robot 在爬網站時並不會去等待你的 js 完成，所以用 angular 或者其他 SPA 所爬到的內容不會像是真的使用者瀏覽網頁到的內容，所以 SEO 分數會相對低，然後我就決定不用 angular 幫他們做，我自己也想說反正應該就複製貼上而已，應該不會很麻煩，但是事情不是憨人想的那麼簡單。</p><p>後來我花了整整一天半的時間將 angualr 架構改成不套任何前端框架的網頁（ bootstrap 和 jquery 應該不算框架吧！）。順便試用了一下 Prepros 和 gulp，最後決定使用 gulp，還有修改一些要調整的樣式，還有增加一些手機上手勢的操作，沒有還有了！我沒想到我花了這麼久的時間在複製貼上，因為在 angular 的 html 可以加入許多判斷和迴圈，但是少了這些功能，許多都要一個一個加入：</p><ul><li>像是在 js 增加變數判斷，判斷後再修改 html 元素上的 class，在 angular 只要有 ngClass 就可以解決，不用動到 js</li><li>*ngIf 也可以決定要不要讓元素在 DOM 裡面，其效果和 display: none 效果根本不一樣</li><li>*ngFor 也可以減少我的 html 程式碼量，修改 json 資料也比 html 容易多了</li></ul><p>還有其他優點像是 component 和 router 的處理也讓我省去許多問題，還有使用 typescript 可以先省去一些低級錯誤，讓我覺得 angular 真的會讓我開發起來簡單很多，不考慮一些 SEO 和一些手機上增加手勢功能還不熟之外。</p><hr><h2 id="最後總結一下我這次接案的心得"><a href="#最後總結一下我這次接案的心得" class="headerlink" title="最後總結一下我這次接案的心得"></a>最後總結一下我這次接案的心得</h2><ol><li><p>先考慮清楚要做的網頁形式，如果像是一頁或者很少頁的形象網站，可以不用套任何框架，因為框架都會有點大，解決許多問題，但如果沒什麼問題，就不用套了。</p></li><li><p>如果要做 RWD，一開始當然先以自己電腦螢幕寬度先做好一版，media query 我覺得慢慢寫下去比較好，像是我的螢幕是 1440px，之後在寫 1200px 一直寫到 320px；我一開始寫完 1440px 就直接寫 360px，結果 360px 調整的太多，但是也要用到 420px，因為我 media query 是這樣寫的，所以才覺得由大寫到小比較好，因為前面的會套用到後，：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width: 480px)&#123;...&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>img 也要養成寫 alt 的習慣，對於 SEO 有幫助</p></li><li><p>雖然使用模板工具可以減少程式碼量，但是許多都會對 SEO 有害</p></li><li><p>程式部分的 SEO 感覺起來好像並不是那麼重要，因為使用者體驗（速度）、搜尋正確度（取決於 Url 和點開量）和廣告反而才是重點的感覺，那這樣以上除了第二點之外都是廢話摟？（其實整篇都是廢話…）</p></li></ol><hr><h2 id="最後分享一些工具和網站："><a href="#最後分享一些工具和網站：" class="headerlink" title="最後分享一些工具和網站："></a>最後分享一些工具和網站：</h2><ol><li><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a></li></ol><p>可以檢查你的網站速度問題，js、css 等檔案是否太大，會提供你一些建議（我記得以前還可以幫你直接壓縮檔案，現在沒了ＱＱ）</p><ol start="2"><li><a href="https://tools.pingdom.com/" target="_blank" rel="noopener">Pingdom Website Speed Test</a></li></ol><p>感覺更猛的測速網站，可以檢查每個檔案和網站讀取的過程，做最耗時間的分析，我覺得對於新手比較好瞭解網站的問題。</p><ol start="3"><li>Chrome 開發者工具</li></ol><p>就不介紹了，其實這才是最好的工具，只要會用，以上兩者都可以不用看了（吧！？</p><ol start="4"><li><a href="https://dotblogs.com.tw/walter/2014/05/21/how-to-set-facebook-share-info" target="_blank" rel="noopener">Facebook 分享工具</a></li></ol><p>只要使用 &lt;a&gt; 就好，不用麻煩的設定 Facebook SDK 就可以讓使用者分享你的網站到他的塗鴉牆，不過如果要顯示讚數或者其他訊息就無法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript: void(window.open(&apos;http://www.facebook.com/share.php?u=your_web_site.com&apos;);&quot;&gt;點我分享&lt;/a&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><a href="http://www.wfublog.com/2015/04/facebook-meta-og-setting-thumbnail-title-description-author.html" target="_blank" rel="noopener">Facebook 分享網站的 meta 設定</a></li></ol><p>裡面有教 Facebook 分享的設定應該要注意和怎麼設定，雖然年代有點久遠，不過大部分應該都還適用。</p><ol start="6"><li><a href="https://developers.facebook.com/tools/debug/sharing" target="_blank" rel="noopener">Facebook 分享檢測網站</a></li></ol><p>設定完網頁的 meta 可以使用 Facebook 提供的網站檢查，看看是否有東西沒有設定好，最容易出問題的就是圖片。</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><ol><li><a href="https://blog.gtwang.org/web-development/tools-for-testing-website-performance-speed/" target="_blank" rel="noopener">五個測試網站效能的免費工具</a></li><li><a href="https://dotblogs.com.tw/walter/2014/05/21/how-to-set-facebook-share-info" target="_blank" rel="noopener">walter 心得筆記</a></li><li><a href="http://www.wfublog.com/2015/04/facebook-meta-og-setting-thumbnail-title-description-author.html" target="_blank" rel="noopener">WFU BLOG</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玉山銀行 </tag>
            
            <tag> 網站測試工具 </tag>
            
            <tag> angualr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被討厭的勇氣</title>
      <link href="/2017/09/03/%E8%A2%AB%E8%A8%8E%E5%8E%AD%E7%9A%84%E5%8B%87%E6%B0%A3/"/>
      <url>/2017/09/03/%E8%A2%AB%E8%A8%8E%E5%8E%AD%E7%9A%84%E5%8B%87%E6%B0%A3/</url>
      
        <content type="html"><![CDATA[<p>前幾個禮拜剛看完這本書，這禮拜就體會到了，因為最近和主管提了離職…</p><a id="more"></a><p>提了離職的原因不是因為在原本的職場待得不理想，因為說都會有點抱怨，可是這些抱怨的理由和其他人比起來微不足道，不會是導致我真的要離職的理由，所以我對於原本的工作並沒有什麼怨言，是我原本就計劃不會在這個職位上待太久，這裡真的是我沒有好好想清楚造成公司困擾，就像是主管說的，如果真的是只待一兩年的人他怎麼都不會錄取，儘管再優秀也是一樣，而我也犯了一個錯，就是認為也有很多人在一個工作上並不會待很長久，不過我的情況和別人不一樣，我比較像是預謀，所以主管生氣也是理所當然的，他就說我這樣就是不夠義氣。</p><p>經過這件事情，我也認為自己是不是其實很自私，因為仗著自己比較沒有後顧之憂，所以就比較不為他人考慮？這問題講起來好像也有點沒有邏輯，算了。我就是想要反省一下自己是不是是不是真的沒有做好，或者真的對不起誰，雖然我可以說我工作上也是盡心盡力，秉持著做一天和尚撞一天鐘的心態，至少沒有愧對公司給我的薪水，但是誰知道那些薪水有多少是真的付出在我的每日貢獻，又有多少是看在我未來的產值上，如果有一半是看在未來，我這時候離職，應該就是公司的成本吧！但這些東西要計算起來就太困難了，經過這件事情，我又再一次陷入了人生的困境中，雖然離職是在必行，但是心中仍會有點疙瘩！</p><p>被討厭的勇氣提到：人生所有問題都來自於人際關係。如果沒有人，人生就不會有問題，但是就目前看來是不可能發生沒有其他人的情況，我們做的每一件事情都會影響到別人，就算不會影響別人，別人對你的行為一定都會有所評斷，如果我們很介意，自然就會對自己造成壓力，所以解決辦法就是不要去介意！聽起來好像有點極端，或者認為有點反社會，可是不可否認的，這是一個很有效的作法，只是自己做不做得到，很多人都做不到，就像是我，我起初也想說既然會造成傷害，那就是著彌補，但是彌補這件事情就是建立在已經對別人造成傷害這件事情上，自己認為會對被害者有些補償作用，但是對方可能不領情，或者覺得傷害這件事情就是不好的，已經沒有轉圜的餘地，就像是我試著要把手上的東西好好收尾，但是主管認為怎樣收尾都是沒有意義的，他之後還是要找別人接手，都是成本。</p><p>被主管抱怨了一頓之後我的確是會覺得有點愧疚，但是既然主管都這麼說了，我如果真的認真讀完被討厭的勇氣，我現在應該做的就是做完我認為自己應該做的事情，同時也聽取主管的一些建議，如果真的要走，也就不要想著把什麼東西做完，就好像是男女朋友分手一樣還想著可以繼續當朋友，繼續多為對方做什麼，我們就把自己能做的做完，剩下的就是看對方自己的決定，對方是怎麼想的，我們就不要去干涉對方的課題。</p><p>雖然主管對我的行為有諸多不滿，之後也說了一些重話，原本我也是覺得這樣很不好，自己也糾結一陣子，但是對於結果並不會有什麼影響，我原本預期還會再拖一陣子才離開公司，但是因為主管的建議，讓我也不必再拖，換個想法，我就不必再擔心後續的事情，這方面說不定我還得感謝主管多年來的經驗，他讓我們彼此不必再浪費精力在彼此身上，不知道是因為這本書的影響，現在對於這件事情是有點釋懷了，剩下的就是好好交接下去。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 離職 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>結腸性潰瘍（後續）</title>
      <link href="/2017/09/03/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E5%BE%8C%E7%BA%8C%EF%BC%89/"/>
      <url>/2017/09/03/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E5%BE%8C%E7%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>出院已經一陣子了，還是被大多數當成病人看待，但其實我都會跟別人說我已經和正常人無異，除了吃東西比較注意之外，因為這場病讓我有了一些改變，而且還蠻顯著的。</p><a id="more"></a><p>開始住院之後就一直有在吃類固醇，類固醇好像會對身體產生很多影響，對我來說這個影響超巨大的，因為我過去很不喜歡吃東西，吃不出東西的好，只知道自己不喜歡吃什麼，有一部份就是很不會餓吧！別人都說飢餓感是最好的調味料，可是如果感覺不到飢餓感，吃什麼東西都會食之無味，但是自從開始吃類固醇之後，就會很容易感覺到飢餓，在住院期間，還經常因為太過飢餓而無法入眠，出院可以行動自如後就可以四處去找東西吃，出院的第一個禮拜每一天都會吃到六餐，從早上七點就一直不斷進食到晚上十點，不然晚上十一點又會餓到很難睡。現在吃東西都覺得很好吃，也比較不會像以前一樣容易飽，飽了就想昏昏欲睡。</p><p>除了食慾有進展之外，住院那段期間也讓我自己生活上有了些調整，雖然回到台中工作，已經讓生活非常的規律，可是卻讓我覺得懶散起來，雖然一直有在學習新知，工作上也沒有鬆懈，可是在日常休閒上都是逛八卦版為主（汗顏…），住院一開始雖然也一直在逛ＰＴＴ，可是這樣的日子因為住院開始覺得不行了，因為實在太閒，每次上ＰＴＴ間隔變短，就好像隨時都在看新聞，但是新聞也沒有更新那麼快，每次看的都感覺是舊聞了，所以在住院期間就忽然開始買起了電子書，現在有空就把ＰＬＡＹ圖書打開來看，雖然每天看的不多，也不一定會看得很細很懂，可是有賴於現在科技的進步，電子書的功能筆記、書籤的功能比實際買一本書來看還更方便！</p><p>在住院前一直感覺自己沒有什麼時間（雖然現在也很常有這種感覺），過去一直會想要讓自己學習或者做什麼事情都很有效率，所以常常一心多用，或者想說做什麼可以順便做其他事情，可是最近想法有點改變了，之前做運動都會覺得會壓縮到我自修的時間，但其實後來認知到自己進修的時間實際上根本沒有辦法支撐這麼久的時間，運動也不會去消耗的自修的精力，過去運動可能都勉強到 30 分鐘，可是現在都會認真把暖身做完，然後做到蠻累的才會休息，不要影響到休息時間就都還好；還有之前一直懶得做的瑣事，現在都會願意花時間去做，像是起身去倒水、出遠門去買東西吃、有東西要處理就馬上處理，不會拖到積了很多才處理等，我最初認為是自己比較沒有重視工作了，所以時間變多了，但是好像又不是這麼一回事，比較像是認為對自己的所有事情要負責了，過去只想專心在某些領域上，其他事情都交給其他人處理，或者盡可能地花最少精力，但是後來認知到有些事情不自己做，或者未來沒有人幫自己做，可能會很難適應，不如自己趕快習慣自己做，還有像是一些事情是值得花精力去做的。</p><p>另外還有因為吃藥，讓我生活更規律了，我吃的藥還蠻多樣的，有飯前、飯後、睡前，而且吃藥都要和用餐時間隔開半小時以上，變成說我要隨時很注意時間，我的早餐不能太晚吃，不然吃藥時間晚了，我早餐飯後的藥和午餐飯前的藥就隔不開，所以我必須早上六點半就起床吃藥，這樣才能在七點半和家人一起吃早餐，每天十一點一定要吃藥，也一定要喝水，每天下午五點半也是，吃藥讓我更注意時間，我也不會每天只有午餐和下班才會離開電腦前，有更多時間站起來去裝水吃藥、上廁所。</p><p>說真的，這次得了這場病，似乎並沒有對我造成什麼傷害（後續還不知道，因為比較像是慢性病），反倒是讓我開始注意起之前不會注意的事情，也順便讓我開始調養身體，最重要的就是吃多一點，今年的目標就是讓自己的體重增加到 62 公斤！</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 結腸性潰瘍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>結腸性潰瘍（終）</title>
      <link href="/2017/08/17/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E7%B5%82%EF%BC%89/"/>
      <url>/2017/08/17/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E7%B5%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>7 / 22 第一次因腹痛門診<br>7 / 29 中國醫第一次門診<br>8 / 3 開始請假<br>8 / 7 榮總大腸鏡檢查住院<br>8 / 14 二次大腸鏡，沒有進步，改藥<br>8 / 15 好轉<br>8 / 17 出院</p><a id="more"></a><hr><p>今天 8 月 17 號，凌晨還是一直起來上廁所，可能都是因為抗生素打太多吧！每次都是凌晨 1 ~ 3 點就會進來打要，然後我就像是被叫起來上廁所一樣，幸好長大了，不會尿床，只是真的不知道尿在多什麼的，明明才過一個小時，就會有種憋很久的感覺。</p><p>今天預定要換針，因為左手點滴已經定點打了三天，今天凌晨都有點走針，開始漏水了，不過殘酷的是 11 點我的護理師跟我說，醫生今天幫我開出院通知了，所以…今天真白換了，過程中因為我在住院期間，裡面 10 天有 9 天都打在左手，所以左手的血管都被打完了，今天原本一開始也是要打左手，這樣我的慣用手右手才有發揮的用途，結果真的找不到地方打，試圖打了兩次，結果都把血管打破，聽到有點傻眼，不過好像血都留不多，沒幾分鐘就止住了，只是感覺比平常痛，最後只好打右手，只是插進去沒有兩個小時，就被通知出院了，護理師還跟我不好意思ＸＤ</p><hr><p>這幾天住院下來有幾個感想：</p><h2 id="太瘦真的不好"><a href="#太瘦真的不好" class="headerlink" title="太瘦真的不好"></a>太瘦真的不好</h2><p>做大腸鏡的時候被抱怨很難做</p><p>營養不良，幾天沒動就容易貧血</p><p>好像比較怕痛的感覺，超敏感</p><h2 id="餓肚子比吃飽還要痛苦"><a href="#餓肚子比吃飽還要痛苦" class="headerlink" title="餓肚子比吃飽還要痛苦"></a>餓肚子比吃飽還要痛苦</h2><p>在住院前幾天，還在抱怨一直沒有飢餓感，吃什麼都吃不下，結果最後結腸性潰瘍，被限制什麼都不能吃，只能喝東西，結果最後餓到快沒有感覺。之後就變得好容易餓，住院這幾天雖然一天吃到五餐，容易飽，但是餓肚子吃東西真的幸福很多。</p><h2 id="有自己的時間真好"><a href="#有自己的時間真好" class="headerlink" title="有自己的時間真好"></a>有自己的時間真好</h2><p>經常讓自己很長很忙，都在電腦前面寫程式、除錯，這幾天下來，閒到真的有點害怕，然後可以開始碰電腦的那天，真的如獲救贖，但是其實根本還無法寫程式，然後就開始整理一些事情，像是 email、讀書筆記、檔案、沒有看完的書和文章，最後發現這段時間過得很舒適，也覺得比自己埋首工作進步的多。</p><p>我覺得，我之後上班，因為會盡量多空出時間看書，看 google 圖書上買的書，自己訂閱的電子報，然後也放棄一些奇怪的念頭，不要像是無頭蒼蠅一樣亂學。順便留下筆記。</p><h2 id="覺得自己很幸運"><a href="#覺得自己很幸運" class="headerlink" title="覺得自己很幸運"></a>覺得自己很幸運</h2><p>幸好自己還在台中住，有家人可以照顧我，不然我真的不知道在外地一個人怎麼住院，這幾天就像個廢人一樣，不過如果我可以更獨立一點，我應該會更開心。</p><p>生病這幾天沒有刻意去跟大家說，就是一些平常會聊天的人說一下，說明我現在都沒辦法處理事情，然後就說出我的病情，很多人都很關心我，尤其是公司的人讓我很意外，因為很多人我認為我都沒有很經常去找他們說話，而且我進去大概半年（不知道是久是短），竟然有四個同事專程來看我，也有人線上關心我，真的讓我受寵若驚，自覺自己平常真的有對他們這麼好嗎？</p><h2 id="慶幸自己走對路、生對時間"><a href="#慶幸自己走對路、生對時間" class="headerlink" title="慶幸自己走對路、生對時間"></a>慶幸自己走對路、生對時間</h2><p>現在我只要有手機和筆電就可以做事情，可能是沒有薪資拿的事情，可是可是寫寫文章、看看書就讓我很開心，最痛苦的就是什麼事情都沒辦法做，如果生活在過去，我應該就是不起身做田，就是渾身不自在的那種，幸好現在科技發達，我可以躺或坐就可以做到很多事情。</p><h2 id="要開始調養身體"><a href="#要開始調養身體" class="headerlink" title="要開始調養身體"></a>要開始調養身體</h2><p>最近開始計劃增重，趁著這幾天食慾還很好的時候，然後每天量體重、不限制自己的飲食費、紀錄自己吃下的東西，希望 9 月 30 號可以有成果，運動的話，就看身體狀況了。</p><p>開始煩惱每天中午和下午要怎麼吃了…有人可以建議我嗎？</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 結腸性潰瘍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 修改螢幕截圖設定</title>
      <link href="/2017/08/16/mac-%E4%BF%AE%E6%94%B9%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%E8%A8%AD%E5%AE%9A/"/>
      <url>/2017/08/16/mac-%E4%BF%AE%E6%94%B9%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>用了 Mac 這麼久，桌面很習慣保持乾淨，但是每次都會因為截圖變的很亂，明明就有一個資料夾叫圖片，所以決定找方法改存到指定的位置。</p><a id="more"></a><ol><li><p>打開終端機</p></li><li><p>輸入指令</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture location &quot;/Users/idlefox/Pictures/螢幕截圖&quot;</span><br></pre></td></tr></table></figure><p>“/Users/idlefox/Pictures/螢幕截圖”是我自己指定的，記得改成自己的路徑</p><ol start="3"><li>測試</li></ol><p>先關閉終端機，然後登出使用者，再進行登入。</p><p>進行 command + shift + 3 測試看看。</p><hr><p>參考資料<br><a href="https://bonze.tw/%E6%9B%B4%E6%94%B9-mac-screencapture-%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%E7%9A%84%E9%A0%90%E8%A8%AD%E4%BD%8D%E7%BD%AE%E5%8F%8A%E9%A0%90%E8%A8%AD%E6%A0%BC%E5%BC%8F/" target="_blank" rel="noopener">更改-mac-screencapture-螢幕截圖的預設位置及預設格式</a></p>]]></content>
      
      
      <categories>
          
          <category> OSX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angular 部署到 github</title>
      <link href="/2017/08/16/angular-%E9%83%A8%E7%BD%B2%E5%88%B0-github/"/>
      <url>/2017/08/16/angular-%E9%83%A8%E7%BD%B2%E5%88%B0-github/</url>
      
        <content type="html"><![CDATA[<ol><li>安裝 npm 全域套件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g angular-cli-ghpages</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>使用 angular cli 工具建立一個專案</li></ol><hr><ol start="3"><li>使用 ng build 產生靜態檔</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod --base-href \&quot;https://contemplator.github.io/angular-prime/\&quot;</span><br></pre></td></tr></table></figure><p>–prod 是要產生產品階段，不要是開發中的階段</p><p>–base-href 是要讓 github 上的網站知道我這個專案的根目錄是到哪裡，不設定的話，連結會亂跳</p><p>PS. router 也建議使用 hash 比較不會有問題</p><hr><ol start="4"><li>部署</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular-cli-ghpages --no-silent</span><br></pre></td></tr></table></figure><hr><ol start="5"><li>到 github 上的網站上檢查</li></ol><p>&lt;your-github-username&gt;.github.io/&lt;repository&gt;</p><hr><p>可以參考我目前 github 專案的設置，就是看 package.json 的設置就好，之後只要使用 npm script 執行就可以完成部署，很方便。</p><p><a href="https://github.com/contemplator/angular-prime/blob/master/package.json" target="_blank" rel="noopener">package.json</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字體的選擇</title>
      <link href="/2017/08/16/%E5%AD%97%E9%AB%94%E7%9A%84%E9%81%B8%E6%93%87/"/>
      <url>/2017/08/16/%E5%AD%97%E9%AB%94%E7%9A%84%E9%81%B8%E6%93%87/</url>
      
        <content type="html"><![CDATA[<p>最近在唸一本關於寫企劃的書，超好懂又很適合做事講究格式的我，裡面又講到了關於字體的選擇，自己好像對於一些排版也慢慢要求，雖然字體之前都沒有在意，可是在看別人簡報的時候，字體的選擇真的很重要。</p><a id="more"></a><p>書中建議使用的是黑體或明體，後面會再增加我自己其他狀況時會注意的字體。</p><h2 id="黑體"><a href="#黑體" class="headerlink" title="黑體"></a>黑體</h2><p>黑體的特色是橫豎都粗，寬度都是一樣的，像是“十”這個字，黑體和標楷體就差很多。</p><p>看起來的感覺就是扎實。</p><p>於標題使用。</p><hr><h2 id="明體"><a href="#明體" class="headerlink" title="明體"></a>明體</h2><p>據說是來自於”匠體字”，就是多了一股匠氣，比較刻意去精煉，粗細會有所不同，所以各家差異也蠻大的。</p><p>給人的感覺比較優美、精緻。</p><p>於內文使用。</p><hr><h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h2><p>黑體我主要是用在簡報上。<br>明體則是會用在內文，或者文字量較大的用途上。</p><hr><h2 id="等寬字體"><a href="#等寬字體" class="headerlink" title="等寬字體"></a>等寬字體</h2><p>自己本身有在寫程式，而且在書寫時也會注意寬度，想要一種對齊的感覺，英文可能書寫時很難，但是在寫程式的時候就會要求都一樣寬。</p><hr><h2 id="比例字型"><a href="#比例字型" class="headerlink" title="比例字型"></a>比例字型</h2><p>像是 i 和 o 的胖細就會不一樣，可能在長篇大論中，這樣看比較舒服，也不影響閱讀，可是自己習慣的關係，比例字型會讓我難對齊，而且在不同的裝置上，看到的寬度可能會不一樣，所以我都刻意使用等寬字型。</p><hr><h2 id="個人字型選擇"><a href="#個人字型選擇" class="headerlink" title="個人字型選擇"></a>個人字型選擇</h2><p>黑體：<br>常用，微軟正黑體，但是有時候行距都要調很久，都會太高。<br>刻意使用，思源黑體，寫網頁很常去找這個字體。</p><p>等寬字型：<br>會故意去找 Monaco 或者 Consolas</p><hr><p>資料參考：<br><a href="http://www.heyshow.com/2014/12/31/tip_1368/" target="_blank" rel="noopener">你不可不知的中文字體基本知識：黑體、明體</a><br><a href="https://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93" target="_blank" rel="noopener">等寬字型</a></p>]]></content>
      
      
      <categories>
          
          <category> 使用者體驗 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm 套件查詢</title>
      <link href="/2017/08/15/npm-%E5%A5%97%E4%BB%B6%E6%9F%A5%E8%A9%A2/"/>
      <url>/2017/08/15/npm-%E5%A5%97%E4%BB%B6%E6%9F%A5%E8%A9%A2/</url>
      
        <content type="html"><![CDATA[<p>查詢全域套件的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=1</span><br></pre></td></tr></table></figure><p>ls 列出套件<br>-g global 的意思<br>–depth=0 檢查深度為 1 的套件就好</p><p>查詢專案下的套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Npm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angular 部署到 firebase</title>
      <link href="/2017/08/15/angular-%E9%83%A8%E7%BD%B2%E5%88%B0-firebase/"/>
      <url>/2017/08/15/angular-%E9%83%A8%E7%BD%B2%E5%88%B0-firebase/</url>
      
        <content type="html"><![CDATA[<ol><li><p>使用 angilar cli 成功建立 angular 專案</p></li><li><p>成功使用 ng serve 將成功畫面運行起來</p></li><li><p>使用 Ctrl + c 關閉 server</p></li><li><p>運行 ng serve –prod </p></li><li><p>安裝 firebase tool</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br></pre></td></tr></table></figure><ol start="6"><li>登入 firebase</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase login</span><br></pre></td></tr></table></figure><ol start="7"><li>初始化 firebase 專案</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase init</span><br></pre></td></tr></table></figure><p>選擇 hosting<br>選擇要關聯的專案</p><p>完成之後檢查是否有 firebase.json 及 .firebaserc 等兩個檔案產生<br>如果你跟我一樣， firebase.json 是空的，請貼上以下程式碼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;public&quot;: &quot;dist&quot;,</span><br><span class="line">    &quot;ignore&quot;: [</span><br><span class="line">        &quot;firebase.json&quot;,</span><br><span class="line">        &quot;**/.*&quot;,</span><br><span class="line">        &quot;**/node_modules/**&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rewrites&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;source&quot;: &quot;**&quot;,</span><br><span class="line">            &quot;destination&quot;: &quot;/index.html&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>部署</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy</span><br></pre></td></tr></table></figure><ol start="9"><li>成功之後就可以到他指定的路徑查看是否正常</li></ol><p>PS. 這是適用於 angular cli 產生之專案部署到 firebase 的方式，如果使用其他方式產生靜態檔，記得要去改 firebase.json</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新 angular 套件</title>
      <link href="/2017/08/15/%E6%9B%B4%E6%96%B0-angular-%E5%A5%97%E4%BB%B6/"/>
      <url>/2017/08/15/%E6%9B%B4%E6%96%B0-angular-%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打開終端機</p></li><li><p>輸入升級的指令</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @angular/&#123;common,compiler,compiler-cli,core,forms,http,platform-browser,platform-browser-dynamic,platform-server,router,animations&#125;@latest typescript@latest --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac 顯示或隱藏檔案</title>
      <link href="/2017/08/15/mac-%E9%A1%AF%E7%A4%BA%E6%88%96%E9%9A%B1%E8%97%8F%E6%AA%94%E6%A1%88/"/>
      <url>/2017/08/15/mac-%E9%A1%AF%E7%A4%BA%E6%88%96%E9%9A%B1%E8%97%8F%E6%AA%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打開終端機</p></li><li><p>輸入顯示指令</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles TRUE;\killall Finder</span><br></pre></td></tr></table></figure><ol start="3"><li>取消顯示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles FALSE;\killall Finder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OSX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>結腸性潰瘍（下）</title>
      <link href="/2017/08/15/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2017/08/15/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>8 月 7 號完成大腸鏡的檢查後，決定馬上轉急診住院，雖然身體狀況很不好，但是意識都是很清晰的，雖然禁食很多天，但是也因為週末有打營養針的關係，還算是有點力氣，可以撐完急診的等待和問診，但是都還是當作一般腸胃性問題處理，一樣只開了止瀉、止痛、腸胃蠕動正常的藥給我，幸好當天運氣不錯，沒多久就在急診排了一張病床給我，後續幾天，急診的人變多，連病床都不夠，有的人只有輪椅可以坐著等。</p><a id="more"></a><p>在急診我等到了 8 月 9 號才等到了正式的病床，在急診的那幾天，上廁所都會很緊張會趕不及，也每兩個小時左右就會有感覺，而且急診的人很多，很怕沒有空的廁所，但不幸中的大幸，我每次去，幾乎都會有位置，不過對於自己站用很久也感到不好意思，但是因為病床和廁所真的距離太遠，真的很捨不得離開廁所，也辛苦家人很怕我在裡面暈倒，每次都要在外面苦苦等候我，直到有一次從病床醒來，看到床尾多了一個防跌倒的小卡才知道自己的狀況在醫護人員眼裡好像真的很不好，很怕我跌倒、暈倒。</p><p>急診這幾天真的遇到很多人，有年紀和我差不多的人，但是腎已經好像不行了，大部分來急診的也都是老人，跌倒受傷的真的很多，慢性病、洗腎的也有遇到，我和老媽因為在這裡還算年輕，還有心力關心別人，老媽不免都會關心別人一下，擔心別人不知道要去哪裡找吃的、不知道廁所和醫護人員怎麼找，還有關心急診室溫度很低，怕病人或陪同人員感冒，四處關心別人，我媽還問我以後來這裡做志工好不好，我只能說你平常做的就很多了，也不用到這裡才做。</p><p>在進入病房之後，就又開始了問診轟炸，但幸好真的都沒有什麼事情可以做，有人可以說說話，有事情可以做，至少讓時間慢慢流過去，切片檢查報告還沒出來，不知道是不是就無法確定開藥的方向，晚餐送過來的藥還是差不多的藥，說真的，都覺得自己這幾天吃的藥的量有點太多了，但是現在每天可以做的事情就是上廁所、吃東西、睡覺，吃東西有一半的時間都在吃藥或打藥，手上的點滴也一直沒有停過，很久沒有這麼廢過，不知道是自己的身體先不行，還是自己的心裡先不行，到今天，已經快五天沒有寫程式了，腦袋都快想不起來程式碼的樣子，也想不出來想要做什麼題目，腦袋一片空白，可是焦慮感一直揮之不去，對我來說，病人沒有什麼大不了，最慘的應該是成為一個廢人，只會花錢，沒有辦法還清自己債的廢人。</p><p>我一直記錯，一直以為 8 月 11 就是報告出來的時間，現在每個被約定好的日子，就像是我人生下一個階段，好像似乎會有一個轉機一樣，可能好，可能壞，沒有事情做的日子，等待是無聊的，而且感覺全世界只有自己是無聊的最難過，好像真的就是什麼都在遠離自己一樣，黑洞是不是一個幸福的存在，也許胖子質量比較大，也比較多人喜歡。就這樣，我就睡睡醒醒，吃吃打打的過完了一個禮拜，8 月 11 結果沒有出來，其實下次的回診是 8 月 18，不過主治醫師想要先確定藥物有沒有用，因為好像在我身上浪費的藥也蠻多的了，所以在禮拜一 8 月 14 號就安排下午兩點做一次非全段的大腸鏡，看看潰瘍是不是有好一點，不過結果不盡理想，好像有好一點，但是好像不多，主治醫生也決定要改其他的藥，晚上的灌腸的結腸要也停了，因為如果真的有效，應該會改善很多，因為聽說肛門附近的血管很多，比較好吸收，但是既然好吸收，現在已經打了一個禮拜，可是好像沒有預期中的療效，應該就不是對付我的症狀，現在聽到藥要改，可能也會少打一些類固醇和其他藥，對我的身體應該也會負擔小一點，剩下的應該就是看自己的身體爭不爭氣了。</p><p>今天 8 月 15，狀況好很多了，不會一直拉肚子和血便，剩下的就是等可以正常排便，希望可以趕快回崗位上上班，真的不想當一個廢人。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 結腸性潰瘍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>結腸性潰瘍（中）</title>
      <link href="/2017/08/14/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2017/08/14/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>我在 7 月 31 號就因為腹瀉不止，預約 8 月 2 號中國醫的第二次門診，在 8 月 1 號還去掛了一次門診，這次中國醫的門診我想應該就應該要確認我是不是要繼續看下去，因為病情一直沒有好轉，醫生的態度也讓我覺得有些不滿，8 月 2 號晚上去等了一下，在七點前就把門診給看完了，醫生這次雖然問診的比較清楚，但是沒有任何觸診，只給了我更多的藥，但也都是抑制的藥，似乎都還無法確定是什麼病情，似乎不是一般腸胃炎了，原本想要讓我照的胃鏡也不考慮了，因為已經不是一開始的黑血，而且鮮紅的血便，所以醫生就問我要不要照大腸鏡，我想我也沒有辦法了，當然就趕緊請醫生安排時間，但是因為是需要清腸的，而且看診時間是晚上，所以也只能等明天早上再打電話到醫院問可以的時間，真的是人生第一次這麼不順遂，覺得好像什麼漸漸走遠一樣。</p><a id="more"></a><p>8 月 2 號晚上，雖然看完了醫生，我還是沒有好轉，抑制的藥好像也怠工了，覺得對我身上的問題已經無解，就像是病入膏肓一樣，吃下去的藥都沒有任何反應，隔天早上我就向公司請假，因為腹瀉變得兩個小時左右就一次，就算去公司，也都不在位置上，感覺自己去了也都沒有任何貢獻，幸好同事和主管也都沒有說什麼，就答應幫我處理一些事情（反正我目前業務量也不大），稍微請我保重之後就讓我安心在家養病，原本，我是打算在家裡好好休養的，可是家人卻忽然要我去跑一趟一個算命的家，希望我可以去給他們算一下運勢，或者說是收驚看看，但其實在這之前，已經去了一家廟拜拜，媽媽也把我一件衣服拿去給人收驚，讓我喝了一杯符水，但我之後我再繼續爭執也沒有意義，有時真的不知道病因是什麼，就當作出去散散心，或者接觸不一樣的東西，看能不能有沒有什麼意外的收穫，大約早上九點多，老爸就回到家把我載去大肚山上的一家認識的算命家中，其實真的沒有抱著太大的期待，因為信仰信就是信，不信就是當作耳邊風，我也只是遵照家人的意思，果不其然，就是聽到一些這個月運勢不好，大概要等運勢好轉，不要出遠門，大概又是因為最近親人過世、路邊擋煞之類的，讓我中了五行裡面偏土的問題，也就是腸胃上的問題，給了我們兩帖加強符水之後，就讓我回家好好休養，覺得身心真的好累。</p><p>回到家之後我就馬上再次打給中國醫，確認那時候可以看大腸鏡，護理師小姐說最快也要 8 月 18 號，我真的覺得我真的有一點腦抽，竟然就好了，我真希望自己可以稍微爭一下可不可以提早，因為我真的覺得我快撐不住了，一直不吃不睡，東西都只吃得下一半，也只吃得下低渣飲食，但是當下真的好像就無法思考太多，就默默接受 8 月 18 這個結果，8 月 18 看起來就是一個解脫的日子，但是不知是如何解脫，但是更讓我擔心的是，我要如何撐到 8 月 18 ？手中抱著中國醫開的兩包清腸的藥，不知道代表的是什麼樣的結果？</p><p>下午，老媽帶著午餐回家找我吃飯，問我有沒有好一點，真的不知道該說什麼，早上幾乎沒有休息到，在外面雖然好像比較不常拉肚子，但是大多也是因為緊張的關係，老媽另一方面也努力說服我再去看一次醫生，回去看第一次看的門診，因為至少那個醫生是可以和我們討論藥的，我也真的煩心了，也就跟老媽稍微吵了一下，最後因為禮拜四診所沒開而作罷，不過其實另外一方面，也因為我自己看病看到一半，跑去另外一家醫院看，就是我開始有點不相信那間診所，實在不好意思再回去看相同的問題，最後就因此作罷，也算是一個不再讓我煩心的結果。</p><hr><p>8 月 4 號，原本打算 3 號休息下就去上班，把假請一請，還有把一些工作上的問題問問主管處理方式，可是早上五、六點起來，仍舊一直腹瀉，就好像一開始看完中國醫門診一樣，就這樣在廁所蹲到快要 8 點多，決定還是向公司請假，老爸老媽也開始幫我想下一步要怎麼走，最後決定自行轉院到其他大醫院看，最後決定去榮總看，聽從親戚的建議在網路上趕緊掛了最後一個門診的位置，然後就收拾東西到榮總報到了，然後就很神奇的不再有緊急腹瀉的感覺，只在榮總的廁所拉了一次血便，就一直等到看完門診，這次門診的李醫生感覺經驗豐富許多，先從最近旅遊問題，看看是不是得到境外的細菌或病毒，然後開始問起這三個禮拜的看診狀況，腹痛、黑便、腹瀉、血便等都跟他說了，最後的結論就是真的不像是一般的病情，從鮮紅色的血大概推測出是大腸出了問題，所以一樣幫我安排了大腸鏡檢查，不過這次不用再自行詢問，他們立馬幫我安排了下禮拜一 8 月 7 號的早上等檢查，感覺像是得到了救贖， 8 月 18 和 8 月 7 差了 10 天，對於我而言，可以減少 10 多天的痛苦，就讓我覺得這一生就是就我的那個人一樣，最後確定好檢查時間後，怕給我亂開藥，就讓我繼續吃止痛止瀉的藥，等到下禮拜一的到來。</p><hr><p>8 月 7 號這一天終於到來了，有點期待，不太有赴死的感覺，可能因為這次太莫名，自己本身也還年輕的關係，覺得應該不會是什麼大病，自己這次也查了很多次資料，比較有可能的就是細菌感染，所以才會拖這麼久，所以我就抱著這次結果出來，應該就一切明朗的心情，就這樣等啊等的等到快 11 點…</p><p>真的要上病床檢查之前，到了準備室就開始緊張，因為剛剛等的過程中，因為肚子痛跑了兩次廁所，有一次有拉出塊狀的東西，真的有點害怕因為沒有清乾淨，導致這次檢查不理想，但是後來想了一下，應該不太可能緊張，因為剛剛等的過程中，因為肚子痛跑了兩次廁所，有一次有拉出塊狀的東西，真的有點害怕因為沒有清乾淨，導致這次檢查不理想，但是後來想了一下，應該不太可能，因為已經禁食了一天，而且早上已經拉不出東西，最多也是寫，後來聽了醫護人員說，應該只是血塊而已，所以最後就還是推進去檢查，之前有上網查大腸鏡的檢查，網路上是說還在一般人可以忍受的程度，當初安排時也沒有另外問我說要不要做無痛的，所以我就想說應該還好，有人說就像反向大便一樣而已，但是事實證明我是愚蠢的，剛進去真的還好，可是進去之後要轉彎真的痛到不行，可能是太瘦的關係，有可能是潰瘍很嚴重的關係，也可能自己平常脹氣就會感覺不舒服，管子進去會一直打氣進去，讓我的腸子是充氣的，雖然醫生說把氣排出來會舒服一點，可是我當下整個茫然，放屁是再自然不過的事情，可是排不出來真的很痛苦，不知道過了多久，過了幾個彎道，都開始有點痙攣、冒出冷汗，可是感覺還要很久才能出來，最後氣真的排不出來，醫生就叫旁邊的護理師壓著我的肚子，像是要把氣排出來，最後已經不知道是哪裡在痛，是肛門、腸子、還是其他地方，只希望能趕快結束，不斷詢問還要多久、還要多久，連大腸鏡所投射的畫面一幕都不敢看，只聽著醫生說潰瘍很嚴重，好像整段都壞掉了一樣，最後終於聽到在做完三片切片就可以把管子抽出來了，感覺像是得到了救贖，在檢查完之後，我就</p><p>進入廁所之後，我就馬上拉出了許多血，有點嚇到，但是並不到捐血那樣的血量，大概就是 20 ~ 30 cc，也排了兩次的血，沒有痛的感覺，拉出來有點放鬆的感覺，後來被媽媽關心在廁所裡面有點久，就趕快出來，可是一出來，不知道為什麼又想要回到廁所坐下，幸好沒有離開太遠，聽老媽說，走回去廁所的路上，還從褲管流出了一點血，醫生也馬上開給我一些抗生素和其他要給我吃，但是吃了之後馬上就不舒服，反胃和頭暈的感覺馬上就來了，最後撐不住，還在醫護人員的辦公室吐了一些出來，他們馬上幫我打電話給主治的醫生，問問看檢查的狀況，最後好像檢查的結果和吃完藥的反應，最後就建議我直接到急診辦理住院。</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 結腸性潰瘍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>結腸性潰瘍（上）</title>
      <link href="/2017/08/14/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2017/08/14/%E7%B5%90%E8%85%B8%E6%80%A7%E6%BD%B0%E7%98%8D%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>終於可以雙手碰電腦了，不知道幾天沒有體驗打字的感覺，這三個禮拜一直處於廢人的狀態，原本是假日不能做事情而已，然後想要做的事情就很多都耽擱了，然後慢慢地連平日都無法正常作息。</p><p>事情是這樣開始的…</p><a id="more"></a><p>原本想說騎個腳踏車、做個運動練練身體，結果沒有支撐一個禮拜就不行了，胃的地方開始壓痛（但不確定是不是胃的問題，還是橫結腸的問題），之後雖然有停了一下，然後去看個診所，看看能不能改善，前一個禮拜，我家老哥也剛好因為腸胃問題，看了那家診所之後有明顯好轉，我也就跟著去看，可是不知道為什麼我的病情是加重的，我還記得只是開個促進腸胃蠕動的藥，結果就導致我開始一直狂瀉，但是這種不舒服我還撐得住，因為我平常腸胃就不好，想說拉乾淨就沒有事情了，結果就這樣拉了一個禮拜，還記得那個禮拜上班，如果不算上我在廁所的時間，我的效率還蠻高的，因為實際上打字得時間少，變得在位子上的時間都全神貫注地上。</p><p>後來慢慢地到了週六，開始覺得拖得好像有點久，又因為自己在大醫院工作，有看病的福利，所以就請家人帶我到大醫院掛門診，結果看起來好像也不是什麼大病，就開個跟診所差不多的要就讓我回家吃兩個禮拜（沒錯！他讓我直接吃兩個禮拜再回去回診，說真的，當初以為是大醫院都是這樣開藥，應付我這種小病到大醫院看病的人，但是後來問了其他醫護人員，這樣好像真的蠻怪的），當下沒有覺得怪怪的，就想說應該回去吃個三天就會改善，反正目前都還只是肚子而已，但是事情卻不如我的預期，週六、週日、週一凌晨，我幾乎都在廁所中度過，拉的頻率更長了，也拉得更吸，唯一的結論就是我不吃東西時會比較好轉，但是卻沒有營養可以不足我流失的部分，而且就連晚上我也無法安眠，當三餐的藥吃完，晚上要睡覺時藥效一過，就開始肚子痛和拉肚子，晚上都睡不到五個小時，而且都是淺眠，入睡還得配合止痛的呼吸方式，結果後來還拉出了一些血便…</p><p>禮拜一和二早上我就這樣忍過來了，我原本也想聽從醫生的指示等藥吃完再回診，可是真的無法忍完一週，我就在網路上又預約了格週三的門診，但是每次當我要忍過去的時候，老天似乎都覺得似乎折磨的我還不夠，在禮拜二晚上，老爸還在我房間玩 Candy Crash 的時候我又去蹲了一次廁所，結果蹲完之後我覺得我的肝膽似乎超暴通，我就躺在床上呻吟，幸好老爸還沒有要去睡，可以讓我不用用很大的聲音把大家吵醒，真的忍不下去了，而且症狀又變多了，就請老爸載我回去大醫院掛急診，也真的很奇怪，只要一出門，好像就稍微可以忍一下，到了急診也可以意識清晰的回答醫護人員的問題，但是不知道是因為痛的關係，還是因為怕拉下去的關係，整個身體都是緊繃的情況，幸好禮拜二急診的人並不多，很快就輪到我了，連讓我去蹲看看廁所的機會都沒有。</p><p>輪到我的時候想當然是安排內科，是一位我掛門診還年輕的醫生，但是人還蠻親切的，而且問診問的比門診還要詳細，當他開始看我過去的病例之後，說了一件讓我很震驚的事情，他問我說我會想吐嗎？我說不會！他還問我說，你應該是拉肚子吧，可是前一個醫生怎麼都沒有幫你開止瀉藥？我不知道該如何反應，因為我都是想說是小病，而且想說醫生很淡定，我都是遵循醫囑的啊，當下真的有點傻眼，不過也不好意思抱怨什麼，只在當下反應晚上都會痛得睡不著，希望可以幫我開個止瀉和止痛，至少可以讓我今天來看醫生有比較舒服的感覺，醫生就幫我額外開了強力止瀉和一般止痛的要，今夜果然就比較好睡，還可以稍微做了一個夢。</p><p>禮拜三早上我就正常的去上了班，因為腹瀉都是早晚才會，只要不要進食，也都不會有很不舒服的感覺，所以在上下班的過程中都感覺還好，只是禮拜三的精神就有點受到前幾天的影響，過了中午之後，就有點想要打瞌睡的感覺，自從當完替代役後，好久沒有打瞌睡的感覺了，因為感覺自己的生活作息都正常許多，連午休的時間都很固定，可是這次沒想要因為不知名的問題，讓我一天又睡不到正常的量，不然想要打瞌睡時，我也可以在上班做一些念程式的東西，讓自己稍微有點精神，離開工作的煩悶，可是現在連這種精力都無法支出，對於這次的狀況，我真的不知道怎麼去應付，和我之前的腸胃問題等級真的差太多了，五點半下班時間一到，我就跟同事說我要去看醫生了，就趕緊去看最後一次門診…</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 結腸性潰瘍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017/07/22</title>
      <link href="/2017/07/22/2017-07-22/"/>
      <url>/2017/07/22/2017-07-22/</url>
      
        <content type="html"><![CDATA[<p>最近上班都有點無力，不知道是不是因為不知道現在自己應該做什麼，<a id="more"></a>又想起進來公司負責的第一個專案，其實不知道業界在網站開發都是怎麼分工的，之前也寫過一篇日記抱怨學的東西很雜，一下前端、一下後端、一下資料庫，但是後來就釋懷了，因為多方接觸對自己也沒有壞處，但是最近又被分配了一個專案，其實一開始還蠻期待的，因為在被分配到專案的前兩個禮拜，幾乎都沒有寫到程式，主管讓我幫另外一個小專案製作專案文件，專案文件的用途是幫助專案組員了解應該開發的功能以及內部程式碼的邏輯，但其實很沒有挑戰性，就是一些命名規則，而且這一個專案的組員都是我之前帶的新人，大部分的時候都不用我擔心他們沒有照著專案文件做，只是製作文件真的不是一件一開始就願意下去做的工作，因為文件沒辦法和程式碼同步更動，到底有沒有意義，真的沒有人能夠確定，總之呢，就是荒廢了一段時間吧！</p><p>之後就被通知要接手做一個全新的功能，一樣是使用 angular 寫，會有一個前輩帶我了解業務邏輯，我就負責全部程式碼的部分，我因為真的對於業務不熟悉，所以還保險的問了一下資料的準備呢？是否有就資料要從其他地方複製過來？其實荒廢的這一段時間我也稍微了解新舊資料的轉換，程式碼可簡單可複雜，但其實最複雜的就是不知道資料放在廣大汪洋中的哪裡…，後來斷斷續續寫了一兩個禮拜 (中間其實大部分都在做文件、還有幫大家測試 angular 套件的功能，實際上在這個專案的時間不到兩天…)，感覺被默默的放生，主管也讓原本帶我這個專案的前輩去處理更重要的事情，我就單打獨鬥，其實心中就有點憤恨吧…，其實從進來公司，不，應該說從很久以前開始，我好像就沒有什麼魅力讓別人好好的教我一個東西，每次都是被丟了一個文件，有時文件可能還是錯的，或者連文件都沒有，只說讓我去找其他人，連找誰也沒有說，久而久之，我也懶得和別人追問實作的細節了。</p><p>我也不知道這樣是好還是不好，後來很多東西都是半知半解，或者就是自己的想法，常常被主管問說這是你自己想出的需求還是使用者的需求，真的很想嗆回去：你有讓我跟使用者開過會嗎？每次都是接回來的需求丟給我，當初接回來的人不是離職就是不知道是誰，我連使用者分機都不知道，忽然覺得當初大學實習的公司好像真的待我還不錯，最近的專案不知道從何下手，有個離職的機會，但是還不是十足十的把握，學不到東西，沒有正確事情可以做的地方，都讓我感覺到無力。</p><ul><li>覺得自己是不是很笨啊</li><li>覺得自己有種保護機制，很負面的東西，會想一想就想睡了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 跳脫字元</title>
      <link href="/2017/07/14/Markdown-%E8%B7%B3%E8%84%AB%E5%AD%97%E5%85%83/"/>
      <url>/2017/07/14/Markdown-%E8%B7%B3%E8%84%AB%E5%AD%97%E5%85%83/</url>
      
        <content type="html"><![CDATA[<p>在說明之前，可以先了解 Markdown 和 html 一樣是標記型語言，倒不如說他是一種 html 的變形，因為我們寫的 Markdown 會被編譯成 html 語法，讓我們便於書寫，也讓觀眾便於閱讀。</p><p>但是各家的 Markdown 都會有點不一樣，像是 Github 的 README.md 和 我這個 blog 使用的 hexo 就有些地方不一樣。</p><a id="more"></a><p>就像我前面說的，為了讓我們便於書寫，我們會使用一些符號代表某些意義，讓我們的文章看起來是經過排版和設計的。語法可以看我上一篇文章：<a href>Markdown 常用語法</a></p><p>像是大於小於符號 “&lt;&gt;” 如果直接在 markdown 文件直接寫 “&lt;英文字&gt;” 你的 “&lt;英文字&gt;” 就會不見，因為會背叛別成你是要寫 html 語法。或者像是你想要寫 “|” 用來分隔什麼東西，他也會不見。</p><p>這時候你就要用其他方式輸入，你只要 google：html entities 或者跳脫字元，就會有相關文章。</p><hr><h3 id="Entity-Name"><a href="#Entity-Name" class="headerlink" title="Entity Name"></a>Entity Name</h3><p><a href="https://www.w3schools.com/html/html_entities.asp" target="_blank" rel="noopener">w3school</a> 有介紹常用的跳脫字元。</p><p>如果你要顯示 &gt; 就輸入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;gt;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Entity-Number-ASCII-碼"><a href="#Entity-Number-ASCII-碼" class="headerlink" title="Entity Number | ASCII 碼"></a>Entity Number | ASCII 碼</h3><p>還有另外一種狀況，就是如果你要輸入 “|”，發現剛剛那個網站沒有範例，你可以去查 “|” 這個字元的 ASCII 碼對應的數字。<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII 對照表</a></p><p>你想要顯示 | 可以輸入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#124;</span><br></pre></td></tr></table></figure></p><hr><h3 id="反斜線"><a href="#反斜線" class="headerlink" title="反斜線 \"></a>反斜線 \</h3><p>如果你有寫過正則表達式，你應該用過 “\” 反斜線，反斜線也可以幫你顯示某些特殊字元。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> escape </tag>
            
            <tag> 跳脫字元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 常用語法</title>
      <link href="/2017/07/14/Markdown-%E8%AA%9E%E6%B3%95/"/>
      <url>/2017/07/14/Markdown-%E8%AA%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>這邊我會介紹我常用的 markdown 語法</p><a id="more"></a><h3 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line">###</span><br><span class="line">ex: ### 標題</span><br></pre></td></tr></table></figure><p>“#” 井字號開頭，就是標題的意思，像是 html tag 的 &lt;h1&gt; 到 &lt;h5&gt;</p><hr><h3 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>”-“ 連續三個減號，也可以叫 dash 比較潮，這樣就會跑出一個分隔線 &lt;hr&gt;</p><hr><h3 id="縮排、引言"><a href="#縮排、引言" class="headerlink" title="縮排、引言"></a>縮排、引言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>”&gt;” 大於符號後面所接的文字，就會向右縮排，如果越多 &gt; 的符號，就會縮排越多。</p><blockquote><p>至理名言</p></blockquote><hr><h3 id="項目清單"><a href="#項目清單" class="headerlink" title="項目清單"></a>項目清單</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-</span><br></pre></td></tr></table></figure><p>“-“ 如果只有一個減號，就會變成項目清單，像是 &lt;ul&gt;，是沒有序列觀念的清單</p><ul><li>蘋果</li><li>香蕉</li><li>芭樂</li></ul><hr><h3 id="序列清單"><a href="#序列清單" class="headerlink" title="序列清單"></a>序列清單</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.  </span><br><span class="line">2.</span><br></pre></td></tr></table></figure><p>”1. “ 使用阿拉伯數字接一個 “.” 點和一個 “ “ 空白符號，就會變成序列清單，像是 &lt;ol&gt;。</p><ol><li>第一項</li><li>第二項</li></ol><p>PS. 但是不知道為什麼我用 hexo 寫的文章都會變成 &lt;ul&gt;</p><hr><h3 id="超連結"><a href="#超連結" class="headerlink" title="超連結"></a>超連結</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[顯示的文字](link_url)</span><br><span class="line">ex: [Google 首頁](https://google.com.tw)</span><br></pre></td></tr></table></figure><p>如果要插入一個超連結，先使用 “[]” 中括號夾住要顯示的文字，然後再用 “()” 夾著目標連結的 url。</p><p><a href="https://google.com.tw" target="_blank" rel="noopener">Google 首頁</a></p><hr><h3 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 訊息](image_url)</span><br><span class="line">ex: ![測試圖片](/blog/images/test.png)</span><br><span class="line">ex: ![錯誤圖片連結](/blog/images/error.png)</span><br></pre></td></tr></table></figure><p><br>如果你要插入一個圖片，語法比較難記，用 “[]” 中括號夾住 alt 訊息，要知道什麼是 alt 訊息，請去了解 html tag &lt;img&gt; 的 alt 屬性用途。<br>再用 “()” 小括號夾住你圖片的路徑，記得前面要加 “!” 驚嘆號，和外部連結區別。</p><p><img src="/blog/images/test.png" alt="測試圖片"></p><p><img src="/blog/images/error.png" alt="錯誤圖片連結"></p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 配置屬性 | 說明     |</span><br><span class="line">|----------|----------|</span><br><span class="line">| title    | 網站名稱 |</span><br></pre></td></tr></table></figure><p>如果要插入表格，就是用 “|” ”-“ 這兩個符號做排版，因為要手動 key 的完美有點困難，我推薦這個網站：<a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="noopener">Tables Generator</a></p><table><thead><tr><th>配置屬性</th><th>說明</th></tr></thead><tbody><tr><td>title</td><td>網站名稱</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 工作流程</title>
      <link href="/2017/07/14/Git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/07/14/Git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>用了這麼久的 git，其實有時候就是當作備份程式碼的地方，commit 的訊息都留下什麼日期，改了哪一段程式碼，然後又都是在 master 分支進行修改，上次終於出糗了，不知道要回復到哪一個我認為正確的版本…</p><a id="more"></a><h3 id="Git-commit-留下有意義的訊息"><a href="#Git-commit-留下有意義的訊息" class="headerlink" title="Git commit 留下有意義的訊息"></a>Git commit 留下有意義的訊息</h3><p>很常在學生專案，或者剛接觸 Git 的開發者的 Git 專案內看到意義不明的 commit 訊息，其實在使用 Git 的時候，應該就要知道 Git 是用來幫程式做版本控制的，萬一每次 commit 的訊息自己都看不懂，看不懂這次到底修改了什麼，如果自己把什麼東西改壞了，又該怎麼知道應該回復到哪一個版本呢？</p><p>那為什麼大家都會 commit 不必要的訊息？</p><p>原因有很多，一個是因為程式忽然不 work ，或者介面上某個片與好像不夠好，想要修改一點小東西，接下來你就修好它，留下一段 commit 訊息 “修正錯誤、調整 table css”，修正錯誤可能講得太籠統，不知道到底修改了什麼；調整 Table css 還算可以，但其實有點沒有必要，因為 git 也會幫你記得你改了哪一段程式碼。</p><p>哪什麼是適合的 commit 的訊息？</p><p>像是你這次為什麼要做修改？處理掉什麼錯誤？增加什麼功能？其實就是一則高品質的訊息。</p><p>那如果東西真的已經上架了，東西也一定要馬上修改，馬上 commit，那你就在 git 說明做了什麼修改吧！</p><h3 id="工作做到一半，我急著要去修改其他版本，git-到-master-影響部署"><a href="#工作做到一半，我急著要去修改其他版本，git-到-master-影響部署" class="headerlink" title="工作做到一半，我急著要去修改其他版本，git 到 master 影響部署"></a>工作做到一半，我急著要去修改其他版本，git 到 master 影響部署</h3><p>最近我在公司就遇到一個問題，git 專案剛建立時，預設就會建立一個 master，我們專案部署成功後，像某些 GitHub 專案一樣，master push 成功後就幫你部署，我們有個新人改完一個小問題之後，就 push，可是還沒有完整改完，就這樣把尚未完成的網站給部署到正式區了。</p><p>其實現在有許多工作流程都不太會直接把小修小改直接 push 或者 merge 到 master 或者負責部署的 branch，因為如果遇到要發佈時，程式碼其實並不完美，甚至連運行都有問題，你就糗大了，所以像是 Github 工作流程，都會另外建一個 developer 分支，主要的修改都在 developer，如果有功能或者其他議題要處理，就在 developer 分支開枝散葉出去，當你確定 developer 分支已經到了ＯＫ時，就是可以正常運行，暫時也沒有要做修改，或者完成這次版本要發佈的功能，你就可以 merge 到 master 進行部署。</p><h3 id="我認為正確的工作流程："><a href="#我認為正確的工作流程：" class="headerlink" title="我認為正確的工作流程："></a>我認為正確的工作流程：</h3><ol><li>master 建立第一版或不要</li><li>建立 developer branch</li><li>條列功能或修改清單</li><li>從 developer branch 分支出去</li><li>切換到現在要做的功能分支進行作業</li><li>完成編輯及測試後，merge 到 developer，回到第 4 執行到 第 ㄒ6 不斷迴圈，直到完成此次上線版本要完成的項目</li><li>merge 到 master 部署</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用 git 語法</title>
      <link href="/2017/07/09/git-%E8%AA%9E%E6%B3%95/"/>
      <url>/2017/07/09/git-%E8%AA%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本篇只介紹常用的語法，是我自己使用了 git 這幾年比較常用到的語法和瞭解而已。<br>更多的語法可以參見<a href="https://git-scm.com/docs" target="_blank" rel="noopener">官方文件</a></p><a id="more"></a><h2 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h2><p>commit：指一次 git 的紀錄，紀錄的內容包含修改的內容、辨識的 SHA1 雜湊值、commit 的人和時間等<br>暫存區：在使用 git add 之後，git commit 之前，暫存將要 commit 的檔案<br>repository：git 的儲存庫，也可以說是 git 的專案</p><h2 id="Git-基礎語法"><a href="#Git-基礎語法" class="headerlink" title="Git 基礎語法"></a>Git 基礎語法</h2><p>學會以下語法就可以完成一次 git commit  </p><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git init</td><td>將此目錄增加 git 功能</td></tr><tr><td>git add -A</td><td>將所有檔案加入到追蹤，並且在集結狀態</td></tr><tr><td>git commit -m “msg”</td><td>將在集結狀態的所有檔案紀錄在此次修改</td></tr></tbody></table><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git add &lt;file&gt;</td><td>將指定檔案加入到集結狀態</td></tr><tr><td>git add -A</td><td>將所有檔案加入到追蹤，並且在集結狀態</td></tr><tr><td>git add --all</td><td>同上</td></tr></tbody></table><p>&ast; 星號類似 regex 表達式，表達符合所有檔名<br>&ast;.txt 表示所有 .txt 為副檔名的檔案  </p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git commit</td><td>記錄修改，並且使用 vim 當作輸入訊息的工具</td></tr><tr><td>git commit -m “msg”</td><td>記錄修改，直接在雙引號內輸入訊息(可換行)</td></tr></tbody></table><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看目前有哪些遠端目標</td></tr><tr><td>git remote rm &lt;remote alias&gt;</td><td>刪除指定別名為 remote alias 遠端目標</td></tr><tr><td>git remote add &lt;remote alias&gt; &lt;remote url&gt;</td><td>增加 remote url 遠端目標，並且設定別名為 remote alias</td></tr></tbody></table><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git push -u &lt;remotes&gt; &lt;branch&gt;</td><td>第一次上傳，設定上傳分支，並且推送到指定的遠端伺服器及分支</td></tr><tr><td>git push –set-upstream &lt;remote&gt; &lt;branch&gt;</td><td>同上</td></tr><tr><td>git push</td><td>非第一次上傳 推送到預設的遠端伺服器及分支</td></tr></tbody></table><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git branch</td><td>顯示目前 git 專案所有的分支，和目前所在的分支</td></tr></tbody></table><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git checkout &lt;branch&gt;</td><td>切換到指定的 branch</td></tr><tr><td>git checkout -b &lt;branch&gt;</td><td>切換到指定的 branch，如果沒有的話就建立</td></tr><tr><td>git checkout -- &lt;file&gt;</td><td>將檔案回復到上次 commit 的狀態</td></tr></tbody></table><h2 id="git-reset-TBD"><a href="#git-reset-TBD" class="headerlink" title="git reset (TBD)"></a>git reset (TBD)</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git reset HEAD &lt;file&gt;</td><td>將指定的檔案移出暫存區，變成尚未追蹤狀態，保存修改</td></tr><tr><td>git reset --soft &lt;commit&gt;</td><td>將 HEAD 指標指到指定的 commit，修改會保留</td></tr><tr><td>git reset --hard &lt;commit&gt;</td><td>將檔案回復到指定的 commit，並且刪除指定 commit 後的修改</td></tr></tbody></table><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git log</td><td>顯示過去 commit 的歷史紀錄</td></tr><tr><td>git log &lt;-number&gt;</td><td>顯示過去 commit 最近 number 筆的歷史紀錄</td></tr><tr><td>git log --pretty=oneline</td><td>顯示過去每筆 commit 的歷史紀錄於一行內</td></tr></tbody></table><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><table><thead><tr><th>語法</th><th>說明</th></tr></thead><tbody><tr><td>git config &lt;--system &#124; --global &#124; --local&gt; user.name “value”</td><td>於指定的層級，設定 user.name 為 value</td></tr><tr><td>git config &lt;--system &#124; --global &#124; --local&gt; alias.<name>=”command”</name></td><td>設定 command 指令的別名為 name</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>善與偽善</title>
      <link href="/2017/07/09/%E5%96%84%E8%88%87%E5%81%BD%E5%96%84/"/>
      <url>/2017/07/09/%E5%96%84%E8%88%87%E5%81%BD%E5%96%84/</url>
      
        <content type="html"><![CDATA[<p>神創造了一個人，這個人如果看到一個人受傷或者痛苦，就會感受到和他一樣的痛楚，因此，這個人不斷地幫助他人；有另外一個複製人，和這個人一模一樣，唯一不一樣的就是他不會因為別人痛苦而感到痛楚，但是這個複製人還是會去幫助別人。</p><p>將第一個人叫做 A 好了，複製人叫做 B 好了。</p><p>A 是為了自己而幫助別人，B 則是無償的幫助別人，哪一個是善？哪一個是偽善？</p><p>如果 B 不是複製人呢？</p><blockquote><p>—  重啟咲良田</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重啟咲良田 </tag>
            
            <tag> 偽善 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 安裝中文新酷音</title>
      <link href="/2017/07/04/Ubuntu-%E5%AE%89%E8%A3%9D%E4%B8%AD%E6%96%87%E6%96%B0%E9%85%B7%E9%9F%B3/"/>
      <url>/2017/07/04/Ubuntu-%E5%AE%89%E8%A3%9D%E4%B8%AD%E6%96%87%E6%96%B0%E9%85%B7%E9%9F%B3/</url>
      
        <content type="html"><![CDATA[<p>在一開始接觸 Ubuntu 最不習慣的應該就是預設只有英文鍵盤，每次久久用虛擬機建立一個新的 ubuntu 就會忘記上次怎麼把中文裝進去的…</p><a id="more"></a><p>我的 ubuntu 環境是 14.04 LTS 版本</p><h3 id="打開終端機"><a href="#打開終端機" class="headerlink" title="打開終端機"></a>打開終端機</h3><p>按下 windows 鍵，輸入 terminal，第一個程式就是了</p><h3 id="輸入以下安裝指令"><a href="#輸入以下安裝指令" class="headerlink" title="輸入以下安裝指令"></a>輸入以下安裝指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install ibus-chewing</span><br></pre></td></tr></table></figure><h3 id="重新開機"><a href="#重新開機" class="headerlink" title="重新開機"></a>重新開機</h3><h3 id="調整輸入法設定"><a href="#調整輸入法設定" class="headerlink" title="調整輸入法設定"></a>調整輸入法設定</h3><p>點擊右上角的輸入法 En，出現選單後選擇 “Text Entry Setting”</p><p><img src="/blog/images/ubuntu_type1.PNG" alt="Ubuntu 輸入法"></p><p>點擊圖案中的 “+” 符號，尋找新酷音 Chewing 加入</p><p>這樣就大功告成了</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 忽略已經 server 上有的檔案</title>
      <link href="/2017/07/02/Git-%E5%BF%BD%E7%95%A5%E5%B7%B2%E7%B6%93-server-%E4%B8%8A%E6%9C%89%E7%9A%84%E6%AA%94%E6%A1%88/"/>
      <url>/2017/07/02/Git-%E5%BF%BD%E7%95%A5%E5%B7%B2%E7%B6%93-server-%E4%B8%8A%E6%9C%89%E7%9A%84%E6%AA%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>.gitignore 可以忽略一些專案內的設定檔，像是 .classpath 或 .gradle 這些由專案自動產生，並且只適用於自己電腦的檔案，這些檔案可能在共同開發專案夥伴的電腦上並不會完全一樣，所以如果不忽略，可能會蓋來蓋去的。</p><a id="more"></a><p>可是假設你希望一起開發專案的人，在第一次 clone 下來時要 clone 下來，但是之後就不要再 push 上去，或者是有些設定檔你不需要被 server 上的更動而蓋掉呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-index --assume-unchanged &amp;lt;file-path&gt;</span><br></pre></td></tr></table></figure><p>上面這句話就是假設某個檔案，是假設他是沒有被改變的狀態，所以 git 就不會需要 add 到 satge 和 commit ，還有之後的 push。</p><p>PS. &lt;file-path&gt; 就是某個檔案的路徑</p><p>如果你要檢查哪些檔案是被你設定為 –assume-unchanged 狀態的，可以輸入以下指令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git ls-files -v | grep -e &quot;^[hsmrck]&quot;</span><br></pre></td></tr></table></figure><p>取消的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-index --no-assume-unchanged &amp;lt;filepath&gt;</span><br></pre></td></tr></table></figure><p>Reference：<br><a href="http://archive.robwilkerson.org/2010/03/02/git-tip-ignore-changes-to-tracked-files/" target="_blank" rel="noopener">http://archive.robwilkerson.org/2010/03/02/git-tip-ignore-changes-to-tracked-files/</a><br><a href="http://stackoverflow.com/questions/32287061/undoing-git-update-index-assume-unchanged" target="_blank" rel="noopener">http://stackoverflow.com/questions/32287061/undoing-git-update-index-assume-unchanged</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>責任推諉，我們是不是都推了一把？</title>
      <link href="/2017/07/02/%E8%B2%AC%E4%BB%BB%E6%8E%A8%E8%AB%89%EF%BC%8C%E6%88%91%E5%80%91%E6%98%AF%E4%B8%8D%E6%98%AF%E9%83%BD%E6%8E%A8%E4%BA%86%E4%B8%80%E6%8A%8A%EF%BC%9F/"/>
      <url>/2017/07/02/%E8%B2%AC%E4%BB%BB%E6%8E%A8%E8%AB%89%EF%BC%8C%E6%88%91%E5%80%91%E6%98%AF%E4%B8%8D%E6%98%AF%E9%83%BD%E6%8E%A8%E4%BA%86%E4%B8%80%E6%8A%8A%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>已經是上個禮拜的事情了，事情是這樣子的…</p><p>進去一個寫程式的團隊之前，裡面可能已經有很多有經驗的前輩在裡面，他們可能都已經訂好了開發的規範和流程，如果是網頁，應該有很多東西也都是前輩們已經做好的成品，新進人員只要套用進去就可以使用。</p><a id="more"></a><p>最近要開發一個功能，因為要使用網址列傳遞一些重要的訊息，而網址列通常都會被之前所開發的功能給清掉，避免有些重要訊息外顯在網址列，所以我就單純地認為有關於網址列需要的功能都要和那個前輩說，前輩說這個功能已經有了，只是會有他的條件，我就自己回去試了很久，但是好像都沒有成功，網址列的資料一直會在被取得之前就被清除掉，前前後後搞了一個下午，結果還是沒有成功…</p><p>最後靈光一現，我就在我的網頁完全剛開啟的時候就擷取…，解決之後對於自己非常的無言，因為這麼簡單的事情，我卻一直尋求透過他人解決，如果是以前的我，我知道應該怎麼做，只是單純的以為，既然別人有做，或者應該是別人的事情，我就忘了自己其實也可以解決。</p><p>最近在公司有點鬆懈，因為現在主管不再要求我寫程式，這一兩個禮拜寫的城市大多是幫別人寫的，負責的東西變少了，好像就讓我自己鬆懈了，許多事情都轉接給他人，對於公司的制度瞭解了，知道許多事情不歸我處理，我就習慣性地不再注意問題點，解決的方法也都透過他人提供，我就在想，分工明細，是不是間接的影響我們不想處理他人事物的意願？</p>]]></content>
      
      
      <categories>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 責任 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 新增文章並打開</title>
      <link href="/2017/06/28/hexo-%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E4%B8%A6%E6%89%93%E9%96%8B/"/>
      <url>/2017/06/28/hexo-%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E4%B8%A6%E6%89%93%E9%96%8B/</url>
      
        <content type="html"><![CDATA[<p>最近很愛用 hexo 寫文章，但是用起來一直有個困難，就是每次 hexo new 之後，每次都還要去 source 資料夾裡面找，萬一以後文章很多，不是更難找嗎？所以就想要和 npm script 結合，可以新增後就自動打開。(下次如果還要再打開編輯就另外再說啦~~)</p><a id="more"></a><h2 id="新增-package-json-的-new-指令"><a href="#新增-package-json-的-new-指令" class="headerlink" title="新增 package.json 的 new 指令"></a>新增 package.json 的 new 指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;new&quot;: &quot;node ./custom-scripts/new.js&quot;,</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="編輯-custom-scripts-new-js"><a href="#編輯-custom-scripts-new-js" class="headerlink" title="編輯 ./custom-scripts/new.js"></a>編輯 ./custom-scripts/new.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 引入執行 command line 指令的套件</span><br><span class="line">var cp = require(&apos;child_process&apos;);</span><br><span class="line"></span><br><span class="line">// 取得 file 參數</span><br><span class="line">// 執行 npm run new --file=[filename]</span><br><span class="line">let filename = process.env.npm_config_file;</span><br><span class="line"></span><br><span class="line">// 使用 hexo 新建文章</span><br><span class="line">let cmd_new = &quot;hexo new &quot;;</span><br><span class="line">cmd_new += &quot;\&quot;&quot; + filename + &quot;\&quot;&quot;;</span><br><span class="line"></span><br><span class="line">// 執行 hexo new 指定</span><br><span class="line">let new_process = cp.exec(cmd_new, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        console.error(`exec error: $&#123;error&#125;`);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    let cmd = &quot;code ./source/_posts/&quot;;</span><br><span class="line">    filename = filename.replace(/\s/g, &quot;-&quot;);</span><br><span class="line">    cmd += filename + &apos;.md&apos;;</span><br><span class="line"></span><br><span class="line">    // 執行使用 vs code 打開文章的指令</span><br><span class="line">    cp.exec(cmd, function (error, stdout, stderr) &#123;</span><br><span class="line">        if (error) console.log(`exec error: $&#123;error&#125;`);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>注意，不要把 custom-scripts 改為 scripts，因為 npm 預設 scripts 資料夾是有用途的，若改名為 scripts 你每次在執行 npm scripts 都會有問題。</li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>輸入以下指令看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run new --file=test</span><br></pre></td></tr></table></figure><p>我也測試過可以使用中文，並且夾雜空白：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run new --file=&quot;可以 夾雜 空白喔&quot;</span><br></pre></td></tr></table></figure><p>希望對大家有幫助。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Virtual Box 安裝 Ubuntu 紀錄</title>
      <link href="/2017/06/26/Virtual-Box-%E5%AE%89%E8%A3%9D-Ubuntu-%E7%B4%80%E9%8C%84/"/>
      <url>/2017/06/26/Virtual-Box-%E5%AE%89%E8%A3%9D-Ubuntu-%E7%B4%80%E9%8C%84/</url>
      
        <content type="html"><![CDATA[<p>最近有點想要了解網管的工作，還有就是學一些較底層的東西，所以又開始接觸 VM，這次一樣是使用之前大學就常用的 Virtual Box，希望可以在 VM 架設 FTP 和 nodejs 的服務，同時可以讓我的實體機可以連到 VM。</p><a id="more"></a><h2 id="新建一個虛擬機"><a href="#新建一個虛擬機" class="headerlink" title="新建一個虛擬機"></a>新建一個虛擬機</h2><ul><li>下載 Virtual Box</li><li>下載 Ubuntu 映像檔</li><li>設定虛擬機</li></ul><h2 id="設定內外-虛擬機、實體機-可以互連的網路"><a href="#設定內外-虛擬機、實體機-可以互連的網路" class="headerlink" title="設定內外(虛擬機、實體機)可以互連的網路"></a>設定內外(虛擬機、實體機)可以互連的網路</h2><ul><li>在實體機區域網路的增加一個虛擬 ip<blockquote><p>假設 ip 為 192.168.0.1</p></blockquote></li><li>在虛擬機增加一個橋接器網卡</li><li>在虛擬機的橋接器網卡設定 ip，並且和實體機在同一個網域下<blockquote><p>假設 ip 為 192.168.0.2<br>假設 mask 為 255.255.255.0<br>假設 gateway 為 192.168.0.1 (要和實體機增加的 ip 一樣)  </p></blockquote></li></ul><h2 id="測試內外互連的狀況"><a href="#測試內外互連的狀況" class="headerlink" title="測試內外互連的狀況"></a>測試內外互連的狀況</h2><ul><li><p>實體機</p><blockquote><p>打開終端機 (terminal)<br>$ ping 192.168.0.2</p></blockquote></li><li><p>虛擬機</p><blockquote><p>打開終端機 (terminal)<br>$ ping 192.168.0.1</p></blockquote></li></ul><h2 id="問題-待解"><a href="#問題-待解" class="headerlink" title="問題(待解)"></a>問題(待解)</h2><p>Q: 原本我在 Virtual Box 只有使用一張網卡 NAT，之後為了互連，不管是 NAT 改成橋接介面卡還是保留 NAT 增加另外一張橋接介面卡，都會無法連到外網(ex: google.com.tw)，只能實體機和虛擬機相連。</p><blockquote><p>A: …</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Double (測試替身)</title>
      <link href="/2017/06/21/Test-Double-%E6%B8%AC%E8%A9%A6%E6%9B%BF%E8%BA%AB/"/>
      <url>/2017/06/21/Test-Double-%E6%B8%AC%E8%A9%A6%E6%9B%BF%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>使用 Test Double 測試替身，可以解決要測試時會需要的複雜的元件，以及測試可能會測很久的問題，我們可以直接修改 Test Double，也可以讓資料集小一點。</p><a id="more"></a><h2 id="測試術語"><a href="#測試術語" class="headerlink" title="測試術語"></a>測試術語</h2><blockquote><ul><li>SUT：System Under Test 或 Software Under Test 的簡寫，代表待測程式。</li><li>DOC：Depended Component 相依的元件，DOC 是 SUT 要使用時會需要的元件。</li></ul></blockquote><h2 id="測試的相依問題"><a href="#測試的相依問題" class="headerlink" title="測試的相依問題"></a>測試的相依問題</h2><p>如果要測試 SUT，DOC 也必須要存在，如果 DOC 有很多，就會變得很複雜，不只測試方式，測試環境也很複雜。</p><h2 id="解決問題"><a href="#解決問題" class="headerlink" title="解決問題"></a>解決問題</h2><ul><li>怎麼驗證 SUT 的邏輯有沒有問題就好，不要使用到 DOC</li><li>DOC 資料太大，導致測試會測很久</li></ul><p>使用 Test Double 測試替身，可以解決以上問題，我們可以直接修改 Test Double，也可以讓資料集小一點。</p><h2 id="五種測試替身"><a href="#五種測試替身" class="headerlink" title="五種測試替身"></a>五種測試替身</h2><h3 id="Dummy-Object"><a href="#Dummy-Object" class="headerlink" title="Dummy Object"></a>Dummy Object</h3><blockquote><p>不包含實作的物件，在測試中需要傳入，但卻不會用到的參數</p></blockquote><h3 id="Test-Stub"><a href="#Test-Stub" class="headerlink" title="Test Stub"></a>Test Stub</h3><blockquote><p>回傳固定值的實作</p></blockquote><h3 id="Test-Spy"><a href="#Test-Spy" class="headerlink" title="Test Spy"></a>Test Spy</h3><blockquote><p>回傳固定值的實作，但會記錄自身被呼叫的那些成員，以確認 SUT 與他的成員互動正確</p></blockquote><h3 id="Fake-Object"><a href="#Fake-Object" class="headerlink" title="Fake Object"></a>Fake Object</h3><blockquote><p>提供接近原始物件，但是較簡單的實作。</p></blockquote><h3 id="Mock-Object"><a href="#Mock-Object" class="headerlink" title="Mock Object"></a>Mock Object</h3><blockquote><p>由假的程式庫動態建立<br>開發人員看不到實作 Test Double 的程式碼，只可設定 Mock 以提供回傳值、預期要使用的特定成員。</p></blockquote><ul><li>Mock 是自動產生 Test Double 的技術</li></ul><p><a href="http://teddy-chen-tw.blogspot.tw/2014/09/test-double2.html" target="_blank" rel="noopener">參考來源</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Service Test</title>
      <link href="/2017/06/21/Dependency-Service-Test/"/>
      <url>/2017/06/21/Dependency-Service-Test/</url>
      
        <content type="html"><![CDATA[<p>在開發 angular 的時候，如果使用到資料，很常會依賴 service 來傳遞資料。</p><a id="more"></a><p>在測試時，不建議使用真正的 service ?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">   declarations: [ WelcomeComponent ],</span><br><span class="line">// providers:    [ UserService ]  // NO! Don&apos;t provide the real service!</span><br><span class="line">                                  // Provide a test-double instead</span><br><span class="line">   providers:    [ &#123;provide: UserService, useValue: userServiceStub &#125; ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>userServiceStub 就是測試替身</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Component Test</title>
      <link href="/2017/06/21/Component-Test/"/>
      <url>/2017/06/21/Component-Test/</url>
      
        <content type="html"><![CDATA[<p>angular 最重要的就是 component，而我本身也不是很清楚 angular 是怎麼把 多個 component 編譯成一頁式的網頁，所以如何建立測試環境我就不會了，幸好<br> angular 也提供測試 component 的教學。</p><a id="more"></a><hr><p>上一篇 Karma Test 所備份起來的 app.component.spec.ts 可以再把他打開來，裡面的時候應該還蠻乾淨的，內容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; TestBed, async &#125; from &apos;@angular/core/testing&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; AppComponent &#125; from &apos;./app.component&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;AppComponent&apos;, () =&gt; &#123;</span><br><span class="line">    beforeEach(async(() =&gt; &#123;</span><br><span class="line">        TestBed.configureTestingModule(&#123;</span><br><span class="line">            declarations: [</span><br><span class="line">                AppComponent</span><br><span class="line">            ]</span><br><span class="line">        &#125;).compileComponents();</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    it(&apos;should create the app&apos;, async(() =&gt; &#123;</span><br><span class="line">        const fixture = TestBed.createComponent(AppComponent);</span><br><span class="line">        const app = fixture.debugElement.componentInstance;</span><br><span class="line">        expect(app).toBeTruthy();</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>儲存後執行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm test</span><br></pre></td></tr></table></figure></p><p>就可以看到瀏覽器有一個 AppComponent 的測試包，下面有一個執行的測試，名為 should create the app</p><p>代表 component 已經被成功建立起來。<br>(照理說要應該測試到有錯誤情況並解決，但我這邊不理解，先跳過)</p><hr><h2 id="TestBed"><a href="#TestBed" class="headerlink" title="TestBed"></a>TestBed</h2><p>用來產生測試用的 module。在 beforeEach 設定好 module，所以有需要的依賴套件，也要在 beforeEach 加入</p><hr><h2 id="TestBed-configureTestingModule"><a href="#TestBed-configureTestingModule" class="headerlink" title="TestBed.configureTestingModule"></a>TestBed.configureTestingModule</h2><p>要注意是不是把 html 寫在另外一個檔案，如果是的話，要記得使用異步任務 (async) 建立</p><hr><h2 id="Test-createcomponent"><a href="#Test-createcomponent" class="headerlink" title="Test.createcomponent"></a>Test.createcomponent</h2><p>會產生一個測試用的 component 實體，大多命名為 fixture，可以透過 fixture.componentInstance 取得你所編輯的 component，可以取得屬性及函式。</p><hr><h2 id="componentInstance"><a href="#componentInstance" class="headerlink" title="componentInstance"></a>componentInstance</h2><ul><li>private vs. public</li></ul><p>如果你設為 private，test 裡面要取得時就會跳出錯誤，因為這裡會使用 new 的方式產生 component。</p><p>順帶一提，也有人說如果設為 private，在一些 lint 檢查時，會認為 html 會無法取用到，編譯時會產生錯誤。</p><hr><h2 id="debugElement"><a href="#debugElement" class="headerlink" title="debugElement"></a>debugElement</h2><p>掌管所有 DOM 的所有元素</p><hr><h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>使用 css 的選擇器 (selector) 選擇到想要的元素，例如使用 tag、id、class 或者其他的 attribute</p><ul><li>queryAll 會回傳一個陣列</li></ul><hr><h2 id="nativeElement"><a href="#nativeElement" class="headerlink" title="nativeElement"></a>nativeElement</h2><p>在 angular 要取得元素內的 value 或其他屬性時要先取得的物件</p><hr><h2 id="fixture-detectChanges"><a href="#fixture-detectChanges" class="headerlink" title="fixture.detectChanges()"></a>fixture.detectChanges()</h2><p>TestBed.createComponent 不會觸發修改，還有在 test 直接修改 component 的屬性，不觸發 detectChanges() 是不會修改到 DOM 上面，所以可能會得到不如預期的結果</p><ul><li>ComponentFixtureAutoDetect</li></ul><p>如果很頻繁的更改，可以使用自動偵測修改，import 之後在 configureTestingModule 內增加到 providers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ComponentFixtureAutoDetect &#125; from &apos;@angular/core/testing&apos;;</span><br><span class="line">...</span><br><span class="line">TestBed.configureTestingModule(&#123;</span><br><span class="line">  declarations: [ BannerComponent ],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123; provide: ComponentFixtureAutoDetect, useValue: true &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Karma Test</title>
      <link href="/2017/06/20/Karma-Test/"/>
      <url>/2017/06/20/Karma-Test/</url>
      
        <content type="html"><![CDATA[<p>如果你和我一樣使用 angular cli 建立專案，你會發現在 app 資料夾下有 5 個檔案：</p><ul><li>app.component.ts</li><li>app.module.ts</li><li>app.component.html</li><li>app.component.css</li><li>app.component.spec.ts</li></ul><p>*.spec.ts 會在你執行 npm test 的時候運行，因為 karma.conf.js 和 src/test.ts 會設定好要運行專案下的所有 *.spec.ts 檔案</p><a id="more"></a><hr><p>建議先把 app.component.spec.ts 另存名稱備份，待會我們要先跟著 angular.io 文件寫一個簡單的單元測試，如果讓 app.component.spec.ts 也被執行，會有很多看不懂的訊息跑出來。</p><h3 id="建立一個-src-app-1st-spec-ts"><a href="#建立一個-src-app-1st-spec-ts" class="headerlink" title="建立一個 src/app/1st.spec.ts"></a>建立一個 src/app/1st.spec.ts</h3><h3 id="寫單元測試"><a href="#寫單元測試" class="headerlink" title="寫單元測試"></a>寫單元測試</h3><p>在 1st.spec.ts 檔案內加入以下程式碼：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;1st tests&apos;, () =&gt; &#123;</span><br><span class="line">  it(&apos;true is true&apos;, () =&gt; expect(true).toBe(true));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這是讓 true 等於 true，所以測試結果一定是成功的。</p><h3 id="執行所有測試-test"><a href="#執行所有測試-test" class="headerlink" title="執行所有測試 test"></a>執行所有測試 test</h3><p>如果你在 vs code 下，按下快捷鍵 ctrl + `，會開啟終端機，輸入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm test</span><br></pre></td></tr></table></figure><p>輸入之後會編譯 angular 專案，並且打開預設瀏覽器，顯示測試的結果，沒有意外的話會如下圖：</p><p><img src="/blog/images/karma_test1.png" alt="Karma Test"></p><h3 id="修改為錯誤結果"><a href="#修改為錯誤結果" class="headerlink" title="修改為錯誤結果"></a>修改為錯誤結果</h3><p>在 1st.spec.ts 檔案中將任意一個 true 改為 false</p><h3 id="查看錯誤訊息"><a href="#查看錯誤訊息" class="headerlink" title="查看錯誤訊息"></a>查看錯誤訊息</h3><p>ng test 會監聽所有 *.spec.ts 內容的改變，所以修改後儲存再瀏覽器查看就好了。</p><h3 id="開啟-Debug-模式"><a href="#開啟-Debug-模式" class="headerlink" title="開啟 Debug 模式"></a>開啟 Debug 模式</h3><ul><li><p>在剛剛的瀏覽器右上角有一個 Debug 的按鈕，點下去之後他會幫你開啟另外一個頁籤。</p></li><li><p>開啟開發者模式 ( windows 下按快捷鍵 F12) 切換到 source 頁籤</p></li><li><p>找到 1st.spec.ts 檔案，如果沒有，按下快捷鍵 ctrl + p，輸入檔案名稱。</p></li><li><p>在 1st.spec.ts 插入中斷點 (點擊程式碼旁邊的行數就好了)</p></li><li><p>重新整理畫面就可以停在中斷點</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Test</title>
      <link href="/2017/06/19/angular-test/"/>
      <url>/2017/06/19/angular-test/</url>
      
        <content type="html"><![CDATA[<p>angular 在一開始初始化專案的時候，就會發現 package.json 裡面有很多測試的第三方套件，如 karma、jasmine 等，在看官方文件的時候，就大概有說是要因應不同情況的測試，像是點對點、單元測試等，接下來幾天我會花時間研究怎麼寫測試，不過主要還是想要研究單元測試就好 XD。</p><a id="more"></a><hr><h2 id="套件及用途"><a href="#套件及用途" class="headerlink" title="套件及用途"></a>套件及用途</h2><table><thead><tr><th>套件</th><th>用途</th></tr></thead><tbody><tr><td>Jasmine</td><td>適用於基本的測試，主要測試 html 在瀏覽器上執行的結果。</td></tr><tr><td>Angular testing utilities</td><td>在 angular 的環境下的測試。</td></tr><tr><td>Karma</td><td>在開發時期所應該寫的單元測試。</td></tr><tr><td>Protractor</td><td>點對點的測試。就是關於使用者互動的測試。</td></tr></tbody></table><p>隔離單元測試(Unit Test) 和 測試實用程序(Test Utilities)</p><ul><li>前者可單獨測試，後者要測試使用者和產品的互動關係</li><li>Angular 的 通道(Pipes) 和 服務(Services) 應該要寫單元測試</li><li>Component 應該寫測試實用程序</li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code 控制 Tab 大小</title>
      <link href="/2017/06/16/VS-code-%E6%8E%A7%E5%88%B6-Tab-%E5%A4%A7%E5%B0%8F/"/>
      <url>/2017/06/16/VS-code-%E6%8E%A7%E5%88%B6-Tab-%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>VS code 全名為 Visual Studio Code，是一個功能強大的記事本軟體，因為在開發 angular2，大家都推薦這個，就開始用了。</p><p>大家在寫程式的時候，蠻常會遇到排版的問題，VS code 也有自動排版的功能，快捷鍵是 Shift + Alt + F，之前用還蠻有問題的，最近好像有在改善，但是!!!常常還是有每個人 tab 大小不一，或者有些 cli 工具產生的檔案，tab size 就是不一樣。</p><a id="more"></a><hr><h3 id="單一檔案的調整"><a href="#單一檔案的調整" class="headerlink" title="單一檔案的調整"></a>單一檔案的調整</h3><p>在 VS code 右下角會顯示 “空格:4”，如果不喜歡這個 tab size 可以點這個進行調整。</p><p><img src="/blog/images/vscode_editview_tab_size.PNG" alt="VS code editview"></p><p><img src="/blog/images/vscode_formatter_tab.PNG" alt="Select Formatter"></p><p>選擇想要的空格數，然後再按一次快捷鍵 Shift + Alt + F</p><h3 id="修改-settings-內的-tab-size"><a href="#修改-settings-內的-tab-size" class="headerlink" title="修改 settings 內的 tab size"></a>修改 settings 內的 tab size</h3><ol><li>先打開 VS code 的偏好設定</li><li>搜尋 tabsize</li><li>在右邊的畫面 (User Setting) 加上 tabsize 的設定<br>如下圖</li></ol><p><img src="/blog/images/settings_tabsize.PNG" alt="VS code settings"></p><h3 id="關閉偵測檔案預設的-tabsize-大小"><a href="#關閉偵測檔案預設的-tabsize-大小" class="headerlink" title="關閉偵測檔案預設的 tabsize 大小"></a>關閉偵測檔案預設的 tabsize 大小</h3><p>假設我自己設定 tabsize 大小為 4，可是每次 angular-cli 產生的檔案 tabsize 就是 2，或者別人給我的不是 4，我按下快捷鍵 Shift + Alt + F 都沒有排成我想要的樣子，你就可以參考此做法</p><ol><li>先打開 VS code 的偏好設定</li><li>搜尋 detectIndentation</li><li>在右邊的畫面 (User Setting) 加上 detectIndentation 為 false 的設定<br>如下圖</li></ol><p><img src="/blog/images/vscode_detectIndentation.PNG" alt="VS code settings"></p>]]></content>
      
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在 GitHub 使用 SSH</title>
      <link href="/2017/06/15/%E5%9C%A8-Github-%E4%BD%BF%E7%94%A8-SSH/"/>
      <url>/2017/06/15/%E5%9C%A8-Github-%E4%BD%BF%E7%94%A8-SSH/</url>
      
        <content type="html"><![CDATA[<p>有些資料傳輸都還是用明碼(也就是不加密的方式)傳輸，這樣其實是非常危險的，而且傳輸的過程中，可能還會被有心人士擷取。</p><p>SSH 全名為 Secure Shell，透過 SSH 可以對所有傳輸的資料進行加密，也可以防止 DNS 和 IP 欺騙。</p><p>(資料來源：<a href="https://zh.wikipedia.org/wiki/Secure_Shell" title="SSH" target="_blank" rel="noopener">維基百科</a>)</p><a id="more"></a><hr><p>首先，假設你已經在你的電腦安裝的 git。</p><p>如果沒有請到<a href="https://git-scm.com/" title="Git" target="_blank" rel="noopener">官方</a>下載並安裝</p><ol><li><p>打開你的 Git Bash</p></li><li><p>切換到電腦的使用者資料夾下</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /d C:/Users/your_user_name</span><br></pre></td></tr></table></figure><ol start="3"><li>輸入以下指定</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; ssh-keygen -t rsa -C &quot;youremail@emailhost&quot;</span><br></pre></td></tr></table></figure><p>過程中會問你三個問題，第一是要將金鑰儲存在哪裡，第二和第三是要你輸入密碼，我自己都是直接按 enter，結束後出現類似下面的訊息就是成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in ...</span><br><span class="line">...</span><br><span class="line">The key&apos;s randomart image is:</span><br></pre></td></tr></table></figure></p><ol start="4"><li>到你的路徑下找到金鑰，路徑應該會是 C:/Users/your_user_name/.ssh 資料夾內</li></ol><ul><li>id_rsa 為你的私鑰</li><li>id_rsa.pub 為你的公鑰，請將此內容貼到 github 的設定內</li></ul><ol start="5"><li>登入你的 GitHub 進行 SSH 的設定</li></ol><p>進入你的 Profile -&gt; Settings</p><p><img src="/blog/images/github profile.PNG" alt="Alt text" title="profile"></p><p>點擊 SSH 頁籤，增加一個 SSH 金鑰</p><p><img src="/blog/images/github setting ssh.PNG" alt="Alt text" title="profile"></p><ol start="6"><li>將 github.com 加入到認識的主機</li></ol><p>一樣打開你的 git bash，然後輸入以下指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>執行之後，如果遇到問你要不要繼續連線到 github.com 授權，請輸入 yes，看到以下畫面後就代表成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &apos;github.com,192.30.253.113&apos; (RSA) to the list of known hosts.</span><br><span class="line">Hi contemplator! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><a href="https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows" target="_blank" rel="noopener">參考文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 換主題</title>
      <link href="/2017/06/14/hexo-%E6%8F%9B%E4%B8%BB%E9%A1%8C/"/>
      <url>/2017/06/14/hexo-%E6%8F%9B%E4%B8%BB%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>這篇主要是介紹怎麼換掉 hexo 的主題 (Theme)，順帶一提，原本的主題叫 landscape，我現在用的叫做 material-flow。</p><p>因為我也只有換過 material-flow，所以文章內容我也是以 material-flow 為範例。</p><a id="more"></a><hr><h3 id="找自己想要的主題"><a href="#找自己想要的主題" class="headerlink" title="找自己想要的主題"></a>找自己想要的主題</h3><p><a href="https://hexo.io/themes/" title="官方主題" target="_blank" rel="noopener">官方主題</a></p><h3 id="看安裝說明"><a href="#看安裝說明" class="headerlink" title="看安裝說明"></a>看安裝說明</h3><p><a href="https://github.com/stkevintan/hexo-theme-material-flow" title="Material Flow" target="_blank" rel="noopener">Material Flow: Github</a></p><p>最下面有 Installation 章節</p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><h4 id="切換到自己的專案目錄下"><a href="#切換到自己的專案目錄下" class="headerlink" title="切換到自己的專案目錄下"></a>切換到自己的專案目錄下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /your/path/blog</span><br></pre></td></tr></table></figure><h4 id="輸入-npm-安裝指令"><a href="#輸入-npm-安裝指令" class="headerlink" title="輸入 npm 安裝指令"></a>輸入 npm 安裝指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content</span><br></pre></td></tr></table></figure><p>這是要確保他人寫好的主題要使用到的套件，你的專案是否都有正確安裝</p><h4 id="下載別人寫好的主題到自己的專案目錄下"><a href="#下載別人寫好的主題到自己的專案目錄下" class="headerlink" title="下載別人寫好的主題到自己的專案目錄下"></a>下載別人寫好的主題到自己的專案目錄下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow</span><br></pre></td></tr></table></figure><p>很神奇的是這個安裝不會安裝在 node_modules，而是會安裝在專案目錄的 themes 下</p><h3 id="修改-hexo-的設定檔"><a href="#修改-hexo-的設定檔" class="headerlink" title="修改 hexo 的設定檔"></a>修改 hexo 的設定檔</h3><p>打開你的專案目錄下的 _config.yml，將 theme: landscape 改成 theme: material-flow</p><h3 id="測試看看"><a href="#測試看看" class="headerlink" title="測試看看"></a>測試看看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 建議的設定</title>
      <link href="/2017/06/13/hexo-%E5%BB%BA%E8%AD%B0%E7%9A%84%E8%A8%AD%E5%AE%9A/"/>
      <url>/2017/06/13/hexo-%E5%BB%BA%E8%AD%B0%E7%9A%84%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>這篇文章介紹我對於 git 的設定還有 _config.yml 的修改</p><a id="more"></a><hr><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>參照我上一篇 hexo 的建置，你會發現你的專案還不是一個 git 的專案，你輸入 git status 要檢查 git 的狀態，會得不到任何回應。  </p><p>我想要把 blog 設置在 gh-pages 分支，因為我要把 master 分支用來保留維修改主題或者其他設定。  </p><ol><li>在 github 建立 gh-pages 分支</li><li>將 _config.yml 的 deploy 下的 branch 改為 gh-pages</li><li><p>為專案資料夾做 git 的初始化  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>為專案設置之後我要 push (推送程式碼) 的目的地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/user_name/repository.git</span><br></pre></td></tr></table></figure></li><li><p>檢查遠端 git 的目的地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></li></ol><p>如果要刪除不要的遠端目的地，指令在下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm remote_name</span><br></pre></td></tr></table></figure></p><ol start="5"><li>完成一次 git push 完整的流程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *</span><br><span class="line">$ git commit -m &apos;init&apos;</span><br><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure><p>PS. 之後 push 不用再設定目的地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure></p><h2 id="config-yml-網站的設定"><a href="#config-yml-網站的設定" class="headerlink" title="_config.yml 網站的設定"></a>_config.yml 網站的設定</h2><h3 id="github-的-branch-分支"><a href="#github-的-branch-分支" class="headerlink" title="github 的 branch (分支)"></a>github 的 branch (分支)</h3><ol><li>在 github 建立 gh-pages 的分支</li><li>到 repository 的 setting 頁面，將 GitHub Pages 的分支設定改為 gh-pages，記得按下 save</li><li>到 yml 檔將 deploy 下的 branch 改為 gh-pages</li></ol><h3 id="增加網站的-icon"><a href="#增加網站的-icon" class="headerlink" title="增加網站的 icon"></a>增加網站的 icon</h3><ol><li>準備一個 favicon.ico</li><li>放到 source 下</li><li><p>執行 hexo server 測試</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li><li><p>打開瀏覽器，在網址列輸入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 檢查網站是否增加了 icon</p></li></ol><h2 id="package-json-增加常用的指令"><a href="#package-json-增加常用的指令" class="headerlink" title="package.json 增加常用的指令"></a>package.json 增加常用的指令</h2><ol><li><p>將本地端的 server 開起來</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;hexo server&quot;</span><br></pre></td></tr></table></figure></li><li><p>簡單化部署的動作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;deploy&quot;: &quot;hexo deploy --generate&quot;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/blog/images/package_script.png" alt="Alt text" title="Optional title"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 在 Github 架設部落格 | Blog</title>
      <link href="/2017/06/12/%E4%BD%BF%E7%94%A8-Hexo-%E5%9C%A8-Github-%E6%9E%B6%E8%A8%AD%E9%83%A8%E8%90%BD%E6%A0%BC-Blog/"/>
      <url>/2017/06/12/%E4%BD%BF%E7%94%A8-Hexo-%E5%9C%A8-Github-%E6%9E%B6%E8%A8%AD%E9%83%A8%E8%90%BD%E6%A0%BC-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul><li><p>Nodejs<br>  需要使用到 npm<br>  在終端機輸入以下指令，檢查是否安裝</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure></li><li><p>Git<br>  需要使用 Git 推送程式碼及資料到 Github</p></li></ul><a id="more"></a><hr><h2 id="開始正題"><a href="#開始正題" class="headerlink" title="開始正題"></a>開始正題</h2><ol><li>在 GitHub 建立一個 repository</li><li><p>安裝 Hexo 在全域</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p> 初始化一個 Hexo 資料夾（你也可以叫他專案)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init project_name</span><br></pre></td></tr></table></figure></li><li><p>安裝需要的套件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd project_name</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>安裝 hexo-deployer-git 在此專案<br>不可以安裝在 devDependencies</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>配置 yml 設定檔</p></li></ol><h3 id="Site-網站配置"><a href="#Site-網站配置" class="headerlink" title="Site 網站配置"></a>Site 網站配置</h3><table><thead><tr><th>配置屬性</th><th>說明</th></tr></thead><tbody><tr><td>title</td><td>網站名稱</td></tr></tbody></table><h3 id="Url-網站路徑配置"><a href="#Url-網站路徑配置" class="headerlink" title="Url 網站路徑配置"></a>Url 網站路徑配置</h3><table><thead><tr><th>配置屬性</th><th>說明</th></tr></thead><tbody><tr><td>url</td><td>網站網址 <br>ex: <a href="http://github_user_name.github.io/" target="_blank" rel="noopener">http://github_user_name.github.io/</a></td></tr><tr><td>root</td><td>網站的根目錄，github 的 repository 名稱  <br>ex: blog</td></tr></tbody></table><h3 id="Deployment-部署配置"><a href="#Deployment-部署配置" class="headerlink" title="Deployment 部署配置"></a>Deployment 部署配置</h3><table><thead><tr><th>配置屬性</th><th>說明</th></tr></thead><tbody><tr><td>deploy</td><td>部署的意思</td></tr><tr><td>type</td><td>部署的方式 <br>ex: git</td></tr><tr><td>repo</td><td>git 上面的 repository 路徑，從 github repository 的 use ssh 取得 <br>ex: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:github_user_name/blog.git</td></tr><tr><td>branch</td><td>github 的分支名稱 <br>ex: master</td></tr></tbody></table><ol start="7"><li><p>產生靜態檔（編譯 hexo 專案)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></li><li><p>部署到 github 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>如果你 deploy 出現以下錯誤，說你沒有權限，錯誤訊息可能會叫你使用 ssh 認證，請見另外一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error: Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
